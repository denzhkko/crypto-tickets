// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vk_music.proto

#ifndef PROTOBUF_vk_5fmusic_2eproto__INCLUDED
#define PROTOBUF_vk_5fmusic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "parsed_blobs.pb.h"
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class SessionOrVkMusicEvent;
class SessionOrVkMusicEventDefaultTypeInternal;
extern SessionOrVkMusicEventDefaultTypeInternal _SessionOrVkMusicEvent_default_instance_;
class TrackOrPlaylistOrListenEvent;
class TrackOrPlaylistOrListenEventDefaultTypeInternal;
extern TrackOrPlaylistOrListenEventDefaultTypeInternal _TrackOrPlaylistOrListenEvent_default_instance_;
class TrackOrPlaylistOrUserPrivacy;
class TrackOrPlaylistOrUserPrivacyDefaultTypeInternal;
extern TrackOrPlaylistOrUserPrivacyDefaultTypeInternal _TrackOrPlaylistOrUserPrivacy_default_instance_;
class VkMusicClick;
class VkMusicClickDefaultTypeInternal;
extern VkMusicClickDefaultTypeInternal _VkMusicClick_default_instance_;
class VkMusicClickOrQuery;
class VkMusicClickOrQueryDefaultTypeInternal;
extern VkMusicClickOrQueryDefaultTypeInternal _VkMusicClickOrQuery_default_instance_;
class VkMusicEvent;
class VkMusicEventDefaultTypeInternal;
extern VkMusicEventDefaultTypeInternal _VkMusicEvent_default_instance_;
class VkMusicExtraData;
class VkMusicExtraDataDefaultTypeInternal;
extern VkMusicExtraDataDefaultTypeInternal _VkMusicExtraData_default_instance_;
class VkMusicFrontendExtradata;
class VkMusicFrontendExtradataDefaultTypeInternal;
extern VkMusicFrontendExtradataDefaultTypeInternal _VkMusicFrontendExtradata_default_instance_;
class VkMusicLyrics;
class VkMusicLyricsDefaultTypeInternal;
extern VkMusicLyricsDefaultTypeInternal _VkMusicLyrics_default_instance_;
class VkMusicPerformer;
class VkMusicPerformerDefaultTypeInternal;
extern VkMusicPerformerDefaultTypeInternal _VkMusicPerformer_default_instance_;
class VkMusicPlaylist;
class VkMusicPlaylistDefaultTypeInternal;
extern VkMusicPlaylistDefaultTypeInternal _VkMusicPlaylist_default_instance_;
class VkMusicQueryBlockClicks;
class VkMusicQueryBlockClicksDefaultTypeInternal;
extern VkMusicQueryBlockClicksDefaultTypeInternal _VkMusicQueryBlockClicks_default_instance_;
class VkMusicQueryBlockClicks_Block;
class VkMusicQueryBlockClicks_BlockDefaultTypeInternal;
extern VkMusicQueryBlockClicks_BlockDefaultTypeInternal _VkMusicQueryBlockClicks_Block_default_instance_;
class VkMusicQueryBlockClicks_Service;
class VkMusicQueryBlockClicks_ServiceDefaultTypeInternal;
extern VkMusicQueryBlockClicks_ServiceDefaultTypeInternal _VkMusicQueryBlockClicks_Service_default_instance_;
class VkMusicSession;
class VkMusicSessionDefaultTypeInternal;
extern VkMusicSessionDefaultTypeInternal _VkMusicSession_default_instance_;
class VkMusicSpellcheckerResponse;
class VkMusicSpellcheckerResponseDefaultTypeInternal;
extern VkMusicSpellcheckerResponseDefaultTypeInternal _VkMusicSpellcheckerResponse_default_instance_;
class VkMusicTrack;
class VkMusicTrackDefaultTypeInternal;
extern VkMusicTrackDefaultTypeInternal _VkMusicTrack_default_instance_;
class VkMusicTrackOrLyrics;
class VkMusicTrackOrLyricsDefaultTypeInternal;
extern VkMusicTrackOrLyricsDefaultTypeInternal _VkMusicTrackOrLyrics_default_instance_;
class VkMusicTrackStatsForQuery;
class VkMusicTrackStatsForQueryDefaultTypeInternal;
extern VkMusicTrackStatsForQueryDefaultTypeInternal _VkMusicTrackStatsForQuery_default_instance_;
class VkMusicUMAAlbumMeta;
class VkMusicUMAAlbumMetaDefaultTypeInternal;
extern VkMusicUMAAlbumMetaDefaultTypeInternal _VkMusicUMAAlbumMeta_default_instance_;
class VkMusicUserEventListen;
class VkMusicUserEventListenDefaultTypeInternal;
extern VkMusicUserEventListenDefaultTypeInternal _VkMusicUserEventListen_default_instance_;
class VkMusicUserPrivacy;
class VkMusicUserPrivacyDefaultTypeInternal;
extern VkMusicUserPrivacyDefaultTypeInternal _VkMusicUserPrivacy_default_instance_;
class VkTrackList;
class VkTrackListDefaultTypeInternal;
extern VkTrackListDefaultTypeInternal _VkTrackList_default_instance_;
class VkUserEventHistory;
class VkUserEventHistoryDefaultTypeInternal;
extern VkUserEventHistoryDefaultTypeInternal _VkUserEventHistory_default_instance_;
}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {

namespace protobuf_vk_5fmusic_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_vk_5fmusic_2eproto

enum VkMusicSpellcheckerResponse_Type {
  VkMusicSpellcheckerResponse_Type_AUTO = 1,
  VkMusicSpellcheckerResponse_Type_SUGG = 2
};
bool VkMusicSpellcheckerResponse_Type_IsValid(int value);
const VkMusicSpellcheckerResponse_Type VkMusicSpellcheckerResponse_Type_Type_MIN = VkMusicSpellcheckerResponse_Type_AUTO;
const VkMusicSpellcheckerResponse_Type VkMusicSpellcheckerResponse_Type_Type_MAX = VkMusicSpellcheckerResponse_Type_SUGG;
const int VkMusicSpellcheckerResponse_Type_Type_ARRAYSIZE = VkMusicSpellcheckerResponse_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* VkMusicSpellcheckerResponse_Type_descriptor();
inline const ::std::string& VkMusicSpellcheckerResponse_Type_Name(VkMusicSpellcheckerResponse_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    VkMusicSpellcheckerResponse_Type_descriptor(), value);
}
inline bool VkMusicSpellcheckerResponse_Type_Parse(
    const ::std::string& name, VkMusicSpellcheckerResponse_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VkMusicSpellcheckerResponse_Type>(
    VkMusicSpellcheckerResponse_Type_descriptor(), name, value);
}
enum VkMusicSession_Sex {
  VkMusicSession_Sex_FEMALE = 1,
  VkMusicSession_Sex_MALE = 2
};
bool VkMusicSession_Sex_IsValid(int value);
const VkMusicSession_Sex VkMusicSession_Sex_Sex_MIN = VkMusicSession_Sex_FEMALE;
const VkMusicSession_Sex VkMusicSession_Sex_Sex_MAX = VkMusicSession_Sex_MALE;
const int VkMusicSession_Sex_Sex_ARRAYSIZE = VkMusicSession_Sex_Sex_MAX + 1;

const ::google::protobuf::EnumDescriptor* VkMusicSession_Sex_descriptor();
inline const ::std::string& VkMusicSession_Sex_Name(VkMusicSession_Sex value) {
  return ::google::protobuf::internal::NameOfEnum(
    VkMusicSession_Sex_descriptor(), value);
}
inline bool VkMusicSession_Sex_Parse(
    const ::std::string& name, VkMusicSession_Sex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VkMusicSession_Sex>(
    VkMusicSession_Sex_descriptor(), name, value);
}
enum VkMusicSessionType {
  TRACK = 1,
  ALBUM = 2
};
bool VkMusicSessionType_IsValid(int value);
const VkMusicSessionType VkMusicSessionType_MIN = TRACK;
const VkMusicSessionType VkMusicSessionType_MAX = ALBUM;
const int VkMusicSessionType_ARRAYSIZE = VkMusicSessionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VkMusicSessionType_descriptor();
inline const ::std::string& VkMusicSessionType_Name(VkMusicSessionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VkMusicSessionType_descriptor(), value);
}
inline bool VkMusicSessionType_Parse(
    const ::std::string& name, VkMusicSessionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VkMusicSessionType>(
    VkMusicSessionType_descriptor(), name, value);
}
enum VkMusicEventType {
  SEARCH = 1,
  TRACK_CLICK = 2
};
bool VkMusicEventType_IsValid(int value);
const VkMusicEventType VkMusicEventType_MIN = SEARCH;
const VkMusicEventType VkMusicEventType_MAX = TRACK_CLICK;
const int VkMusicEventType_ARRAYSIZE = VkMusicEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VkMusicEventType_descriptor();
inline const ::std::string& VkMusicEventType_Name(VkMusicEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VkMusicEventType_descriptor(), value);
}
inline bool VkMusicEventType_Parse(
    const ::std::string& name, VkMusicEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VkMusicEventType>(
    VkMusicEventType_descriptor(), name, value);
}
// ===================================================================

class VkMusicTrack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkMusicTrack) */ {
 public:
  VkMusicTrack();
  virtual ~VkMusicTrack();

  VkMusicTrack(const VkMusicTrack& from);

  inline VkMusicTrack& operator=(const VkMusicTrack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkMusicTrack(VkMusicTrack&& from) noexcept
    : VkMusicTrack() {
    *this = ::std::move(from);
  }

  inline VkMusicTrack& operator=(VkMusicTrack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkMusicTrack& default_instance();

  static inline const VkMusicTrack* internal_default_instance() {
    return reinterpret_cast<const VkMusicTrack*>(
               &_VkMusicTrack_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(VkMusicTrack* other);
  friend void swap(VkMusicTrack& a, VkMusicTrack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkMusicTrack* New() const PROTOBUF_FINAL { return New(NULL); }

  VkMusicTrack* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkMusicTrack& from);
  void MergeFrom(const VkMusicTrack& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkMusicTrack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tags = 5;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 5;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // repeated string extra_names = 15;
  int extra_names_size() const;
  void clear_extra_names();
  static const int kExtraNamesFieldNumber = 15;
  const ::std::string& extra_names(int index) const;
  ::std::string* mutable_extra_names(int index);
  void set_extra_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_extra_names(int index, ::std::string&& value);
  #endif
  void set_extra_names(int index, const char* value);
  void set_extra_names(int index, const char* value, size_t size);
  ::std::string* add_extra_names();
  void add_extra_names(const ::std::string& value);
  #if LANG_CXX11
  void add_extra_names(::std::string&& value);
  #endif
  void add_extra_names(const char* value);
  void add_extra_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& extra_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_extra_names();

  // repeated string extra_performer_names = 23;
  int extra_performer_names_size() const;
  void clear_extra_performer_names();
  static const int kExtraPerformerNamesFieldNumber = 23;
  const ::std::string& extra_performer_names(int index) const;
  ::std::string* mutable_extra_performer_names(int index);
  void set_extra_performer_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_extra_performer_names(int index, ::std::string&& value);
  #endif
  void set_extra_performer_names(int index, const char* value);
  void set_extra_performer_names(int index, const char* value, size_t size);
  ::std::string* add_extra_performer_names();
  void add_extra_performer_names(const ::std::string& value);
  #if LANG_CXX11
  void add_extra_performer_names(::std::string&& value);
  #endif
  void add_extra_performer_names(const char* value);
  void add_extra_performer_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& extra_performer_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_extra_performer_names();

  // repeated string extra_title_names = 24;
  int extra_title_names_size() const;
  void clear_extra_title_names();
  static const int kExtraTitleNamesFieldNumber = 24;
  const ::std::string& extra_title_names(int index) const;
  ::std::string* mutable_extra_title_names(int index);
  void set_extra_title_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_extra_title_names(int index, ::std::string&& value);
  #endif
  void set_extra_title_names(int index, const char* value);
  void set_extra_title_names(int index, const char* value, size_t size);
  ::std::string* add_extra_title_names();
  void add_extra_title_names(const ::std::string& value);
  #if LANG_CXX11
  void add_extra_title_names(::std::string&& value);
  #endif
  void add_extra_title_names(const char* value);
  void add_extra_title_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& extra_title_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_extra_title_names();

  // repeated string alternative_track_ids = 30;
  int alternative_track_ids_size() const;
  void clear_alternative_track_ids();
  static const int kAlternativeTrackIdsFieldNumber = 30;
  const ::std::string& alternative_track_ids(int index) const;
  ::std::string* mutable_alternative_track_ids(int index);
  void set_alternative_track_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_alternative_track_ids(int index, ::std::string&& value);
  #endif
  void set_alternative_track_ids(int index, const char* value);
  void set_alternative_track_ids(int index, const char* value, size_t size);
  ::std::string* add_alternative_track_ids();
  void add_alternative_track_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_alternative_track_ids(::std::string&& value);
  #endif
  void add_alternative_track_ids(const char* value);
  void add_alternative_track_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& alternative_track_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_alternative_track_ids();

  // optional string title = 3;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string performer = 4;
  bool has_performer() const;
  void clear_performer();
  static const int kPerformerFieldNumber = 4;
  const ::std::string& performer() const;
  void set_performer(const ::std::string& value);
  #if LANG_CXX11
  void set_performer(::std::string&& value);
  #endif
  void set_performer(const char* value);
  void set_performer(const char* value, size_t size);
  ::std::string* mutable_performer();
  ::std::string* release_performer();
  void set_allocated_performer(::std::string* performer);

  // required string hash = 12;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 12;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // optional string subtitle = 33;
  bool has_subtitle() const;
  void clear_subtitle();
  static const int kSubtitleFieldNumber = 33;
  const ::std::string& subtitle() const;
  void set_subtitle(const ::std::string& value);
  #if LANG_CXX11
  void set_subtitle(::std::string&& value);
  #endif
  void set_subtitle(const char* value);
  void set_subtitle(const char* value, size_t size);
  ::std::string* mutable_subtitle();
  ::std::string* release_subtitle();
  void set_allocated_subtitle(::std::string* subtitle);

  // optional string title_alternatives = 38;
  bool has_title_alternatives() const;
  void clear_title_alternatives();
  static const int kTitleAlternativesFieldNumber = 38;
  const ::std::string& title_alternatives() const;
  void set_title_alternatives(const ::std::string& value);
  #if LANG_CXX11
  void set_title_alternatives(::std::string&& value);
  #endif
  void set_title_alternatives(const char* value);
  void set_title_alternatives(const char* value, size_t size);
  ::std::string* mutable_title_alternatives();
  ::std::string* release_title_alternatives();
  void set_allocated_title_alternatives(::std::string* title_alternatives);

  // optional string performer_alternatives = 39;
  bool has_performer_alternatives() const;
  void clear_performer_alternatives();
  static const int kPerformerAlternativesFieldNumber = 39;
  const ::std::string& performer_alternatives() const;
  void set_performer_alternatives(const ::std::string& value);
  #if LANG_CXX11
  void set_performer_alternatives(::std::string&& value);
  #endif
  void set_performer_alternatives(const char* value);
  void set_performer_alternatives(const char* value, size_t size);
  ::std::string* mutable_performer_alternatives();
  ::std::string* release_performer_alternatives();
  void set_allocated_performer_alternatives(::std::string* performer_alternatives);

  // optional string rightholder_name = 43;
  bool has_rightholder_name() const;
  void clear_rightholder_name();
  static const int kRightholderNameFieldNumber = 43;
  const ::std::string& rightholder_name() const;
  void set_rightholder_name(const ::std::string& value);
  #if LANG_CXX11
  void set_rightholder_name(::std::string&& value);
  #endif
  void set_rightholder_name(const char* value);
  void set_rightholder_name(const char* value, size_t size);
  ::std::string* mutable_rightholder_name();
  ::std::string* release_rightholder_name();
  void set_allocated_rightholder_name(::std::string* rightholder_name);

  // optional .ru.mail.go.webbase.blobs.VkMusicLyrics uma_lyrics = 40;
  bool has_uma_lyrics() const;
  void clear_uma_lyrics();
  static const int kUmaLyricsFieldNumber = 40;
  const ::ru::mail::go::webbase::blobs::VkMusicLyrics& uma_lyrics() const;
  ::ru::mail::go::webbase::blobs::VkMusicLyrics* mutable_uma_lyrics();
  ::ru::mail::go::webbase::blobs::VkMusicLyrics* release_uma_lyrics();
  void set_allocated_uma_lyrics(::ru::mail::go::webbase::blobs::VkMusicLyrics* uma_lyrics);

  // required int64 owner_id = 1;
  bool has_owner_id() const;
  void clear_owner_id();
  static const int kOwnerIdFieldNumber = 1;
  ::google::protobuf::int64 owner_id() const;
  void set_owner_id(::google::protobuf::int64 value);

  // required int64 audio_id = 2;
  bool has_audio_id() const;
  void clear_audio_id();
  static const int kAudioIdFieldNumber = 2;
  ::google::protobuf::int64 audio_id() const;
  void set_audio_id(::google::protobuf::int64 value);

  // optional int32 duration = 6;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 6;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // optional int32 added = 7;
  bool has_added() const;
  void clear_added();
  static const int kAddedFieldNumber = 7;
  ::google::protobuf::int32 added() const;
  void set_added(::google::protobuf::int32 value);

  // optional int32 genre = 8;
  bool has_genre() const;
  void clear_genre();
  static const int kGenreFieldNumber = 8;
  ::google::protobuf::int32 genre() const;
  void set_genre(::google::protobuf::int32 value);

  // optional int32 bitrate = 9;
  bool has_bitrate() const;
  void clear_bitrate();
  static const int kBitrateFieldNumber = 9;
  ::google::protobuf::int32 bitrate() const;
  void set_bitrate(::google::protobuf::int32 value);

  // required int64 timestamp = 13;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 13;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int64 times_listened = 14;
  bool has_times_listened() const;
  void clear_times_listened();
  static const int kTimesListenedFieldNumber = 14;
  ::google::protobuf::int64 times_listened() const;
  void set_times_listened(::google::protobuf::int64 value);

  // optional int64 copy_owner_id = 17;
  bool has_copy_owner_id() const;
  void clear_copy_owner_id();
  static const int kCopyOwnerIdFieldNumber = 17;
  ::google::protobuf::int64 copy_owner_id() const;
  void set_copy_owner_id(::google::protobuf::int64 value);

  // optional int64 copy_audio_id = 18;
  bool has_copy_audio_id() const;
  void clear_copy_audio_id();
  static const int kCopyAudioIdFieldNumber = 18;
  ::google::protobuf::int64 copy_audio_id() const;
  void set_copy_audio_id(::google::protobuf::int64 value);

  // optional int64 hashgroup_size = 19;
  bool has_hashgroup_size() const;
  void clear_hashgroup_size();
  static const int kHashgroupSizeFieldNumber = 19;
  ::google::protobuf::int64 hashgroup_size() const;
  void set_hashgroup_size(::google::protobuf::int64 value);

  // optional int64 crcgroup_size = 20;
  bool has_crcgroup_size() const;
  void clear_crcgroup_size();
  static const int kCrcgroupSizeFieldNumber = 20;
  ::google::protobuf::int64 crcgroup_size() const;
  void set_crcgroup_size(::google::protobuf::int64 value);

  // optional int64 times_listened_last_month = 21;
  bool has_times_listened_last_month() const;
  void clear_times_listened_last_month();
  static const int kTimesListenedLastMonthFieldNumber = 21;
  ::google::protobuf::int64 times_listened_last_month() const;
  void set_times_listened_last_month(::google::protobuf::int64 value);

  // optional int64 times_listened_last_week = 22;
  bool has_times_listened_last_week() const;
  void clear_times_listened_last_week();
  static const int kTimesListenedLastWeekFieldNumber = 22;
  ::google::protobuf::int64 times_listened_last_week() const;
  void set_times_listened_last_week(::google::protobuf::int64 value);

  // optional int64 global_crcgroup_size = 25;
  bool has_global_crcgroup_size() const;
  void clear_global_crcgroup_size();
  static const int kGlobalCrcgroupSizeFieldNumber = 25;
  ::google::protobuf::int64 global_crcgroup_size() const;
  void set_global_crcgroup_size(::google::protobuf::int64 value);

  // optional int64 global_times_listened = 26;
  bool has_global_times_listened() const;
  void clear_global_times_listened();
  static const int kGlobalTimesListenedFieldNumber = 26;
  ::google::protobuf::int64 global_times_listened() const;
  void set_global_times_listened(::google::protobuf::int64 value);

  // optional int64 global_times_listened_last_month = 27;
  bool has_global_times_listened_last_month() const;
  void clear_global_times_listened_last_month();
  static const int kGlobalTimesListenedLastMonthFieldNumber = 27;
  ::google::protobuf::int64 global_times_listened_last_month() const;
  void set_global_times_listened_last_month(::google::protobuf::int64 value);

  // optional int64 global_times_listened_last_week = 28;
  bool has_global_times_listened_last_week() const;
  void clear_global_times_listened_last_week();
  static const int kGlobalTimesListenedLastWeekFieldNumber = 28;
  ::google::protobuf::int64 global_times_listened_last_week() const;
  void set_global_times_listened_last_week(::google::protobuf::int64 value);

  // optional int64 uma_release_id = 29;
  bool has_uma_release_id() const;
  void clear_uma_release_id();
  static const int kUmaReleaseIdFieldNumber = 29;
  ::google::protobuf::int64 uma_release_id() const;
  void set_uma_release_id(::google::protobuf::int64 value);

  // optional bool lyrics = 10;
  bool has_lyrics() const;
  void clear_lyrics();
  static const int kLyricsFieldNumber = 10;
  bool lyrics() const;
  void set_lyrics(bool value);

  // optional bool official = 11;
  bool has_official() const;
  void clear_official();
  static const int kOfficialFieldNumber = 11;
  bool official() const;
  void set_official(bool value);

  // optional bool deleted = 16;
  bool has_deleted() const;
  void clear_deleted();
  static const int kDeletedFieldNumber = 16;
  bool deleted() const;
  void set_deleted(bool value);

  // optional bool from_offline_index = 37;
  bool has_from_offline_index() const;
  void clear_from_offline_index();
  static const int kFromOfflineIndexFieldNumber = 37;
  bool from_offline_index() const;
  void set_from_offline_index(bool value);

  // optional bool is_copy_of_mastercopy = 44;
  bool has_is_copy_of_mastercopy() const;
  void clear_is_copy_of_mastercopy();
  static const int kIsCopyOfMastercopyFieldNumber = 44;
  bool is_copy_of_mastercopy() const;
  void set_is_copy_of_mastercopy(bool value);

  // optional bool is_boostable_rightholder = 45;
  bool has_is_boostable_rightholder() const;
  void clear_is_boostable_rightholder();
  static const int kIsBoostableRightholderFieldNumber = 45;
  bool is_boostable_rightholder() const;
  void set_is_boostable_rightholder(bool value);

  // optional bool is_new_boostable_release = 46;
  bool has_is_new_boostable_release() const;
  void clear_is_new_boostable_release();
  static const int kIsNewBoostableReleaseFieldNumber = 46;
  bool is_new_boostable_release() const;
  void set_is_new_boostable_release(bool value);

  // optional int64 track_id = 31;
  bool has_track_id() const;
  void clear_track_id();
  static const int kTrackIdFieldNumber = 31;
  ::google::protobuf::int64 track_id() const;
  void set_track_id(::google::protobuf::int64 value);

  // optional int64 cluster_id = 32;
  bool has_cluster_id() const;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 32;
  ::google::protobuf::int64 cluster_id() const;
  void set_cluster_id(::google::protobuf::int64 value);

  // optional int64 source_owner_id = 34;
  bool has_source_owner_id() const;
  void clear_source_owner_id();
  static const int kSourceOwnerIdFieldNumber = 34;
  ::google::protobuf::int64 source_owner_id() const;
  void set_source_owner_id(::google::protobuf::int64 value);

  // optional int64 source_audio_id = 35;
  bool has_source_audio_id() const;
  void clear_source_audio_id();
  static const int kSourceAudioIdFieldNumber = 35;
  ::google::protobuf::int64 source_audio_id() const;
  void set_source_audio_id(::google::protobuf::int64 value);

  // optional int64 timestamp_ms = 36;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 36;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // optional int64 album_release_ts = 41;
  bool has_album_release_ts() const;
  void clear_album_release_ts();
  static const int kAlbumReleaseTsFieldNumber = 41;
  ::google::protobuf::int64 album_release_ts() const;
  void set_album_release_ts(::google::protobuf::int64 value);

  // optional int64 rightholder_id = 42;
  bool has_rightholder_id() const;
  void clear_rightholder_id();
  static const int kRightholderIdFieldNumber = 42;
  ::google::protobuf::int64 rightholder_id() const;
  void set_rightholder_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkMusicTrack)
 private:
  void set_has_owner_id();
  void clear_has_owner_id();
  void set_has_audio_id();
  void clear_has_audio_id();
  void set_has_title();
  void clear_has_title();
  void set_has_performer();
  void clear_has_performer();
  void set_has_duration();
  void clear_has_duration();
  void set_has_added();
  void clear_has_added();
  void set_has_genre();
  void clear_has_genre();
  void set_has_bitrate();
  void clear_has_bitrate();
  void set_has_lyrics();
  void clear_has_lyrics();
  void set_has_official();
  void clear_has_official();
  void set_has_hash();
  void clear_has_hash();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_times_listened();
  void clear_has_times_listened();
  void set_has_deleted();
  void clear_has_deleted();
  void set_has_copy_owner_id();
  void clear_has_copy_owner_id();
  void set_has_copy_audio_id();
  void clear_has_copy_audio_id();
  void set_has_hashgroup_size();
  void clear_has_hashgroup_size();
  void set_has_crcgroup_size();
  void clear_has_crcgroup_size();
  void set_has_times_listened_last_month();
  void clear_has_times_listened_last_month();
  void set_has_times_listened_last_week();
  void clear_has_times_listened_last_week();
  void set_has_global_crcgroup_size();
  void clear_has_global_crcgroup_size();
  void set_has_global_times_listened();
  void clear_has_global_times_listened();
  void set_has_global_times_listened_last_month();
  void clear_has_global_times_listened_last_month();
  void set_has_global_times_listened_last_week();
  void clear_has_global_times_listened_last_week();
  void set_has_uma_release_id();
  void clear_has_uma_release_id();
  void set_has_track_id();
  void clear_has_track_id();
  void set_has_cluster_id();
  void clear_has_cluster_id();
  void set_has_subtitle();
  void clear_has_subtitle();
  void set_has_source_owner_id();
  void clear_has_source_owner_id();
  void set_has_source_audio_id();
  void clear_has_source_audio_id();
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_from_offline_index();
  void clear_has_from_offline_index();
  void set_has_title_alternatives();
  void clear_has_title_alternatives();
  void set_has_performer_alternatives();
  void clear_has_performer_alternatives();
  void set_has_uma_lyrics();
  void clear_has_uma_lyrics();
  void set_has_album_release_ts();
  void clear_has_album_release_ts();
  void set_has_rightholder_id();
  void clear_has_rightholder_id();
  void set_has_rightholder_name();
  void clear_has_rightholder_name();
  void set_has_is_copy_of_mastercopy();
  void clear_has_is_copy_of_mastercopy();
  void set_has_is_boostable_rightholder();
  void clear_has_is_boostable_rightholder();
  void set_has_is_new_boostable_release();
  void clear_has_is_new_boostable_release();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::RepeatedPtrField< ::std::string> extra_names_;
  ::google::protobuf::RepeatedPtrField< ::std::string> extra_performer_names_;
  ::google::protobuf::RepeatedPtrField< ::std::string> extra_title_names_;
  ::google::protobuf::RepeatedPtrField< ::std::string> alternative_track_ids_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr performer_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::internal::ArenaStringPtr subtitle_;
  ::google::protobuf::internal::ArenaStringPtr title_alternatives_;
  ::google::protobuf::internal::ArenaStringPtr performer_alternatives_;
  ::google::protobuf::internal::ArenaStringPtr rightholder_name_;
  ::ru::mail::go::webbase::blobs::VkMusicLyrics* uma_lyrics_;
  ::google::protobuf::int64 owner_id_;
  ::google::protobuf::int64 audio_id_;
  ::google::protobuf::int32 duration_;
  ::google::protobuf::int32 added_;
  ::google::protobuf::int32 genre_;
  ::google::protobuf::int32 bitrate_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 times_listened_;
  ::google::protobuf::int64 copy_owner_id_;
  ::google::protobuf::int64 copy_audio_id_;
  ::google::protobuf::int64 hashgroup_size_;
  ::google::protobuf::int64 crcgroup_size_;
  ::google::protobuf::int64 times_listened_last_month_;
  ::google::protobuf::int64 times_listened_last_week_;
  ::google::protobuf::int64 global_crcgroup_size_;
  ::google::protobuf::int64 global_times_listened_;
  ::google::protobuf::int64 global_times_listened_last_month_;
  ::google::protobuf::int64 global_times_listened_last_week_;
  ::google::protobuf::int64 uma_release_id_;
  bool lyrics_;
  bool official_;
  bool deleted_;
  bool from_offline_index_;
  bool is_copy_of_mastercopy_;
  bool is_boostable_rightholder_;
  bool is_new_boostable_release_;
  ::google::protobuf::int64 track_id_;
  ::google::protobuf::int64 cluster_id_;
  ::google::protobuf::int64 source_owner_id_;
  ::google::protobuf::int64 source_audio_id_;
  ::google::protobuf::int64 timestamp_ms_;
  ::google::protobuf::int64 album_release_ts_;
  ::google::protobuf::int64 rightholder_id_;
  mutable int _cached_size_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkMusicLyrics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkMusicLyrics) */ {
 public:
  VkMusicLyrics();
  virtual ~VkMusicLyrics();

  VkMusicLyrics(const VkMusicLyrics& from);

  inline VkMusicLyrics& operator=(const VkMusicLyrics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkMusicLyrics(VkMusicLyrics&& from) noexcept
    : VkMusicLyrics() {
    *this = ::std::move(from);
  }

  inline VkMusicLyrics& operator=(VkMusicLyrics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkMusicLyrics& default_instance();

  static inline const VkMusicLyrics* internal_default_instance() {
    return reinterpret_cast<const VkMusicLyrics*>(
               &_VkMusicLyrics_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(VkMusicLyrics* other);
  friend void swap(VkMusicLyrics& a, VkMusicLyrics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkMusicLyrics* New() const PROTOBUF_FINAL { return New(NULL); }

  VkMusicLyrics* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkMusicLyrics& from);
  void MergeFrom(const VkMusicLyrics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkMusicLyrics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional int64 release_id = 2;
  bool has_release_id() const;
  void clear_release_id();
  static const int kReleaseIdFieldNumber = 2;
  ::google::protobuf::int64 release_id() const;
  void set_release_id(::google::protobuf::int64 value);

  // optional int64 track_id = 3;
  bool has_track_id() const;
  void clear_track_id();
  static const int kTrackIdFieldNumber = 3;
  ::google::protobuf::int64 track_id() const;
  void set_track_id(::google::protobuf::int64 value);

  // optional int64 timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional bool timecodes = 4;
  bool has_timecodes() const;
  void clear_timecodes();
  static const int kTimecodesFieldNumber = 4;
  bool timecodes() const;
  void set_timecodes(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkMusicLyrics)
 private:
  void set_has_text();
  void clear_has_text();
  void set_has_release_id();
  void clear_has_release_id();
  void set_has_track_id();
  void clear_has_track_id();
  void set_has_timecodes();
  void clear_has_timecodes();
  void set_has_timestamp();
  void clear_has_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::int64 release_id_;
  ::google::protobuf::int64 track_id_;
  ::google::protobuf::int64 timestamp_;
  bool timecodes_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkMusicTrackOrLyrics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics) */ {
 public:
  VkMusicTrackOrLyrics();
  virtual ~VkMusicTrackOrLyrics();

  VkMusicTrackOrLyrics(const VkMusicTrackOrLyrics& from);

  inline VkMusicTrackOrLyrics& operator=(const VkMusicTrackOrLyrics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkMusicTrackOrLyrics(VkMusicTrackOrLyrics&& from) noexcept
    : VkMusicTrackOrLyrics() {
    *this = ::std::move(from);
  }

  inline VkMusicTrackOrLyrics& operator=(VkMusicTrackOrLyrics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkMusicTrackOrLyrics& default_instance();

  static inline const VkMusicTrackOrLyrics* internal_default_instance() {
    return reinterpret_cast<const VkMusicTrackOrLyrics*>(
               &_VkMusicTrackOrLyrics_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(VkMusicTrackOrLyrics* other);
  friend void swap(VkMusicTrackOrLyrics& a, VkMusicTrackOrLyrics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkMusicTrackOrLyrics* New() const PROTOBUF_FINAL { return New(NULL); }

  VkMusicTrackOrLyrics* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkMusicTrackOrLyrics& from);
  void MergeFrom(const VkMusicTrackOrLyrics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkMusicTrackOrLyrics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 1;
  bool has_track() const;
  void clear_track();
  static const int kTrackFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::VkMusicTrack& track() const;
  ::ru::mail::go::webbase::blobs::VkMusicTrack* mutable_track();
  ::ru::mail::go::webbase::blobs::VkMusicTrack* release_track();
  void set_allocated_track(::ru::mail::go::webbase::blobs::VkMusicTrack* track);

  // optional .ru.mail.go.webbase.blobs.VkMusicLyrics lyrics = 2;
  bool has_lyrics() const;
  void clear_lyrics();
  static const int kLyricsFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::VkMusicLyrics& lyrics() const;
  ::ru::mail::go::webbase::blobs::VkMusicLyrics* mutable_lyrics();
  ::ru::mail::go::webbase::blobs::VkMusicLyrics* release_lyrics();
  void set_allocated_lyrics(::ru::mail::go::webbase::blobs::VkMusicLyrics* lyrics);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics)
 private:
  void set_has_track();
  void clear_has_track();
  void set_has_lyrics();
  void clear_has_lyrics();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::ru::mail::go::webbase::blobs::VkMusicTrack* track_;
  ::ru::mail::go::webbase::blobs::VkMusicLyrics* lyrics_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkMusicUserEventListen : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkMusicUserEventListen) */ {
 public:
  VkMusicUserEventListen();
  virtual ~VkMusicUserEventListen();

  VkMusicUserEventListen(const VkMusicUserEventListen& from);

  inline VkMusicUserEventListen& operator=(const VkMusicUserEventListen& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkMusicUserEventListen(VkMusicUserEventListen&& from) noexcept
    : VkMusicUserEventListen() {
    *this = ::std::move(from);
  }

  inline VkMusicUserEventListen& operator=(VkMusicUserEventListen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkMusicUserEventListen& default_instance();

  static inline const VkMusicUserEventListen* internal_default_instance() {
    return reinterpret_cast<const VkMusicUserEventListen*>(
               &_VkMusicUserEventListen_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(VkMusicUserEventListen* other);
  friend void swap(VkMusicUserEventListen& a, VkMusicUserEventListen& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkMusicUserEventListen* New() const PROTOBUF_FINAL { return New(NULL); }

  VkMusicUserEventListen* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkMusicUserEventListen& from);
  void MergeFrom(const VkMusicUserEventListen& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkMusicUserEventListen* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string audio_id = 4;
  bool has_audio_id() const;
  void clear_audio_id();
  static const int kAudioIdFieldNumber = 4;
  const ::std::string& audio_id() const;
  void set_audio_id(const ::std::string& value);
  #if LANG_CXX11
  void set_audio_id(::std::string&& value);
  #endif
  void set_audio_id(const char* value);
  void set_audio_id(const char* value, size_t size);
  ::std::string* mutable_audio_id();
  ::std::string* release_audio_id();
  void set_allocated_audio_id(::std::string* audio_id);

  // optional string title = 5;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 5;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string performer = 6;
  bool has_performer() const;
  void clear_performer();
  static const int kPerformerFieldNumber = 6;
  const ::std::string& performer() const;
  void set_performer(const ::std::string& value);
  #if LANG_CXX11
  void set_performer(::std::string&& value);
  #endif
  void set_performer(const char* value);
  void set_performer(const char* value, size_t size);
  ::std::string* mutable_performer();
  ::std::string* release_performer();
  void set_allocated_performer(::std::string* performer);

  // optional string audio_section = 8;
  bool has_audio_section() const;
  void clear_audio_section();
  static const int kAudioSectionFieldNumber = 8;
  const ::std::string& audio_section() const;
  void set_audio_section(const ::std::string& value);
  #if LANG_CXX11
  void set_audio_section(::std::string&& value);
  #endif
  void set_audio_section(const char* value);
  void set_audio_section(const char* value, size_t size);
  ::std::string* mutable_audio_section();
  ::std::string* release_audio_section();
  void set_allocated_audio_section(::std::string* audio_section);

  // optional string playlist_id = 10;
  bool has_playlist_id() const;
  void clear_playlist_id();
  static const int kPlaylistIdFieldNumber = 10;
  const ::std::string& playlist_id() const;
  void set_playlist_id(const ::std::string& value);
  #if LANG_CXX11
  void set_playlist_id(::std::string&& value);
  #endif
  void set_playlist_id(const char* value);
  void set_playlist_id(const char* value, size_t size);
  ::std::string* mutable_playlist_id();
  ::std::string* release_playlist_id();
  void set_allocated_playlist_id(::std::string* playlist_id);

  // optional string device_type = 12;
  bool has_device_type() const;
  void clear_device_type();
  static const int kDeviceTypeFieldNumber = 12;
  const ::std::string& device_type() const;
  void set_device_type(const ::std::string& value);
  #if LANG_CXX11
  void set_device_type(::std::string&& value);
  #endif
  void set_device_type(const char* value);
  void set_device_type(const char* value, size_t size);
  ::std::string* mutable_device_type();
  ::std::string* release_device_type();
  void set_allocated_device_type(::std::string* device_type);

  // optional string os_type = 13;
  bool has_os_type() const;
  void clear_os_type();
  static const int kOsTypeFieldNumber = 13;
  const ::std::string& os_type() const;
  void set_os_type(const ::std::string& value);
  #if LANG_CXX11
  void set_os_type(::std::string&& value);
  #endif
  void set_os_type(const char* value);
  void set_os_type(const char* value, size_t size);
  ::std::string* mutable_os_type();
  ::std::string* release_os_type();
  void set_allocated_os_type(::std::string* os_type);

  // optional string source = 14;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 14;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional string prev_audio_id = 15;
  bool has_prev_audio_id() const;
  void clear_prev_audio_id();
  static const int kPrevAudioIdFieldNumber = 15;
  const ::std::string& prev_audio_id() const;
  void set_prev_audio_id(const ::std::string& value);
  #if LANG_CXX11
  void set_prev_audio_id(::std::string&& value);
  #endif
  void set_prev_audio_id(const char* value);
  void set_prev_audio_id(const char* value, size_t size);
  ::std::string* mutable_prev_audio_id();
  ::std::string* release_prev_audio_id();
  void set_allocated_prev_audio_id(::std::string* prev_audio_id);

  // optional string prev_playlist_id = 16;
  bool has_prev_playlist_id() const;
  void clear_prev_playlist_id();
  static const int kPrevPlaylistIdFieldNumber = 16;
  const ::std::string& prev_playlist_id() const;
  void set_prev_playlist_id(const ::std::string& value);
  #if LANG_CXX11
  void set_prev_playlist_id(::std::string&& value);
  #endif
  void set_prev_playlist_id(const char* value);
  void set_prev_playlist_id(const char* value, size_t size);
  ::std::string* mutable_prev_playlist_id();
  ::std::string* release_prev_playlist_id();
  void set_allocated_prev_playlist_id(::std::string* prev_playlist_id);

  // optional string block_name = 18;
  bool has_block_name() const;
  void clear_block_name();
  static const int kBlockNameFieldNumber = 18;
  const ::std::string& block_name() const;
  void set_block_name(const ::std::string& value);
  #if LANG_CXX11
  void set_block_name(::std::string&& value);
  #endif
  void set_block_name(const char* value);
  void set_block_name(const char* value, size_t size);
  ::std::string* mutable_block_name();
  ::std::string* release_block_name();
  void set_allocated_block_name(::std::string* block_name);

  // optional int64 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // optional int64 start_ts = 2;
  bool has_start_ts() const;
  void clear_start_ts();
  static const int kStartTsFieldNumber = 2;
  ::google::protobuf::int64 start_ts() const;
  void set_start_ts(::google::protobuf::int64 value);

  // optional int32 duration = 3;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // optional bool master_track = 7;
  bool has_master_track() const;
  void clear_master_track();
  static const int kMasterTrackFieldNumber = 7;
  bool master_track() const;
  void set_master_track(bool value);

  // optional bool is_mail_search = 9;
  bool has_is_mail_search() const;
  void clear_is_mail_search();
  static const int kIsMailSearchFieldNumber = 9;
  bool is_mail_search() const;
  void set_is_mail_search(bool value);

  // optional int64 uma_release_id = 11;
  bool has_uma_release_id() const;
  void clear_uma_release_id();
  static const int kUmaReleaseIdFieldNumber = 11;
  ::google::protobuf::int64 uma_release_id() const;
  void set_uma_release_id(::google::protobuf::int64 value);

  // optional int64 vk_qid = 17;
  bool has_vk_qid() const;
  void clear_vk_qid();
  static const int kVkQidFieldNumber = 17;
  ::google::protobuf::int64 vk_qid() const;
  void set_vk_qid(::google::protobuf::int64 value);

  // optional int64 app_id = 19;
  bool has_app_id() const;
  void clear_app_id();
  static const int kAppIdFieldNumber = 19;
  ::google::protobuf::int64 app_id() const;
  void set_app_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkMusicUserEventListen)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_start_ts();
  void clear_has_start_ts();
  void set_has_duration();
  void clear_has_duration();
  void set_has_audio_id();
  void clear_has_audio_id();
  void set_has_title();
  void clear_has_title();
  void set_has_performer();
  void clear_has_performer();
  void set_has_master_track();
  void clear_has_master_track();
  void set_has_audio_section();
  void clear_has_audio_section();
  void set_has_is_mail_search();
  void clear_has_is_mail_search();
  void set_has_playlist_id();
  void clear_has_playlist_id();
  void set_has_uma_release_id();
  void clear_has_uma_release_id();
  void set_has_device_type();
  void clear_has_device_type();
  void set_has_os_type();
  void clear_has_os_type();
  void set_has_source();
  void clear_has_source();
  void set_has_prev_audio_id();
  void clear_has_prev_audio_id();
  void set_has_prev_playlist_id();
  void clear_has_prev_playlist_id();
  void set_has_vk_qid();
  void clear_has_vk_qid();
  void set_has_block_name();
  void clear_has_block_name();
  void set_has_app_id();
  void clear_has_app_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr audio_id_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr performer_;
  ::google::protobuf::internal::ArenaStringPtr audio_section_;
  ::google::protobuf::internal::ArenaStringPtr playlist_id_;
  ::google::protobuf::internal::ArenaStringPtr device_type_;
  ::google::protobuf::internal::ArenaStringPtr os_type_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr prev_audio_id_;
  ::google::protobuf::internal::ArenaStringPtr prev_playlist_id_;
  ::google::protobuf::internal::ArenaStringPtr block_name_;
  ::google::protobuf::int64 user_id_;
  ::google::protobuf::int64 start_ts_;
  ::google::protobuf::int32 duration_;
  bool master_track_;
  bool is_mail_search_;
  ::google::protobuf::int64 uma_release_id_;
  ::google::protobuf::int64 vk_qid_;
  ::google::protobuf::int64 app_id_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkTrackList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkTrackList) */ {
 public:
  VkTrackList();
  virtual ~VkTrackList();

  VkTrackList(const VkTrackList& from);

  inline VkTrackList& operator=(const VkTrackList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkTrackList(VkTrackList&& from) noexcept
    : VkTrackList() {
    *this = ::std::move(from);
  }

  inline VkTrackList& operator=(VkTrackList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkTrackList& default_instance();

  static inline const VkTrackList* internal_default_instance() {
    return reinterpret_cast<const VkTrackList*>(
               &_VkTrackList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(VkTrackList* other);
  friend void swap(VkTrackList& a, VkTrackList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkTrackList* New() const PROTOBUF_FINAL { return New(NULL); }

  VkTrackList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkTrackList& from);
  void MergeFrom(const VkTrackList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkTrackList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string track_ids = 1;
  int track_ids_size() const;
  void clear_track_ids();
  static const int kTrackIdsFieldNumber = 1;
  const ::std::string& track_ids(int index) const;
  ::std::string* mutable_track_ids(int index);
  void set_track_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_track_ids(int index, ::std::string&& value);
  #endif
  void set_track_ids(int index, const char* value);
  void set_track_ids(int index, const char* value, size_t size);
  ::std::string* add_track_ids();
  void add_track_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_track_ids(::std::string&& value);
  #endif
  void add_track_ids(const char* value);
  void add_track_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& track_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_track_ids();

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkTrackList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> track_ids_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkMusicPlaylist : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkMusicPlaylist) */ {
 public:
  VkMusicPlaylist();
  virtual ~VkMusicPlaylist();

  VkMusicPlaylist(const VkMusicPlaylist& from);

  inline VkMusicPlaylist& operator=(const VkMusicPlaylist& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkMusicPlaylist(VkMusicPlaylist&& from) noexcept
    : VkMusicPlaylist() {
    *this = ::std::move(from);
  }

  inline VkMusicPlaylist& operator=(VkMusicPlaylist&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkMusicPlaylist& default_instance();

  static inline const VkMusicPlaylist* internal_default_instance() {
    return reinterpret_cast<const VkMusicPlaylist*>(
               &_VkMusicPlaylist_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(VkMusicPlaylist* other);
  friend void swap(VkMusicPlaylist& a, VkMusicPlaylist& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkMusicPlaylist* New() const PROTOBUF_FINAL { return New(NULL); }

  VkMusicPlaylist* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkMusicPlaylist& from);
  void MergeFrom(const VkMusicPlaylist& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkMusicPlaylist* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string track_names = 13;
  int track_names_size() const;
  void clear_track_names();
  static const int kTrackNamesFieldNumber = 13;
  const ::std::string& track_names(int index) const;
  ::std::string* mutable_track_names(int index);
  void set_track_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_track_names(int index, ::std::string&& value);
  #endif
  void set_track_names(int index, const char* value);
  void set_track_names(int index, const char* value, size_t size);
  ::std::string* add_track_names();
  void add_track_names(const ::std::string& value);
  #if LANG_CXX11
  void add_track_names(::std::string&& value);
  #endif
  void add_track_names(const char* value);
  void add_track_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& track_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_track_names();

  // repeated string tags = 19;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 19;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // repeated string uma_tags = 21;
  int uma_tags_size() const;
  void clear_uma_tags();
  static const int kUmaTagsFieldNumber = 21;
  const ::std::string& uma_tags(int index) const;
  ::std::string* mutable_uma_tags(int index);
  void set_uma_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_uma_tags(int index, ::std::string&& value);
  #endif
  void set_uma_tags(int index, const char* value);
  void set_uma_tags(int index, const char* value, size_t size);
  ::std::string* add_uma_tags();
  void add_uma_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_uma_tags(::std::string&& value);
  #endif
  void add_uma_tags(const char* value);
  void add_uma_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& uma_tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_uma_tags();

  // optional string title = 3;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string performer = 4;
  bool has_performer() const;
  void clear_performer();
  static const int kPerformerFieldNumber = 4;
  const ::std::string& performer() const;
  void set_performer(const ::std::string& value);
  #if LANG_CXX11
  void set_performer(::std::string&& value);
  #endif
  void set_performer(const char* value);
  void set_performer(const char* value, size_t size);
  ::std::string* mutable_performer();
  ::std::string* release_performer();
  void set_allocated_performer(::std::string* performer);

  // optional string subtitle = 17;
  bool has_subtitle() const;
  void clear_subtitle();
  static const int kSubtitleFieldNumber = 17;
  const ::std::string& subtitle() const;
  void set_subtitle(const ::std::string& value);
  #if LANG_CXX11
  void set_subtitle(::std::string&& value);
  #endif
  void set_subtitle(const char* value);
  void set_subtitle(const char* value, size_t size);
  ::std::string* mutable_subtitle();
  ::std::string* release_subtitle();
  void set_allocated_subtitle(::std::string* subtitle);

  // optional string title_alternatives = 22;
  bool has_title_alternatives() const;
  void clear_title_alternatives();
  static const int kTitleAlternativesFieldNumber = 22;
  const ::std::string& title_alternatives() const;
  void set_title_alternatives(const ::std::string& value);
  #if LANG_CXX11
  void set_title_alternatives(::std::string&& value);
  #endif
  void set_title_alternatives(const char* value);
  void set_title_alternatives(const char* value, size_t size);
  ::std::string* mutable_title_alternatives();
  ::std::string* release_title_alternatives();
  void set_allocated_title_alternatives(::std::string* title_alternatives);

  // optional string performer_alternatives = 23;
  bool has_performer_alternatives() const;
  void clear_performer_alternatives();
  static const int kPerformerAlternativesFieldNumber = 23;
  const ::std::string& performer_alternatives() const;
  void set_performer_alternatives(const ::std::string& value);
  #if LANG_CXX11
  void set_performer_alternatives(::std::string&& value);
  #endif
  void set_performer_alternatives(const char* value);
  void set_performer_alternatives(const char* value, size_t size);
  ::std::string* mutable_performer_alternatives();
  ::std::string* release_performer_alternatives();
  void set_allocated_performer_alternatives(::std::string* performer_alternatives);

  // optional .ru.mail.go.webbase.blobs.VkTrackList tracks = 12;
  bool has_tracks() const;
  void clear_tracks();
  static const int kTracksFieldNumber = 12;
  const ::ru::mail::go::webbase::blobs::VkTrackList& tracks() const;
  ::ru::mail::go::webbase::blobs::VkTrackList* mutable_tracks();
  ::ru::mail::go::webbase::blobs::VkTrackList* release_tracks();
  void set_allocated_tracks(::ru::mail::go::webbase::blobs::VkTrackList* tracks);

  // optional int64 owner_id = 1;
  bool has_owner_id() const;
  void clear_owner_id();
  static const int kOwnerIdFieldNumber = 1;
  ::google::protobuf::int64 owner_id() const;
  void set_owner_id(::google::protobuf::int64 value);

  // optional int64 playlist_id = 2;
  bool has_playlist_id() const;
  void clear_playlist_id();
  static const int kPlaylistIdFieldNumber = 2;
  ::google::protobuf::int64 playlist_id() const;
  void set_playlist_id(::google::protobuf::int64 value);

  // optional int32 number_of_tracks = 5;
  bool has_number_of_tracks() const;
  void clear_number_of_tracks();
  static const int kNumberOfTracksFieldNumber = 5;
  ::google::protobuf::int32 number_of_tracks() const;
  void set_number_of_tracks(::google::protobuf::int32 value);

  // optional bool is_official = 6;
  bool has_is_official() const;
  void clear_is_official();
  static const int kIsOfficialFieldNumber = 6;
  bool is_official() const;
  void set_is_official(bool value);

  // optional int64 times_listened = 7;
  bool has_times_listened() const;
  void clear_times_listened();
  static const int kTimesListenedFieldNumber = 7;
  ::google::protobuf::int64 times_listened() const;
  void set_times_listened(::google::protobuf::int64 value);

  // optional int64 timestamp = 8;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 8;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int64 followers = 9;
  bool has_followers() const;
  void clear_followers();
  static const int kFollowersFieldNumber = 9;
  ::google::protobuf::int64 followers() const;
  void set_followers(::google::protobuf::int64 value);

  // optional int64 times_listened_last_month = 10;
  bool has_times_listened_last_month() const;
  void clear_times_listened_last_month();
  static const int kTimesListenedLastMonthFieldNumber = 10;
  ::google::protobuf::int64 times_listened_last_month() const;
  void set_times_listened_last_month(::google::protobuf::int64 value);

  // optional int64 times_listened_last_week = 11;
  bool has_times_listened_last_week() const;
  void clear_times_listened_last_week();
  static const int kTimesListenedLastWeekFieldNumber = 11;
  ::google::protobuf::int64 times_listened_last_week() const;
  void set_times_listened_last_week(::google::protobuf::int64 value);

  // optional int64 tracks_times_listened = 14;
  bool has_tracks_times_listened() const;
  void clear_tracks_times_listened();
  static const int kTracksTimesListenedFieldNumber = 14;
  ::google::protobuf::int64 tracks_times_listened() const;
  void set_tracks_times_listened(::google::protobuf::int64 value);

  // optional int64 tracks_times_listened_last_month = 15;
  bool has_tracks_times_listened_last_month() const;
  void clear_tracks_times_listened_last_month();
  static const int kTracksTimesListenedLastMonthFieldNumber = 15;
  ::google::protobuf::int64 tracks_times_listened_last_month() const;
  void set_tracks_times_listened_last_month(::google::protobuf::int64 value);

  // optional int64 tracks_times_listened_last_week = 16;
  bool has_tracks_times_listened_last_week() const;
  void clear_tracks_times_listened_last_week();
  static const int kTracksTimesListenedLastWeekFieldNumber = 16;
  ::google::protobuf::int64 tracks_times_listened_last_week() const;
  void set_tracks_times_listened_last_week(::google::protobuf::int64 value);

  // optional int64 timestamp_ms = 20;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 20;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // optional uint32 year = 18;
  bool has_year() const;
  void clear_year();
  static const int kYearFieldNumber = 18;
  ::google::protobuf::uint32 year() const;
  void set_year(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkMusicPlaylist)
 private:
  void set_has_owner_id();
  void clear_has_owner_id();
  void set_has_playlist_id();
  void clear_has_playlist_id();
  void set_has_title();
  void clear_has_title();
  void set_has_performer();
  void clear_has_performer();
  void set_has_number_of_tracks();
  void clear_has_number_of_tracks();
  void set_has_is_official();
  void clear_has_is_official();
  void set_has_times_listened();
  void clear_has_times_listened();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_followers();
  void clear_has_followers();
  void set_has_times_listened_last_month();
  void clear_has_times_listened_last_month();
  void set_has_times_listened_last_week();
  void clear_has_times_listened_last_week();
  void set_has_tracks();
  void clear_has_tracks();
  void set_has_tracks_times_listened();
  void clear_has_tracks_times_listened();
  void set_has_tracks_times_listened_last_month();
  void clear_has_tracks_times_listened_last_month();
  void set_has_tracks_times_listened_last_week();
  void clear_has_tracks_times_listened_last_week();
  void set_has_subtitle();
  void clear_has_subtitle();
  void set_has_year();
  void clear_has_year();
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_title_alternatives();
  void clear_has_title_alternatives();
  void set_has_performer_alternatives();
  void clear_has_performer_alternatives();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> track_names_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::RepeatedPtrField< ::std::string> uma_tags_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr performer_;
  ::google::protobuf::internal::ArenaStringPtr subtitle_;
  ::google::protobuf::internal::ArenaStringPtr title_alternatives_;
  ::google::protobuf::internal::ArenaStringPtr performer_alternatives_;
  ::ru::mail::go::webbase::blobs::VkTrackList* tracks_;
  ::google::protobuf::int64 owner_id_;
  ::google::protobuf::int64 playlist_id_;
  ::google::protobuf::int32 number_of_tracks_;
  bool is_official_;
  ::google::protobuf::int64 times_listened_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 followers_;
  ::google::protobuf::int64 times_listened_last_month_;
  ::google::protobuf::int64 times_listened_last_week_;
  ::google::protobuf::int64 tracks_times_listened_;
  ::google::protobuf::int64 tracks_times_listened_last_month_;
  ::google::protobuf::int64 tracks_times_listened_last_week_;
  ::google::protobuf::int64 timestamp_ms_;
  ::google::protobuf::uint32 year_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkMusicUMAAlbumMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta) */ {
 public:
  VkMusicUMAAlbumMeta();
  virtual ~VkMusicUMAAlbumMeta();

  VkMusicUMAAlbumMeta(const VkMusicUMAAlbumMeta& from);

  inline VkMusicUMAAlbumMeta& operator=(const VkMusicUMAAlbumMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkMusicUMAAlbumMeta(VkMusicUMAAlbumMeta&& from) noexcept
    : VkMusicUMAAlbumMeta() {
    *this = ::std::move(from);
  }

  inline VkMusicUMAAlbumMeta& operator=(VkMusicUMAAlbumMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkMusicUMAAlbumMeta& default_instance();

  static inline const VkMusicUMAAlbumMeta* internal_default_instance() {
    return reinterpret_cast<const VkMusicUMAAlbumMeta*>(
               &_VkMusicUMAAlbumMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(VkMusicUMAAlbumMeta* other);
  friend void swap(VkMusicUMAAlbumMeta& a, VkMusicUMAAlbumMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkMusicUMAAlbumMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  VkMusicUMAAlbumMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkMusicUMAAlbumMeta& from);
  void MergeFrom(const VkMusicUMAAlbumMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkMusicUMAAlbumMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string json_str = 4;
  bool has_json_str() const;
  void clear_json_str();
  static const int kJsonStrFieldNumber = 4;
  const ::std::string& json_str() const;
  void set_json_str(const ::std::string& value);
  #if LANG_CXX11
  void set_json_str(::std::string&& value);
  #endif
  void set_json_str(const char* value);
  void set_json_str(const char* value, size_t size);
  ::std::string* mutable_json_str();
  ::std::string* release_json_str();
  void set_allocated_json_str(::std::string* json_str);

  // optional int64 owner_id = 1;
  bool has_owner_id() const;
  void clear_owner_id();
  static const int kOwnerIdFieldNumber = 1;
  ::google::protobuf::int64 owner_id() const;
  void set_owner_id(::google::protobuf::int64 value);

  // optional int64 playlist_id = 2;
  bool has_playlist_id() const;
  void clear_playlist_id();
  static const int kPlaylistIdFieldNumber = 2;
  ::google::protobuf::int64 playlist_id() const;
  void set_playlist_id(::google::protobuf::int64 value);

  // optional int64 timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta)
 private:
  void set_has_owner_id();
  void clear_has_owner_id();
  void set_has_playlist_id();
  void clear_has_playlist_id();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_json_str();
  void clear_has_json_str();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr json_str_;
  ::google::protobuf::int64 owner_id_;
  ::google::protobuf::int64 playlist_id_;
  ::google::protobuf::int64 timestamp_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkMusicUserPrivacy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkMusicUserPrivacy) */ {
 public:
  VkMusicUserPrivacy();
  virtual ~VkMusicUserPrivacy();

  VkMusicUserPrivacy(const VkMusicUserPrivacy& from);

  inline VkMusicUserPrivacy& operator=(const VkMusicUserPrivacy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkMusicUserPrivacy(VkMusicUserPrivacy&& from) noexcept
    : VkMusicUserPrivacy() {
    *this = ::std::move(from);
  }

  inline VkMusicUserPrivacy& operator=(VkMusicUserPrivacy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkMusicUserPrivacy& default_instance();

  static inline const VkMusicUserPrivacy* internal_default_instance() {
    return reinterpret_cast<const VkMusicUserPrivacy*>(
               &_VkMusicUserPrivacy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(VkMusicUserPrivacy* other);
  friend void swap(VkMusicUserPrivacy& a, VkMusicUserPrivacy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkMusicUserPrivacy* New() const PROTOBUF_FINAL { return New(NULL); }

  VkMusicUserPrivacy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkMusicUserPrivacy& from);
  void MergeFrom(const VkMusicUserPrivacy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkMusicUserPrivacy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 owner_id = 1;
  bool has_owner_id() const;
  void clear_owner_id();
  static const int kOwnerIdFieldNumber = 1;
  ::google::protobuf::int64 owner_id() const;
  void set_owner_id(::google::protobuf::int64 value);

  // optional int64 timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int64 timestamp_ms = 4;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 4;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // required bool is_public = 2;
  bool has_is_public() const;
  void clear_is_public();
  static const int kIsPublicFieldNumber = 2;
  bool is_public() const;
  void set_is_public(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkMusicUserPrivacy)
 private:
  void set_has_owner_id();
  void clear_has_owner_id();
  void set_has_is_public();
  void clear_has_is_public();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 owner_id_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 timestamp_ms_;
  bool is_public_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackOrPlaylistOrUserPrivacy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy) */ {
 public:
  TrackOrPlaylistOrUserPrivacy();
  virtual ~TrackOrPlaylistOrUserPrivacy();

  TrackOrPlaylistOrUserPrivacy(const TrackOrPlaylistOrUserPrivacy& from);

  inline TrackOrPlaylistOrUserPrivacy& operator=(const TrackOrPlaylistOrUserPrivacy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackOrPlaylistOrUserPrivacy(TrackOrPlaylistOrUserPrivacy&& from) noexcept
    : TrackOrPlaylistOrUserPrivacy() {
    *this = ::std::move(from);
  }

  inline TrackOrPlaylistOrUserPrivacy& operator=(TrackOrPlaylistOrUserPrivacy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackOrPlaylistOrUserPrivacy& default_instance();

  static inline const TrackOrPlaylistOrUserPrivacy* internal_default_instance() {
    return reinterpret_cast<const TrackOrPlaylistOrUserPrivacy*>(
               &_TrackOrPlaylistOrUserPrivacy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(TrackOrPlaylistOrUserPrivacy* other);
  friend void swap(TrackOrPlaylistOrUserPrivacy& a, TrackOrPlaylistOrUserPrivacy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackOrPlaylistOrUserPrivacy* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackOrPlaylistOrUserPrivacy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackOrPlaylistOrUserPrivacy& from);
  void MergeFrom(const TrackOrPlaylistOrUserPrivacy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackOrPlaylistOrUserPrivacy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 1;
  bool has_track() const;
  void clear_track();
  static const int kTrackFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::VkMusicTrack& track() const;
  ::ru::mail::go::webbase::blobs::VkMusicTrack* mutable_track();
  ::ru::mail::go::webbase::blobs::VkMusicTrack* release_track();
  void set_allocated_track(::ru::mail::go::webbase::blobs::VkMusicTrack* track);

  // optional .ru.mail.go.webbase.blobs.VkMusicPlaylist playlist = 2;
  bool has_playlist() const;
  void clear_playlist();
  static const int kPlaylistFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::VkMusicPlaylist& playlist() const;
  ::ru::mail::go::webbase::blobs::VkMusicPlaylist* mutable_playlist();
  ::ru::mail::go::webbase::blobs::VkMusicPlaylist* release_playlist();
  void set_allocated_playlist(::ru::mail::go::webbase::blobs::VkMusicPlaylist* playlist);

  // optional .ru.mail.go.webbase.blobs.VkMusicUserPrivacy privacy = 3;
  bool has_privacy() const;
  void clear_privacy();
  static const int kPrivacyFieldNumber = 3;
  const ::ru::mail::go::webbase::blobs::VkMusicUserPrivacy& privacy() const;
  ::ru::mail::go::webbase::blobs::VkMusicUserPrivacy* mutable_privacy();
  ::ru::mail::go::webbase::blobs::VkMusicUserPrivacy* release_privacy();
  void set_allocated_privacy(::ru::mail::go::webbase::blobs::VkMusicUserPrivacy* privacy);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy)
 private:
  void set_has_track();
  void clear_has_track();
  void set_has_playlist();
  void clear_has_playlist();
  void set_has_privacy();
  void clear_has_privacy();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::ru::mail::go::webbase::blobs::VkMusicTrack* track_;
  ::ru::mail::go::webbase::blobs::VkMusicPlaylist* playlist_;
  ::ru::mail::go::webbase::blobs::VkMusicUserPrivacy* privacy_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackOrPlaylistOrListenEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent) */ {
 public:
  TrackOrPlaylistOrListenEvent();
  virtual ~TrackOrPlaylistOrListenEvent();

  TrackOrPlaylistOrListenEvent(const TrackOrPlaylistOrListenEvent& from);

  inline TrackOrPlaylistOrListenEvent& operator=(const TrackOrPlaylistOrListenEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackOrPlaylistOrListenEvent(TrackOrPlaylistOrListenEvent&& from) noexcept
    : TrackOrPlaylistOrListenEvent() {
    *this = ::std::move(from);
  }

  inline TrackOrPlaylistOrListenEvent& operator=(TrackOrPlaylistOrListenEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackOrPlaylistOrListenEvent& default_instance();

  static inline const TrackOrPlaylistOrListenEvent* internal_default_instance() {
    return reinterpret_cast<const TrackOrPlaylistOrListenEvent*>(
               &_TrackOrPlaylistOrListenEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(TrackOrPlaylistOrListenEvent* other);
  friend void swap(TrackOrPlaylistOrListenEvent& a, TrackOrPlaylistOrListenEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackOrPlaylistOrListenEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackOrPlaylistOrListenEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackOrPlaylistOrListenEvent& from);
  void MergeFrom(const TrackOrPlaylistOrListenEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackOrPlaylistOrListenEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 1;
  bool has_track() const;
  void clear_track();
  static const int kTrackFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::VkMusicTrack& track() const;
  ::ru::mail::go::webbase::blobs::VkMusicTrack* mutable_track();
  ::ru::mail::go::webbase::blobs::VkMusicTrack* release_track();
  void set_allocated_track(::ru::mail::go::webbase::blobs::VkMusicTrack* track);

  // optional .ru.mail.go.webbase.blobs.VkMusicUserEventListen listen_event = 2;
  bool has_listen_event() const;
  void clear_listen_event();
  static const int kListenEventFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::VkMusicUserEventListen& listen_event() const;
  ::ru::mail::go::webbase::blobs::VkMusicUserEventListen* mutable_listen_event();
  ::ru::mail::go::webbase::blobs::VkMusicUserEventListen* release_listen_event();
  void set_allocated_listen_event(::ru::mail::go::webbase::blobs::VkMusicUserEventListen* listen_event);

  // optional .ru.mail.go.webbase.blobs.VkMusicPlaylist playlist = 3;
  bool has_playlist() const;
  void clear_playlist();
  static const int kPlaylistFieldNumber = 3;
  const ::ru::mail::go::webbase::blobs::VkMusicPlaylist& playlist() const;
  ::ru::mail::go::webbase::blobs::VkMusicPlaylist* mutable_playlist();
  ::ru::mail::go::webbase::blobs::VkMusicPlaylist* release_playlist();
  void set_allocated_playlist(::ru::mail::go::webbase::blobs::VkMusicPlaylist* playlist);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent)
 private:
  void set_has_track();
  void clear_has_track();
  void set_has_listen_event();
  void clear_has_listen_event();
  void set_has_playlist();
  void clear_has_playlist();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::ru::mail::go::webbase::blobs::VkMusicTrack* track_;
  ::ru::mail::go::webbase::blobs::VkMusicUserEventListen* listen_event_;
  ::ru::mail::go::webbase::blobs::VkMusicPlaylist* playlist_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkUserEventHistory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkUserEventHistory) */ {
 public:
  VkUserEventHistory();
  virtual ~VkUserEventHistory();

  VkUserEventHistory(const VkUserEventHistory& from);

  inline VkUserEventHistory& operator=(const VkUserEventHistory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkUserEventHistory(VkUserEventHistory&& from) noexcept
    : VkUserEventHistory() {
    *this = ::std::move(from);
  }

  inline VkUserEventHistory& operator=(VkUserEventHistory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkUserEventHistory& default_instance();

  static inline const VkUserEventHistory* internal_default_instance() {
    return reinterpret_cast<const VkUserEventHistory*>(
               &_VkUserEventHistory_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(VkUserEventHistory* other);
  friend void swap(VkUserEventHistory& a, VkUserEventHistory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkUserEventHistory* New() const PROTOBUF_FINAL { return New(NULL); }

  VkUserEventHistory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkUserEventHistory& from);
  void MergeFrom(const VkUserEventHistory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkUserEventHistory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent history_entry = 2;
  int history_entry_size() const;
  void clear_history_entry();
  static const int kHistoryEntryFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::TrackOrPlaylistOrListenEvent& history_entry(int index) const;
  ::ru::mail::go::webbase::blobs::TrackOrPlaylistOrListenEvent* mutable_history_entry(int index);
  ::ru::mail::go::webbase::blobs::TrackOrPlaylistOrListenEvent* add_history_entry();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TrackOrPlaylistOrListenEvent >*
      mutable_history_entry();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TrackOrPlaylistOrListenEvent >&
      history_entry() const;

  // optional int64 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkUserEventHistory)
 private:
  void set_has_user_id();
  void clear_has_user_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TrackOrPlaylistOrListenEvent > history_entry_;
  ::google::protobuf::int64 user_id_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkMusicExtraData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkMusicExtraData) */ {
 public:
  VkMusicExtraData();
  virtual ~VkMusicExtraData();

  VkMusicExtraData(const VkMusicExtraData& from);

  inline VkMusicExtraData& operator=(const VkMusicExtraData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkMusicExtraData(VkMusicExtraData&& from) noexcept
    : VkMusicExtraData() {
    *this = ::std::move(from);
  }

  inline VkMusicExtraData& operator=(VkMusicExtraData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkMusicExtraData& default_instance();

  static inline const VkMusicExtraData* internal_default_instance() {
    return reinterpret_cast<const VkMusicExtraData*>(
               &_VkMusicExtraData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(VkMusicExtraData* other);
  friend void swap(VkMusicExtraData& a, VkMusicExtraData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkMusicExtraData* New() const PROTOBUF_FINAL { return New(NULL); }

  VkMusicExtraData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkMusicExtraData& from);
  void MergeFrom(const VkMusicExtraData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkMusicExtraData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool remove_ugc = 1;
  bool has_remove_ugc() const;
  void clear_remove_ugc();
  static const int kRemoveUgcFieldNumber = 1;
  bool remove_ugc() const;
  void set_remove_ugc(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkMusicExtraData)
 private:
  void set_has_remove_ugc();
  void clear_has_remove_ugc();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool remove_ugc_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkMusicEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkMusicEvent) */ {
 public:
  VkMusicEvent();
  virtual ~VkMusicEvent();

  VkMusicEvent(const VkMusicEvent& from);

  inline VkMusicEvent& operator=(const VkMusicEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkMusicEvent(VkMusicEvent&& from) noexcept
    : VkMusicEvent() {
    *this = ::std::move(from);
  }

  inline VkMusicEvent& operator=(VkMusicEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkMusicEvent& default_instance();

  static inline const VkMusicEvent* internal_default_instance() {
    return reinterpret_cast<const VkMusicEvent*>(
               &_VkMusicEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(VkMusicEvent* other);
  friend void swap(VkMusicEvent& a, VkMusicEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkMusicEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  VkMusicEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkMusicEvent& from);
  void MergeFrom(const VkMusicEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkMusicEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string extra = 6;
  bool has_extra() const;
  void clear_extra();
  static const int kExtraFieldNumber = 6;
  const ::std::string& extra() const;
  void set_extra(const ::std::string& value);
  #if LANG_CXX11
  void set_extra(::std::string&& value);
  #endif
  void set_extra(const char* value);
  void set_extra(const char* value, size_t size);
  ::std::string* mutable_extra();
  ::std::string* release_extra();
  void set_allocated_extra(::std::string* extra);

  // optional uint64 time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // optional uint32 position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  ::google::protobuf::uint32 position() const;
  void set_position(::google::protobuf::uint32 value);

  // optional uint32 duration = 4;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 4;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // optional uint64 uid = 5;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 5;
  ::google::protobuf::uint64 uid() const;
  void set_uid(::google::protobuf::uint64 value);

  // optional .ru.mail.go.webbase.blobs.VkMusicEventType type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::ru::mail::go::webbase::blobs::VkMusicEventType type() const;
  void set_type(::ru::mail::go::webbase::blobs::VkMusicEventType value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkMusicEvent)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_position();
  void clear_has_position();
  void set_has_type();
  void clear_has_type();
  void set_has_duration();
  void clear_has_duration();
  void set_has_uid();
  void clear_has_uid();
  void set_has_extra();
  void clear_has_extra();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr extra_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint32 position_;
  ::google::protobuf::uint32 duration_;
  ::google::protobuf::uint64 uid_;
  int type_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SessionOrVkMusicEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent) */ {
 public:
  SessionOrVkMusicEvent();
  virtual ~SessionOrVkMusicEvent();

  SessionOrVkMusicEvent(const SessionOrVkMusicEvent& from);

  inline SessionOrVkMusicEvent& operator=(const SessionOrVkMusicEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SessionOrVkMusicEvent(SessionOrVkMusicEvent&& from) noexcept
    : SessionOrVkMusicEvent() {
    *this = ::std::move(from);
  }

  inline SessionOrVkMusicEvent& operator=(SessionOrVkMusicEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionOrVkMusicEvent& default_instance();

  static inline const SessionOrVkMusicEvent* internal_default_instance() {
    return reinterpret_cast<const SessionOrVkMusicEvent*>(
               &_SessionOrVkMusicEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(SessionOrVkMusicEvent* other);
  friend void swap(SessionOrVkMusicEvent& a, SessionOrVkMusicEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionOrVkMusicEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  SessionOrVkMusicEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SessionOrVkMusicEvent& from);
  void MergeFrom(const SessionOrVkMusicEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SessionOrVkMusicEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ru.mail.go.webbase.blobs.VkMusicSession session = 1;
  bool has_session() const;
  void clear_session();
  static const int kSessionFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::VkMusicSession& session() const;
  ::ru::mail::go::webbase::blobs::VkMusicSession* mutable_session();
  ::ru::mail::go::webbase::blobs::VkMusicSession* release_session();
  void set_allocated_session(::ru::mail::go::webbase::blobs::VkMusicSession* session);

  // optional .ru.mail.go.webbase.blobs.VkMusicEvent event = 2;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::VkMusicEvent& event() const;
  ::ru::mail::go::webbase::blobs::VkMusicEvent* mutable_event();
  ::ru::mail::go::webbase::blobs::VkMusicEvent* release_event();
  void set_allocated_event(::ru::mail::go::webbase::blobs::VkMusicEvent* event);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent)
 private:
  void set_has_session();
  void clear_has_session();
  void set_has_event();
  void clear_has_event();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::ru::mail::go::webbase::blobs::VkMusicSession* session_;
  ::ru::mail::go::webbase::blobs::VkMusicEvent* event_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkMusicSpellcheckerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse) */ {
 public:
  VkMusicSpellcheckerResponse();
  virtual ~VkMusicSpellcheckerResponse();

  VkMusicSpellcheckerResponse(const VkMusicSpellcheckerResponse& from);

  inline VkMusicSpellcheckerResponse& operator=(const VkMusicSpellcheckerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkMusicSpellcheckerResponse(VkMusicSpellcheckerResponse&& from) noexcept
    : VkMusicSpellcheckerResponse() {
    *this = ::std::move(from);
  }

  inline VkMusicSpellcheckerResponse& operator=(VkMusicSpellcheckerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkMusicSpellcheckerResponse& default_instance();

  static inline const VkMusicSpellcheckerResponse* internal_default_instance() {
    return reinterpret_cast<const VkMusicSpellcheckerResponse*>(
               &_VkMusicSpellcheckerResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(VkMusicSpellcheckerResponse* other);
  friend void swap(VkMusicSpellcheckerResponse& a, VkMusicSpellcheckerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkMusicSpellcheckerResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  VkMusicSpellcheckerResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkMusicSpellcheckerResponse& from);
  void MergeFrom(const VkMusicSpellcheckerResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkMusicSpellcheckerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VkMusicSpellcheckerResponse_Type Type;
  static const Type AUTO =
    VkMusicSpellcheckerResponse_Type_AUTO;
  static const Type SUGG =
    VkMusicSpellcheckerResponse_Type_SUGG;
  static inline bool Type_IsValid(int value) {
    return VkMusicSpellcheckerResponse_Type_IsValid(value);
  }
  static const Type Type_MIN =
    VkMusicSpellcheckerResponse_Type_Type_MIN;
  static const Type Type_MAX =
    VkMusicSpellcheckerResponse_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    VkMusicSpellcheckerResponse_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return VkMusicSpellcheckerResponse_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return VkMusicSpellcheckerResponse_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return VkMusicSpellcheckerResponse_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string fixed_query = 2;
  bool has_fixed_query() const;
  void clear_fixed_query();
  static const int kFixedQueryFieldNumber = 2;
  const ::std::string& fixed_query() const;
  void set_fixed_query(const ::std::string& value);
  #if LANG_CXX11
  void set_fixed_query(::std::string&& value);
  #endif
  void set_fixed_query(const char* value);
  void set_fixed_query(const char* value, size_t size);
  ::std::string* mutable_fixed_query();
  ::std::string* release_fixed_query();
  void set_allocated_fixed_query(::std::string* fixed_query);

  // optional bool applied = 3;
  bool has_applied() const;
  void clear_applied();
  static const int kAppliedFieldNumber = 3;
  bool applied() const;
  void set_applied(bool value);

  // optional .ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse_Type type() const;
  void set_type(::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse_Type value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_fixed_query();
  void clear_has_fixed_query();
  void set_has_applied();
  void clear_has_applied();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fixed_query_;
  bool applied_;
  int type_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkMusicSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkMusicSession) */ {
 public:
  VkMusicSession();
  virtual ~VkMusicSession();

  VkMusicSession(const VkMusicSession& from);

  inline VkMusicSession& operator=(const VkMusicSession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkMusicSession(VkMusicSession&& from) noexcept
    : VkMusicSession() {
    *this = ::std::move(from);
  }

  inline VkMusicSession& operator=(VkMusicSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkMusicSession& default_instance();

  static inline const VkMusicSession* internal_default_instance() {
    return reinterpret_cast<const VkMusicSession*>(
               &_VkMusicSession_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(VkMusicSession* other);
  friend void swap(VkMusicSession& a, VkMusicSession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkMusicSession* New() const PROTOBUF_FINAL { return New(NULL); }

  VkMusicSession* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkMusicSession& from);
  void MergeFrom(const VkMusicSession& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkMusicSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VkMusicSession_Sex Sex;
  static const Sex FEMALE =
    VkMusicSession_Sex_FEMALE;
  static const Sex MALE =
    VkMusicSession_Sex_MALE;
  static inline bool Sex_IsValid(int value) {
    return VkMusicSession_Sex_IsValid(value);
  }
  static const Sex Sex_MIN =
    VkMusicSession_Sex_Sex_MIN;
  static const Sex Sex_MAX =
    VkMusicSession_Sex_Sex_MAX;
  static const int Sex_ARRAYSIZE =
    VkMusicSession_Sex_Sex_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sex_descriptor() {
    return VkMusicSession_Sex_descriptor();
  }
  static inline const ::std::string& Sex_Name(Sex value) {
    return VkMusicSession_Sex_Name(value);
  }
  static inline bool Sex_Parse(const ::std::string& name,
      Sex* value) {
    return VkMusicSession_Sex_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.VkMusicEvent events = 4;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 4;
  const ::ru::mail::go::webbase::blobs::VkMusicEvent& events(int index) const;
  ::ru::mail::go::webbase::blobs::VkMusicEvent* mutable_events(int index);
  ::ru::mail::go::webbase::blobs::VkMusicEvent* add_events();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkMusicEvent >*
      mutable_events();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkMusicEvent >&
      events() const;

  // repeated string items = 5;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 5;
  const ::std::string& items(int index) const;
  ::std::string* mutable_items(int index);
  void set_items(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_items(int index, ::std::string&& value);
  #endif
  void set_items(int index, const char* value);
  void set_items(int index, const char* value, size_t size);
  ::std::string* add_items();
  void add_items(const ::std::string& value);
  #if LANG_CXX11
  void add_items(::std::string&& value);
  #endif
  void add_items(const char* value);
  void add_items(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& items() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_items();

  // optional string query = 1;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // optional string qid = 8;
  bool has_qid() const;
  void clear_qid();
  static const int kQidFieldNumber = 8;
  const ::std::string& qid() const;
  void set_qid(const ::std::string& value);
  #if LANG_CXX11
  void set_qid(::std::string&& value);
  #endif
  void set_qid(const char* value);
  void set_qid(const char* value, size_t size);
  ::std::string* mutable_qid();
  ::std::string* release_qid();
  void set_allocated_qid(::std::string* qid);

  // optional string query_class = 13;
  bool has_query_class() const;
  void clear_query_class();
  static const int kQueryClassFieldNumber = 13;
  const ::std::string& query_class() const;
  void set_query_class(const ::std::string& value);
  #if LANG_CXX11
  void set_query_class(::std::string&& value);
  #endif
  void set_query_class(const char* value);
  void set_query_class(const char* value, size_t size);
  ::std::string* mutable_query_class();
  ::std::string* release_query_class();
  void set_allocated_query_class(::std::string* query_class);

  // optional string client = 18;
  bool has_client() const;
  void clear_client();
  static const int kClientFieldNumber = 18;
  const ::std::string& client() const;
  void set_client(const ::std::string& value);
  #if LANG_CXX11
  void set_client(::std::string&& value);
  #endif
  void set_client(const char* value);
  void set_client(const char* value, size_t size);
  ::std::string* mutable_client();
  ::std::string* release_client();
  void set_allocated_client(::std::string* client);

  // optional string ref = 22;
  bool has_ref() const;
  void clear_ref();
  static const int kRefFieldNumber = 22;
  const ::std::string& ref() const;
  void set_ref(const ::std::string& value);
  #if LANG_CXX11
  void set_ref(::std::string&& value);
  #endif
  void set_ref(const char* value);
  void set_ref(const char* value, size_t size);
  ::std::string* mutable_ref();
  ::std::string* release_ref();
  void set_allocated_ref(::std::string* ref);

  // optional .ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse spellchecker_response = 19;
  bool has_spellchecker_response() const;
  void clear_spellchecker_response();
  static const int kSpellcheckerResponseFieldNumber = 19;
  const ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse& spellchecker_response() const;
  ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse* mutable_spellchecker_response();
  ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse* release_spellchecker_response();
  void set_allocated_spellchecker_response(::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse* spellchecker_response);

  // optional uint64 uid = 2;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 2;
  ::google::protobuf::uint64 uid() const;
  void set_uid(::google::protobuf::uint64 value);

  // optional uint64 time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // optional uint64 items_num = 9;
  bool has_items_num() const;
  void clear_items_num();
  static const int kItemsNumFieldNumber = 9;
  ::google::protobuf::uint64 items_num() const;
  void set_items_num(::google::protobuf::uint64 value);

  // optional uint64 official_tracks_num = 10;
  bool has_official_tracks_num() const;
  void clear_official_tracks_num();
  static const int kOfficialTracksNumFieldNumber = 10;
  ::google::protobuf::uint64 official_tracks_num() const;
  void set_official_tracks_num(::google::protobuf::uint64 value);

  // optional int64 vk_qid = 11;
  bool has_vk_qid() const;
  void clear_vk_qid();
  static const int kVkQidFieldNumber = 11;
  ::google::protobuf::int64 vk_qid() const;
  void set_vk_qid(::google::protobuf::int64 value);

  // optional double reply_quality = 12;
  bool has_reply_quality() const;
  void clear_reply_quality();
  static const int kReplyQualityFieldNumber = 12;
  double reply_quality() const;
  void set_reply_quality(double value);

  // optional uint32 split = 7;
  bool has_split() const;
  void clear_split();
  static const int kSplitFieldNumber = 7;
  ::google::protobuf::uint32 split() const;
  void set_split(::google::protobuf::uint32 value);

  // optional uint32 qddb_sessions_num_log2 = 17;
  bool has_qddb_sessions_num_log2() const;
  void clear_qddb_sessions_num_log2();
  static const int kQddbSessionsNumLog2FieldNumber = 17;
  ::google::protobuf::uint32 qddb_sessions_num_log2() const;
  void set_qddb_sessions_num_log2(::google::protobuf::uint32 value);

  // optional int64 as_events_found = 14;
  bool has_as_events_found() const;
  void clear_as_events_found();
  static const int kAsEventsFoundFieldNumber = 14;
  ::google::protobuf::int64 as_events_found() const;
  void set_as_events_found(::google::protobuf::int64 value);

  // optional int64 favourite_tracks = 15;
  bool has_favourite_tracks() const;
  void clear_favourite_tracks();
  static const int kFavouriteTracksFieldNumber = 15;
  ::google::protobuf::int64 favourite_tracks() const;
  void set_favourite_tracks(::google::protobuf::int64 value);

  // optional int64 favourite_tracks_boosted = 16;
  bool has_favourite_tracks_boosted() const;
  void clear_favourite_tracks_boosted();
  static const int kFavouriteTracksBoostedFieldNumber = 16;
  ::google::protobuf::int64 favourite_tracks_boosted() const;
  void set_favourite_tracks_boosted(::google::protobuf::int64 value);

  // optional uint32 user_age = 20;
  bool has_user_age() const;
  void clear_user_age();
  static const int kUserAgeFieldNumber = 20;
  ::google::protobuf::uint32 user_age() const;
  void set_user_age(::google::protobuf::uint32 value);

  // optional .ru.mail.go.webbase.blobs.VkMusicSessionType type = 6;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::ru::mail::go::webbase::blobs::VkMusicSessionType type() const;
  void set_type(::ru::mail::go::webbase::blobs::VkMusicSessionType value);

  // optional .ru.mail.go.webbase.blobs.VkMusicSession.Sex user_sex = 21;
  bool has_user_sex() const;
  void clear_user_sex();
  static const int kUserSexFieldNumber = 21;
  ::ru::mail::go::webbase::blobs::VkMusicSession_Sex user_sex() const;
  void set_user_sex(::ru::mail::go::webbase::blobs::VkMusicSession_Sex value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkMusicSession)
 private:
  void set_has_query();
  void clear_has_query();
  void set_has_uid();
  void clear_has_uid();
  void set_has_time();
  void clear_has_time();
  void set_has_type();
  void clear_has_type();
  void set_has_split();
  void clear_has_split();
  void set_has_qid();
  void clear_has_qid();
  void set_has_items_num();
  void clear_has_items_num();
  void set_has_official_tracks_num();
  void clear_has_official_tracks_num();
  void set_has_vk_qid();
  void clear_has_vk_qid();
  void set_has_reply_quality();
  void clear_has_reply_quality();
  void set_has_query_class();
  void clear_has_query_class();
  void set_has_as_events_found();
  void clear_has_as_events_found();
  void set_has_favourite_tracks();
  void clear_has_favourite_tracks();
  void set_has_favourite_tracks_boosted();
  void clear_has_favourite_tracks_boosted();
  void set_has_qddb_sessions_num_log2();
  void clear_has_qddb_sessions_num_log2();
  void set_has_client();
  void clear_has_client();
  void set_has_spellchecker_response();
  void clear_has_spellchecker_response();
  void set_has_user_age();
  void clear_has_user_age();
  void set_has_user_sex();
  void clear_has_user_sex();
  void set_has_ref();
  void clear_has_ref();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkMusicEvent > events_;
  ::google::protobuf::RepeatedPtrField< ::std::string> items_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr qid_;
  ::google::protobuf::internal::ArenaStringPtr query_class_;
  ::google::protobuf::internal::ArenaStringPtr client_;
  ::google::protobuf::internal::ArenaStringPtr ref_;
  ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse* spellchecker_response_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint64 items_num_;
  ::google::protobuf::uint64 official_tracks_num_;
  ::google::protobuf::int64 vk_qid_;
  double reply_quality_;
  ::google::protobuf::uint32 split_;
  ::google::protobuf::uint32 qddb_sessions_num_log2_;
  ::google::protobuf::int64 as_events_found_;
  ::google::protobuf::int64 favourite_tracks_;
  ::google::protobuf::int64 favourite_tracks_boosted_;
  ::google::protobuf::uint32 user_age_;
  int type_;
  int user_sex_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkMusicTrackStatsForQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery) */ {
 public:
  VkMusicTrackStatsForQuery();
  virtual ~VkMusicTrackStatsForQuery();

  VkMusicTrackStatsForQuery(const VkMusicTrackStatsForQuery& from);

  inline VkMusicTrackStatsForQuery& operator=(const VkMusicTrackStatsForQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkMusicTrackStatsForQuery(VkMusicTrackStatsForQuery&& from) noexcept
    : VkMusicTrackStatsForQuery() {
    *this = ::std::move(from);
  }

  inline VkMusicTrackStatsForQuery& operator=(VkMusicTrackStatsForQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkMusicTrackStatsForQuery& default_instance();

  static inline const VkMusicTrackStatsForQuery* internal_default_instance() {
    return reinterpret_cast<const VkMusicTrackStatsForQuery*>(
               &_VkMusicTrackStatsForQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(VkMusicTrackStatsForQuery* other);
  friend void swap(VkMusicTrackStatsForQuery& a, VkMusicTrackStatsForQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkMusicTrackStatsForQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  VkMusicTrackStatsForQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkMusicTrackStatsForQuery& from);
  void MergeFrom(const VkMusicTrackStatsForQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkMusicTrackStatsForQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string query = 1;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 7;
  bool has_track() const;
  void clear_track();
  static const int kTrackFieldNumber = 7;
  const ::ru::mail::go::webbase::blobs::VkMusicTrack& track() const;
  ::ru::mail::go::webbase::blobs::VkMusicTrack* mutable_track();
  ::ru::mail::go::webbase::blobs::VkMusicTrack* release_track();
  void set_allocated_track(::ru::mail::go::webbase::blobs::VkMusicTrack* track);

  // optional uint64 sessionCount = 2;
  bool has_sessioncount() const;
  void clear_sessioncount();
  static const int kSessionCountFieldNumber = 2;
  ::google::protobuf::uint64 sessioncount() const;
  void set_sessioncount(::google::protobuf::uint64 value);

  // optional uint64 performerFilterSessionCount = 3;
  bool has_performerfiltersessioncount() const;
  void clear_performerfiltersessioncount();
  static const int kPerformerFilterSessionCountFieldNumber = 3;
  ::google::protobuf::uint64 performerfiltersessioncount() const;
  void set_performerfiltersessioncount(::google::protobuf::uint64 value);

  // optional uint64 timesClicked = 4;
  bool has_timesclicked() const;
  void clear_timesclicked();
  static const int kTimesClickedFieldNumber = 4;
  ::google::protobuf::uint64 timesclicked() const;
  void set_timesclicked(::google::protobuf::uint64 value);

  // optional uint64 timesLongClicked = 5;
  bool has_timeslongclicked() const;
  void clear_timeslongclicked();
  static const int kTimesLongClickedFieldNumber = 5;
  ::google::protobuf::uint64 timeslongclicked() const;
  void set_timeslongclicked(::google::protobuf::uint64 value);

  // optional uint64 timesLastClicked = 6;
  bool has_timeslastclicked() const;
  void clear_timeslastclicked();
  static const int kTimesLastClickedFieldNumber = 6;
  ::google::protobuf::uint64 timeslastclicked() const;
  void set_timeslastclicked(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery)
 private:
  void set_has_query();
  void clear_has_query();
  void set_has_sessioncount();
  void clear_has_sessioncount();
  void set_has_performerfiltersessioncount();
  void clear_has_performerfiltersessioncount();
  void set_has_timesclicked();
  void clear_has_timesclicked();
  void set_has_timeslongclicked();
  void clear_has_timeslongclicked();
  void set_has_timeslastclicked();
  void clear_has_timeslastclicked();
  void set_has_track();
  void clear_has_track();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::ru::mail::go::webbase::blobs::VkMusicTrack* track_;
  ::google::protobuf::uint64 sessioncount_;
  ::google::protobuf::uint64 performerfiltersessioncount_;
  ::google::protobuf::uint64 timesclicked_;
  ::google::protobuf::uint64 timeslongclicked_;
  ::google::protobuf::uint64 timeslastclicked_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkMusicPerformer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkMusicPerformer) */ {
 public:
  VkMusicPerformer();
  virtual ~VkMusicPerformer();

  VkMusicPerformer(const VkMusicPerformer& from);

  inline VkMusicPerformer& operator=(const VkMusicPerformer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkMusicPerformer(VkMusicPerformer&& from) noexcept
    : VkMusicPerformer() {
    *this = ::std::move(from);
  }

  inline VkMusicPerformer& operator=(VkMusicPerformer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkMusicPerformer& default_instance();

  static inline const VkMusicPerformer* internal_default_instance() {
    return reinterpret_cast<const VkMusicPerformer*>(
               &_VkMusicPerformer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(VkMusicPerformer* other);
  friend void swap(VkMusicPerformer& a, VkMusicPerformer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkMusicPerformer* New() const PROTOBUF_FINAL { return New(NULL); }

  VkMusicPerformer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkMusicPerformer& from);
  void MergeFrom(const VkMusicPerformer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkMusicPerformer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tags = 8;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 8;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string name_alternatives = 10;
  bool has_name_alternatives() const;
  void clear_name_alternatives();
  static const int kNameAlternativesFieldNumber = 10;
  const ::std::string& name_alternatives() const;
  void set_name_alternatives(const ::std::string& value);
  #if LANG_CXX11
  void set_name_alternatives(::std::string&& value);
  #endif
  void set_name_alternatives(const char* value);
  void set_name_alternatives(const char* value, size_t size);
  ::std::string* mutable_name_alternatives();
  ::std::string* release_name_alternatives();
  void set_allocated_name_alternatives(::std::string* name_alternatives);

  // optional int64 performer_id = 1;
  bool has_performer_id() const;
  void clear_performer_id();
  static const int kPerformerIdFieldNumber = 1;
  ::google::protobuf::int64 performer_id() const;
  void set_performer_id(::google::protobuf::int64 value);

  // optional int64 timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int64 followers = 4;
  bool has_followers() const;
  void clear_followers();
  static const int kFollowersFieldNumber = 4;
  ::google::protobuf::int64 followers() const;
  void set_followers(::google::protobuf::int64 value);

  // optional int64 times_listened = 5;
  bool has_times_listened() const;
  void clear_times_listened();
  static const int kTimesListenedFieldNumber = 5;
  ::google::protobuf::int64 times_listened() const;
  void set_times_listened(::google::protobuf::int64 value);

  // optional int64 times_listened_last_month = 6;
  bool has_times_listened_last_month() const;
  void clear_times_listened_last_month();
  static const int kTimesListenedLastMonthFieldNumber = 6;
  ::google::protobuf::int64 times_listened_last_month() const;
  void set_times_listened_last_month(::google::protobuf::int64 value);

  // optional int64 times_listened_last_week = 7;
  bool has_times_listened_last_week() const;
  void clear_times_listened_last_week();
  static const int kTimesListenedLastWeekFieldNumber = 7;
  ::google::protobuf::int64 times_listened_last_week() const;
  void set_times_listened_last_week(::google::protobuf::int64 value);

  // optional int64 timestamp_ms = 9;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 9;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkMusicPerformer)
 private:
  void set_has_performer_id();
  void clear_has_performer_id();
  void set_has_name();
  void clear_has_name();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_followers();
  void clear_has_followers();
  void set_has_times_listened();
  void clear_has_times_listened();
  void set_has_times_listened_last_month();
  void clear_has_times_listened_last_month();
  void set_has_times_listened_last_week();
  void clear_has_times_listened_last_week();
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_name_alternatives();
  void clear_has_name_alternatives();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr name_alternatives_;
  ::google::protobuf::int64 performer_id_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 followers_;
  ::google::protobuf::int64 times_listened_;
  ::google::protobuf::int64 times_listened_last_month_;
  ::google::protobuf::int64 times_listened_last_week_;
  ::google::protobuf::int64 timestamp_ms_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkMusicClick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkMusicClick) */ {
 public:
  VkMusicClick();
  virtual ~VkMusicClick();

  VkMusicClick(const VkMusicClick& from);

  inline VkMusicClick& operator=(const VkMusicClick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkMusicClick(VkMusicClick&& from) noexcept
    : VkMusicClick() {
    *this = ::std::move(from);
  }

  inline VkMusicClick& operator=(VkMusicClick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkMusicClick& default_instance();

  static inline const VkMusicClick* internal_default_instance() {
    return reinterpret_cast<const VkMusicClick*>(
               &_VkMusicClick_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(VkMusicClick* other);
  friend void swap(VkMusicClick& a, VkMusicClick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkMusicClick* New() const PROTOBUF_FINAL { return New(NULL); }

  VkMusicClick* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkMusicClick& from);
  void MergeFrom(const VkMusicClick& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkMusicClick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string click_type = 3;
  bool has_click_type() const;
  void clear_click_type();
  static const int kClickTypeFieldNumber = 3;
  const ::std::string& click_type() const;
  void set_click_type(const ::std::string& value);
  #if LANG_CXX11
  void set_click_type(::std::string&& value);
  #endif
  void set_click_type(const char* value);
  void set_click_type(const char* value, size_t size);
  ::std::string* mutable_click_type();
  ::std::string* release_click_type();
  void set_allocated_click_type(::std::string* click_type);

  // optional string query_text = 5;
  bool has_query_text() const;
  void clear_query_text();
  static const int kQueryTextFieldNumber = 5;
  const ::std::string& query_text() const;
  void set_query_text(const ::std::string& value);
  #if LANG_CXX11
  void set_query_text(::std::string&& value);
  #endif
  void set_query_text(const char* value);
  void set_query_text(const char* value, size_t size);
  ::std::string* mutable_query_text();
  ::std::string* release_query_text();
  void set_allocated_query_text(::std::string* query_text);

  // optional string service_name = 6;
  bool has_service_name() const;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 6;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // optional string block_name = 7;
  bool has_block_name() const;
  void clear_block_name();
  static const int kBlockNameFieldNumber = 7;
  const ::std::string& block_name() const;
  void set_block_name(const ::std::string& value);
  #if LANG_CXX11
  void set_block_name(::std::string&& value);
  #endif
  void set_block_name(const char* value);
  void set_block_name(const char* value, size_t size);
  ::std::string* mutable_block_name();
  ::std::string* release_block_name();
  void set_allocated_block_name(::std::string* block_name);

  // optional string platform = 8;
  bool has_platform() const;
  void clear_platform();
  static const int kPlatformFieldNumber = 8;
  const ::std::string& platform() const;
  void set_platform(const ::std::string& value);
  #if LANG_CXX11
  void set_platform(::std::string&& value);
  #endif
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  ::std::string* mutable_platform();
  ::std::string* release_platform();
  void set_allocated_platform(::std::string* platform);

  // optional int64 qid = 1;
  bool has_qid() const;
  void clear_qid();
  static const int kQidFieldNumber = 1;
  ::google::protobuf::int64 qid() const;
  void set_qid(::google::protobuf::int64 value);

  // optional int64 user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // optional uint64 click_position = 4;
  bool has_click_position() const;
  void clear_click_position();
  static const int kClickPositionFieldNumber = 4;
  ::google::protobuf::uint64 click_position() const;
  void set_click_position(::google::protobuf::uint64 value);

  // optional int64 owner_id = 9;
  bool has_owner_id() const;
  void clear_owner_id();
  static const int kOwnerIdFieldNumber = 9;
  ::google::protobuf::int64 owner_id() const;
  void set_owner_id(::google::protobuf::int64 value);

  // optional int64 doc_id = 10;
  bool has_doc_id() const;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 10;
  ::google::protobuf::int64 doc_id() const;
  void set_doc_id(::google::protobuf::int64 value);

  // optional uint64 timestamp = 11;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 11;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkMusicClick)
 private:
  void set_has_qid();
  void clear_has_qid();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_click_type();
  void clear_has_click_type();
  void set_has_click_position();
  void clear_has_click_position();
  void set_has_query_text();
  void clear_has_query_text();
  void set_has_service_name();
  void clear_has_service_name();
  void set_has_block_name();
  void clear_has_block_name();
  void set_has_platform();
  void clear_has_platform();
  void set_has_owner_id();
  void clear_has_owner_id();
  void set_has_doc_id();
  void clear_has_doc_id();
  void set_has_timestamp();
  void clear_has_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr click_type_;
  ::google::protobuf::internal::ArenaStringPtr query_text_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr block_name_;
  ::google::protobuf::internal::ArenaStringPtr platform_;
  ::google::protobuf::int64 qid_;
  ::google::protobuf::int64 user_id_;
  ::google::protobuf::uint64 click_position_;
  ::google::protobuf::int64 owner_id_;
  ::google::protobuf::int64 doc_id_;
  ::google::protobuf::uint64 timestamp_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkMusicClickOrQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkMusicClickOrQuery) */ {
 public:
  VkMusicClickOrQuery();
  virtual ~VkMusicClickOrQuery();

  VkMusicClickOrQuery(const VkMusicClickOrQuery& from);

  inline VkMusicClickOrQuery& operator=(const VkMusicClickOrQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkMusicClickOrQuery(VkMusicClickOrQuery&& from) noexcept
    : VkMusicClickOrQuery() {
    *this = ::std::move(from);
  }

  inline VkMusicClickOrQuery& operator=(VkMusicClickOrQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkMusicClickOrQuery& default_instance();

  static inline const VkMusicClickOrQuery* internal_default_instance() {
    return reinterpret_cast<const VkMusicClickOrQuery*>(
               &_VkMusicClickOrQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(VkMusicClickOrQuery* other);
  friend void swap(VkMusicClickOrQuery& a, VkMusicClickOrQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkMusicClickOrQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  VkMusicClickOrQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkMusicClickOrQuery& from);
  void MergeFrom(const VkMusicClickOrQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkMusicClickOrQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string query = 2;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 2;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // optional .ru.mail.go.webbase.blobs.VkMusicClick click = 1;
  bool has_click() const;
  void clear_click();
  static const int kClickFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::VkMusicClick& click() const;
  ::ru::mail::go::webbase::blobs::VkMusicClick* mutable_click();
  ::ru::mail::go::webbase::blobs::VkMusicClick* release_click();
  void set_allocated_click(::ru::mail::go::webbase::blobs::VkMusicClick* click);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkMusicClickOrQuery)
 private:
  void set_has_click();
  void clear_has_click();
  void set_has_query();
  void clear_has_query();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::ru::mail::go::webbase::blobs::VkMusicClick* click_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkMusicQueryBlockClicks_Block : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block) */ {
 public:
  VkMusicQueryBlockClicks_Block();
  virtual ~VkMusicQueryBlockClicks_Block();

  VkMusicQueryBlockClicks_Block(const VkMusicQueryBlockClicks_Block& from);

  inline VkMusicQueryBlockClicks_Block& operator=(const VkMusicQueryBlockClicks_Block& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkMusicQueryBlockClicks_Block(VkMusicQueryBlockClicks_Block&& from) noexcept
    : VkMusicQueryBlockClicks_Block() {
    *this = ::std::move(from);
  }

  inline VkMusicQueryBlockClicks_Block& operator=(VkMusicQueryBlockClicks_Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkMusicQueryBlockClicks_Block& default_instance();

  static inline const VkMusicQueryBlockClicks_Block* internal_default_instance() {
    return reinterpret_cast<const VkMusicQueryBlockClicks_Block*>(
               &_VkMusicQueryBlockClicks_Block_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(VkMusicQueryBlockClicks_Block* other);
  friend void swap(VkMusicQueryBlockClicks_Block& a, VkMusicQueryBlockClicks_Block& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkMusicQueryBlockClicks_Block* New() const PROTOBUF_FINAL { return New(NULL); }

  VkMusicQueryBlockClicks_Block* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkMusicQueryBlockClicks_Block& from);
  void MergeFrom(const VkMusicQueryBlockClicks_Block& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkMusicQueryBlockClicks_Block* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint64 clicks = 2;
  bool has_clicks() const;
  void clear_clicks();
  static const int kClicksFieldNumber = 2;
  ::google::protobuf::uint64 clicks() const;
  void set_clicks(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_clicks();
  void clear_has_clicks();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 clicks_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkMusicQueryBlockClicks_Service : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service) */ {
 public:
  VkMusicQueryBlockClicks_Service();
  virtual ~VkMusicQueryBlockClicks_Service();

  VkMusicQueryBlockClicks_Service(const VkMusicQueryBlockClicks_Service& from);

  inline VkMusicQueryBlockClicks_Service& operator=(const VkMusicQueryBlockClicks_Service& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkMusicQueryBlockClicks_Service(VkMusicQueryBlockClicks_Service&& from) noexcept
    : VkMusicQueryBlockClicks_Service() {
    *this = ::std::move(from);
  }

  inline VkMusicQueryBlockClicks_Service& operator=(VkMusicQueryBlockClicks_Service&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkMusicQueryBlockClicks_Service& default_instance();

  static inline const VkMusicQueryBlockClicks_Service* internal_default_instance() {
    return reinterpret_cast<const VkMusicQueryBlockClicks_Service*>(
               &_VkMusicQueryBlockClicks_Service_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(VkMusicQueryBlockClicks_Service* other);
  friend void swap(VkMusicQueryBlockClicks_Service& a, VkMusicQueryBlockClicks_Service& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkMusicQueryBlockClicks_Service* New() const PROTOBUF_FINAL { return New(NULL); }

  VkMusicQueryBlockClicks_Service* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkMusicQueryBlockClicks_Service& from);
  void MergeFrom(const VkMusicQueryBlockClicks_Service& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkMusicQueryBlockClicks_Service* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block blocks = 2;
  int blocks_size() const;
  void clear_blocks();
  static const int kBlocksFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Block& blocks(int index) const;
  ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Block* mutable_blocks(int index);
  ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Block* add_blocks();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Block >*
      mutable_blocks();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Block >&
      blocks() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Block > blocks_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkMusicQueryBlockClicks : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks) */ {
 public:
  VkMusicQueryBlockClicks();
  virtual ~VkMusicQueryBlockClicks();

  VkMusicQueryBlockClicks(const VkMusicQueryBlockClicks& from);

  inline VkMusicQueryBlockClicks& operator=(const VkMusicQueryBlockClicks& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkMusicQueryBlockClicks(VkMusicQueryBlockClicks&& from) noexcept
    : VkMusicQueryBlockClicks() {
    *this = ::std::move(from);
  }

  inline VkMusicQueryBlockClicks& operator=(VkMusicQueryBlockClicks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkMusicQueryBlockClicks& default_instance();

  static inline const VkMusicQueryBlockClicks* internal_default_instance() {
    return reinterpret_cast<const VkMusicQueryBlockClicks*>(
               &_VkMusicQueryBlockClicks_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(VkMusicQueryBlockClicks* other);
  friend void swap(VkMusicQueryBlockClicks& a, VkMusicQueryBlockClicks& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkMusicQueryBlockClicks* New() const PROTOBUF_FINAL { return New(NULL); }

  VkMusicQueryBlockClicks* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkMusicQueryBlockClicks& from);
  void MergeFrom(const VkMusicQueryBlockClicks& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkMusicQueryBlockClicks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VkMusicQueryBlockClicks_Block Block;
  typedef VkMusicQueryBlockClicks_Service Service;

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service services = 2;
  int services_size() const;
  void clear_services();
  static const int kServicesFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Service& services(int index) const;
  ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Service* mutable_services(int index);
  ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Service* add_services();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Service >*
      mutable_services();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Service >&
      services() const;

  // optional string query_text = 1;
  bool has_query_text() const;
  void clear_query_text();
  static const int kQueryTextFieldNumber = 1;
  const ::std::string& query_text() const;
  void set_query_text(const ::std::string& value);
  #if LANG_CXX11
  void set_query_text(::std::string&& value);
  #endif
  void set_query_text(const char* value);
  void set_query_text(const char* value, size_t size);
  ::std::string* mutable_query_text();
  ::std::string* release_query_text();
  void set_allocated_query_text(::std::string* query_text);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks)
 private:
  void set_has_query_text();
  void clear_has_query_text();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Service > services_;
  ::google::protobuf::internal::ArenaStringPtr query_text_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkMusicFrontendExtradata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata) */ {
 public:
  VkMusicFrontendExtradata();
  virtual ~VkMusicFrontendExtradata();

  VkMusicFrontendExtradata(const VkMusicFrontendExtradata& from);

  inline VkMusicFrontendExtradata& operator=(const VkMusicFrontendExtradata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkMusicFrontendExtradata(VkMusicFrontendExtradata&& from) noexcept
    : VkMusicFrontendExtradata() {
    *this = ::std::move(from);
  }

  inline VkMusicFrontendExtradata& operator=(VkMusicFrontendExtradata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkMusicFrontendExtradata& default_instance();

  static inline const VkMusicFrontendExtradata* internal_default_instance() {
    return reinterpret_cast<const VkMusicFrontendExtradata*>(
               &_VkMusicFrontendExtradata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(VkMusicFrontendExtradata* other);
  friend void swap(VkMusicFrontendExtradata& a, VkMusicFrontendExtradata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkMusicFrontendExtradata* New() const PROTOBUF_FINAL { return New(NULL); }

  VkMusicFrontendExtradata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkMusicFrontendExtradata& from);
  void MergeFrom(const VkMusicFrontendExtradata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkMusicFrontendExtradata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 orig_pos = 1;
  bool has_orig_pos() const;
  void clear_orig_pos();
  static const int kOrigPosFieldNumber = 1;
  ::google::protobuf::uint32 orig_pos() const;
  void set_orig_pos(::google::protobuf::uint32 value);

  // optional uint32 fixed_pos = 2;
  bool has_fixed_pos() const;
  void clear_fixed_pos();
  static const int kFixedPosFieldNumber = 2;
  ::google::protobuf::uint32 fixed_pos() const;
  void set_fixed_pos(::google::protobuf::uint32 value);

  // optional bool orig_turn = 3;
  bool has_orig_turn() const;
  void clear_orig_turn();
  static const int kOrigTurnFieldNumber = 3;
  bool orig_turn() const;
  void set_orig_turn(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata)
 private:
  void set_has_orig_pos();
  void clear_has_orig_pos();
  void set_has_fixed_pos();
  void clear_has_fixed_pos();
  void set_has_orig_turn();
  void clear_has_orig_turn();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 orig_pos_;
  ::google::protobuf::uint32 fixed_pos_;
  bool orig_turn_;
  friend struct protobuf_vk_5fmusic_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VkMusicTrack

// required int64 owner_id = 1;
inline bool VkMusicTrack::has_owner_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VkMusicTrack::set_has_owner_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VkMusicTrack::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VkMusicTrack::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
  clear_has_owner_id();
}
inline ::google::protobuf::int64 VkMusicTrack::owner_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.owner_id)
  return owner_id_;
}
inline void VkMusicTrack::set_owner_id(::google::protobuf::int64 value) {
  set_has_owner_id();
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.owner_id)
}

// required int64 audio_id = 2;
inline bool VkMusicTrack::has_audio_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VkMusicTrack::set_has_audio_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VkMusicTrack::clear_has_audio_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VkMusicTrack::clear_audio_id() {
  audio_id_ = GOOGLE_LONGLONG(0);
  clear_has_audio_id();
}
inline ::google::protobuf::int64 VkMusicTrack::audio_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.audio_id)
  return audio_id_;
}
inline void VkMusicTrack::set_audio_id(::google::protobuf::int64 value) {
  set_has_audio_id();
  audio_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.audio_id)
}

// optional string title = 3;
inline bool VkMusicTrack::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkMusicTrack::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkMusicTrack::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkMusicTrack::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& VkMusicTrack::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.title)
  return title_.GetNoArena();
}
inline void VkMusicTrack::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.title)
}
#if LANG_CXX11
inline void VkMusicTrack::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicTrack.title)
}
#endif
inline void VkMusicTrack::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.title)
}
inline void VkMusicTrack::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.title)
}
inline ::std::string* VkMusicTrack::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicTrack::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrack.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicTrack::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrack.title)
}

// optional string performer = 4;
inline bool VkMusicTrack::has_performer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkMusicTrack::set_has_performer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkMusicTrack::clear_has_performer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkMusicTrack::clear_performer() {
  performer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_performer();
}
inline const ::std::string& VkMusicTrack::performer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.performer)
  return performer_.GetNoArena();
}
inline void VkMusicTrack::set_performer(const ::std::string& value) {
  set_has_performer();
  performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.performer)
}
#if LANG_CXX11
inline void VkMusicTrack::set_performer(::std::string&& value) {
  set_has_performer();
  performer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicTrack.performer)
}
#endif
inline void VkMusicTrack::set_performer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_performer();
  performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.performer)
}
inline void VkMusicTrack::set_performer(const char* value, size_t size) {
  set_has_performer();
  performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.performer)
}
inline ::std::string* VkMusicTrack::mutable_performer() {
  set_has_performer();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.performer)
  return performer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicTrack::release_performer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrack.performer)
  clear_has_performer();
  return performer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicTrack::set_allocated_performer(::std::string* performer) {
  if (performer != NULL) {
    set_has_performer();
  } else {
    clear_has_performer();
  }
  performer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), performer);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrack.performer)
}

// repeated string tags = 5;
inline int VkMusicTrack::tags_size() const {
  return tags_.size();
}
inline void VkMusicTrack::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& VkMusicTrack::tags(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
  return tags_.Get(index);
}
inline ::std::string* VkMusicTrack::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
  return tags_.Mutable(index);
}
inline void VkMusicTrack::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VkMusicTrack::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VkMusicTrack::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
}
inline void VkMusicTrack::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
}
inline ::std::string* VkMusicTrack::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
  return tags_.Add();
}
inline void VkMusicTrack::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
}
#if LANG_CXX11
inline void VkMusicTrack::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
}
#endif
inline void VkMusicTrack::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
}
inline void VkMusicTrack::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkMusicTrack::tags() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VkMusicTrack::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
  return &tags_;
}

// optional int32 duration = 6;
inline bool VkMusicTrack::has_duration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VkMusicTrack::set_has_duration() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VkMusicTrack::clear_has_duration() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VkMusicTrack::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 VkMusicTrack::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.duration)
  return duration_;
}
inline void VkMusicTrack::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.duration)
}

// optional int32 added = 7;
inline bool VkMusicTrack::has_added() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VkMusicTrack::set_has_added() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VkMusicTrack::clear_has_added() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VkMusicTrack::clear_added() {
  added_ = 0;
  clear_has_added();
}
inline ::google::protobuf::int32 VkMusicTrack::added() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.added)
  return added_;
}
inline void VkMusicTrack::set_added(::google::protobuf::int32 value) {
  set_has_added();
  added_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.added)
}

// optional int32 genre = 8;
inline bool VkMusicTrack::has_genre() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VkMusicTrack::set_has_genre() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VkMusicTrack::clear_has_genre() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VkMusicTrack::clear_genre() {
  genre_ = 0;
  clear_has_genre();
}
inline ::google::protobuf::int32 VkMusicTrack::genre() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.genre)
  return genre_;
}
inline void VkMusicTrack::set_genre(::google::protobuf::int32 value) {
  set_has_genre();
  genre_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.genre)
}

// optional int32 bitrate = 9;
inline bool VkMusicTrack::has_bitrate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VkMusicTrack::set_has_bitrate() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VkMusicTrack::clear_has_bitrate() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VkMusicTrack::clear_bitrate() {
  bitrate_ = 0;
  clear_has_bitrate();
}
inline ::google::protobuf::int32 VkMusicTrack::bitrate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.bitrate)
  return bitrate_;
}
inline void VkMusicTrack::set_bitrate(::google::protobuf::int32 value) {
  set_has_bitrate();
  bitrate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.bitrate)
}

// optional bool lyrics = 10;
inline bool VkMusicTrack::has_lyrics() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void VkMusicTrack::set_has_lyrics() {
  _has_bits_[0] |= 0x08000000u;
}
inline void VkMusicTrack::clear_has_lyrics() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void VkMusicTrack::clear_lyrics() {
  lyrics_ = false;
  clear_has_lyrics();
}
inline bool VkMusicTrack::lyrics() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.lyrics)
  return lyrics_;
}
inline void VkMusicTrack::set_lyrics(bool value) {
  set_has_lyrics();
  lyrics_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.lyrics)
}

// optional bool official = 11;
inline bool VkMusicTrack::has_official() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void VkMusicTrack::set_has_official() {
  _has_bits_[0] |= 0x10000000u;
}
inline void VkMusicTrack::clear_has_official() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void VkMusicTrack::clear_official() {
  official_ = false;
  clear_has_official();
}
inline bool VkMusicTrack::official() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.official)
  return official_;
}
inline void VkMusicTrack::set_official(bool value) {
  set_has_official();
  official_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.official)
}

// required string hash = 12;
inline bool VkMusicTrack::has_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VkMusicTrack::set_has_hash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VkMusicTrack::clear_has_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VkMusicTrack::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
inline const ::std::string& VkMusicTrack::hash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.hash)
  return hash_.GetNoArena();
}
inline void VkMusicTrack::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.hash)
}
#if LANG_CXX11
inline void VkMusicTrack::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicTrack.hash)
}
#endif
inline void VkMusicTrack::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.hash)
}
inline void VkMusicTrack::set_hash(const char* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.hash)
}
inline ::std::string* VkMusicTrack::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicTrack::release_hash() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrack.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicTrack::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrack.hash)
}

// required int64 timestamp = 13;
inline bool VkMusicTrack::has_timestamp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VkMusicTrack::set_has_timestamp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void VkMusicTrack::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void VkMusicTrack::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 VkMusicTrack::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.timestamp)
  return timestamp_;
}
inline void VkMusicTrack::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.timestamp)
}

// optional int64 times_listened = 14;
inline bool VkMusicTrack::has_times_listened() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VkMusicTrack::set_has_times_listened() {
  _has_bits_[0] |= 0x00008000u;
}
inline void VkMusicTrack::clear_has_times_listened() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void VkMusicTrack::clear_times_listened() {
  times_listened_ = GOOGLE_LONGLONG(0);
  clear_has_times_listened();
}
inline ::google::protobuf::int64 VkMusicTrack::times_listened() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.times_listened)
  return times_listened_;
}
inline void VkMusicTrack::set_times_listened(::google::protobuf::int64 value) {
  set_has_times_listened();
  times_listened_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.times_listened)
}

// repeated string extra_names = 15;
inline int VkMusicTrack::extra_names_size() const {
  return extra_names_.size();
}
inline void VkMusicTrack::clear_extra_names() {
  extra_names_.Clear();
}
inline const ::std::string& VkMusicTrack::extra_names(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
  return extra_names_.Get(index);
}
inline ::std::string* VkMusicTrack::mutable_extra_names(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
  return extra_names_.Mutable(index);
}
inline void VkMusicTrack::set_extra_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
  extra_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VkMusicTrack::set_extra_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
  extra_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VkMusicTrack::set_extra_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  extra_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
}
inline void VkMusicTrack::set_extra_names(int index, const char* value, size_t size) {
  extra_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
}
inline ::std::string* VkMusicTrack::add_extra_names() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
  return extra_names_.Add();
}
inline void VkMusicTrack::add_extra_names(const ::std::string& value) {
  extra_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
}
#if LANG_CXX11
inline void VkMusicTrack::add_extra_names(::std::string&& value) {
  extra_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
}
#endif
inline void VkMusicTrack::add_extra_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  extra_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
}
inline void VkMusicTrack::add_extra_names(const char* value, size_t size) {
  extra_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkMusicTrack::extra_names() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
  return extra_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VkMusicTrack::mutable_extra_names() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
  return &extra_names_;
}

// optional bool deleted = 16;
inline bool VkMusicTrack::has_deleted() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void VkMusicTrack::set_has_deleted() {
  _has_bits_[0] |= 0x20000000u;
}
inline void VkMusicTrack::clear_has_deleted() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void VkMusicTrack::clear_deleted() {
  deleted_ = false;
  clear_has_deleted();
}
inline bool VkMusicTrack::deleted() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.deleted)
  return deleted_;
}
inline void VkMusicTrack::set_deleted(bool value) {
  set_has_deleted();
  deleted_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.deleted)
}

// optional int64 copy_owner_id = 17;
inline bool VkMusicTrack::has_copy_owner_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void VkMusicTrack::set_has_copy_owner_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void VkMusicTrack::clear_has_copy_owner_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void VkMusicTrack::clear_copy_owner_id() {
  copy_owner_id_ = GOOGLE_LONGLONG(0);
  clear_has_copy_owner_id();
}
inline ::google::protobuf::int64 VkMusicTrack::copy_owner_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.copy_owner_id)
  return copy_owner_id_;
}
inline void VkMusicTrack::set_copy_owner_id(::google::protobuf::int64 value) {
  set_has_copy_owner_id();
  copy_owner_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.copy_owner_id)
}

// optional int64 copy_audio_id = 18;
inline bool VkMusicTrack::has_copy_audio_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void VkMusicTrack::set_has_copy_audio_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void VkMusicTrack::clear_has_copy_audio_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void VkMusicTrack::clear_copy_audio_id() {
  copy_audio_id_ = GOOGLE_LONGLONG(0);
  clear_has_copy_audio_id();
}
inline ::google::protobuf::int64 VkMusicTrack::copy_audio_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.copy_audio_id)
  return copy_audio_id_;
}
inline void VkMusicTrack::set_copy_audio_id(::google::protobuf::int64 value) {
  set_has_copy_audio_id();
  copy_audio_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.copy_audio_id)
}

// optional int64 hashgroup_size = 19;
inline bool VkMusicTrack::has_hashgroup_size() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void VkMusicTrack::set_has_hashgroup_size() {
  _has_bits_[0] |= 0x00040000u;
}
inline void VkMusicTrack::clear_has_hashgroup_size() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void VkMusicTrack::clear_hashgroup_size() {
  hashgroup_size_ = GOOGLE_LONGLONG(0);
  clear_has_hashgroup_size();
}
inline ::google::protobuf::int64 VkMusicTrack::hashgroup_size() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.hashgroup_size)
  return hashgroup_size_;
}
inline void VkMusicTrack::set_hashgroup_size(::google::protobuf::int64 value) {
  set_has_hashgroup_size();
  hashgroup_size_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.hashgroup_size)
}

// optional int64 crcgroup_size = 20;
inline bool VkMusicTrack::has_crcgroup_size() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void VkMusicTrack::set_has_crcgroup_size() {
  _has_bits_[0] |= 0x00080000u;
}
inline void VkMusicTrack::clear_has_crcgroup_size() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void VkMusicTrack::clear_crcgroup_size() {
  crcgroup_size_ = GOOGLE_LONGLONG(0);
  clear_has_crcgroup_size();
}
inline ::google::protobuf::int64 VkMusicTrack::crcgroup_size() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.crcgroup_size)
  return crcgroup_size_;
}
inline void VkMusicTrack::set_crcgroup_size(::google::protobuf::int64 value) {
  set_has_crcgroup_size();
  crcgroup_size_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.crcgroup_size)
}

// optional int64 times_listened_last_month = 21;
inline bool VkMusicTrack::has_times_listened_last_month() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void VkMusicTrack::set_has_times_listened_last_month() {
  _has_bits_[0] |= 0x00100000u;
}
inline void VkMusicTrack::clear_has_times_listened_last_month() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void VkMusicTrack::clear_times_listened_last_month() {
  times_listened_last_month_ = GOOGLE_LONGLONG(0);
  clear_has_times_listened_last_month();
}
inline ::google::protobuf::int64 VkMusicTrack::times_listened_last_month() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.times_listened_last_month)
  return times_listened_last_month_;
}
inline void VkMusicTrack::set_times_listened_last_month(::google::protobuf::int64 value) {
  set_has_times_listened_last_month();
  times_listened_last_month_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.times_listened_last_month)
}

// optional int64 times_listened_last_week = 22;
inline bool VkMusicTrack::has_times_listened_last_week() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void VkMusicTrack::set_has_times_listened_last_week() {
  _has_bits_[0] |= 0x00200000u;
}
inline void VkMusicTrack::clear_has_times_listened_last_week() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void VkMusicTrack::clear_times_listened_last_week() {
  times_listened_last_week_ = GOOGLE_LONGLONG(0);
  clear_has_times_listened_last_week();
}
inline ::google::protobuf::int64 VkMusicTrack::times_listened_last_week() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.times_listened_last_week)
  return times_listened_last_week_;
}
inline void VkMusicTrack::set_times_listened_last_week(::google::protobuf::int64 value) {
  set_has_times_listened_last_week();
  times_listened_last_week_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.times_listened_last_week)
}

// repeated string extra_performer_names = 23;
inline int VkMusicTrack::extra_performer_names_size() const {
  return extra_performer_names_.size();
}
inline void VkMusicTrack::clear_extra_performer_names() {
  extra_performer_names_.Clear();
}
inline const ::std::string& VkMusicTrack::extra_performer_names(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
  return extra_performer_names_.Get(index);
}
inline ::std::string* VkMusicTrack::mutable_extra_performer_names(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
  return extra_performer_names_.Mutable(index);
}
inline void VkMusicTrack::set_extra_performer_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
  extra_performer_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VkMusicTrack::set_extra_performer_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
  extra_performer_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VkMusicTrack::set_extra_performer_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  extra_performer_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
}
inline void VkMusicTrack::set_extra_performer_names(int index, const char* value, size_t size) {
  extra_performer_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
}
inline ::std::string* VkMusicTrack::add_extra_performer_names() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
  return extra_performer_names_.Add();
}
inline void VkMusicTrack::add_extra_performer_names(const ::std::string& value) {
  extra_performer_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
}
#if LANG_CXX11
inline void VkMusicTrack::add_extra_performer_names(::std::string&& value) {
  extra_performer_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
}
#endif
inline void VkMusicTrack::add_extra_performer_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  extra_performer_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
}
inline void VkMusicTrack::add_extra_performer_names(const char* value, size_t size) {
  extra_performer_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkMusicTrack::extra_performer_names() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
  return extra_performer_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VkMusicTrack::mutable_extra_performer_names() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
  return &extra_performer_names_;
}

// repeated string extra_title_names = 24;
inline int VkMusicTrack::extra_title_names_size() const {
  return extra_title_names_.size();
}
inline void VkMusicTrack::clear_extra_title_names() {
  extra_title_names_.Clear();
}
inline const ::std::string& VkMusicTrack::extra_title_names(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
  return extra_title_names_.Get(index);
}
inline ::std::string* VkMusicTrack::mutable_extra_title_names(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
  return extra_title_names_.Mutable(index);
}
inline void VkMusicTrack::set_extra_title_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
  extra_title_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VkMusicTrack::set_extra_title_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
  extra_title_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VkMusicTrack::set_extra_title_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  extra_title_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
}
inline void VkMusicTrack::set_extra_title_names(int index, const char* value, size_t size) {
  extra_title_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
}
inline ::std::string* VkMusicTrack::add_extra_title_names() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
  return extra_title_names_.Add();
}
inline void VkMusicTrack::add_extra_title_names(const ::std::string& value) {
  extra_title_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
}
#if LANG_CXX11
inline void VkMusicTrack::add_extra_title_names(::std::string&& value) {
  extra_title_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
}
#endif
inline void VkMusicTrack::add_extra_title_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  extra_title_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
}
inline void VkMusicTrack::add_extra_title_names(const char* value, size_t size) {
  extra_title_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkMusicTrack::extra_title_names() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
  return extra_title_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VkMusicTrack::mutable_extra_title_names() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
  return &extra_title_names_;
}

// optional int64 global_crcgroup_size = 25;
inline bool VkMusicTrack::has_global_crcgroup_size() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void VkMusicTrack::set_has_global_crcgroup_size() {
  _has_bits_[0] |= 0x00400000u;
}
inline void VkMusicTrack::clear_has_global_crcgroup_size() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void VkMusicTrack::clear_global_crcgroup_size() {
  global_crcgroup_size_ = GOOGLE_LONGLONG(0);
  clear_has_global_crcgroup_size();
}
inline ::google::protobuf::int64 VkMusicTrack::global_crcgroup_size() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.global_crcgroup_size)
  return global_crcgroup_size_;
}
inline void VkMusicTrack::set_global_crcgroup_size(::google::protobuf::int64 value) {
  set_has_global_crcgroup_size();
  global_crcgroup_size_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.global_crcgroup_size)
}

// optional int64 global_times_listened = 26;
inline bool VkMusicTrack::has_global_times_listened() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void VkMusicTrack::set_has_global_times_listened() {
  _has_bits_[0] |= 0x00800000u;
}
inline void VkMusicTrack::clear_has_global_times_listened() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void VkMusicTrack::clear_global_times_listened() {
  global_times_listened_ = GOOGLE_LONGLONG(0);
  clear_has_global_times_listened();
}
inline ::google::protobuf::int64 VkMusicTrack::global_times_listened() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.global_times_listened)
  return global_times_listened_;
}
inline void VkMusicTrack::set_global_times_listened(::google::protobuf::int64 value) {
  set_has_global_times_listened();
  global_times_listened_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.global_times_listened)
}

// optional int64 global_times_listened_last_month = 27;
inline bool VkMusicTrack::has_global_times_listened_last_month() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void VkMusicTrack::set_has_global_times_listened_last_month() {
  _has_bits_[0] |= 0x01000000u;
}
inline void VkMusicTrack::clear_has_global_times_listened_last_month() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void VkMusicTrack::clear_global_times_listened_last_month() {
  global_times_listened_last_month_ = GOOGLE_LONGLONG(0);
  clear_has_global_times_listened_last_month();
}
inline ::google::protobuf::int64 VkMusicTrack::global_times_listened_last_month() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.global_times_listened_last_month)
  return global_times_listened_last_month_;
}
inline void VkMusicTrack::set_global_times_listened_last_month(::google::protobuf::int64 value) {
  set_has_global_times_listened_last_month();
  global_times_listened_last_month_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.global_times_listened_last_month)
}

// optional int64 global_times_listened_last_week = 28;
inline bool VkMusicTrack::has_global_times_listened_last_week() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void VkMusicTrack::set_has_global_times_listened_last_week() {
  _has_bits_[0] |= 0x02000000u;
}
inline void VkMusicTrack::clear_has_global_times_listened_last_week() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void VkMusicTrack::clear_global_times_listened_last_week() {
  global_times_listened_last_week_ = GOOGLE_LONGLONG(0);
  clear_has_global_times_listened_last_week();
}
inline ::google::protobuf::int64 VkMusicTrack::global_times_listened_last_week() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.global_times_listened_last_week)
  return global_times_listened_last_week_;
}
inline void VkMusicTrack::set_global_times_listened_last_week(::google::protobuf::int64 value) {
  set_has_global_times_listened_last_week();
  global_times_listened_last_week_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.global_times_listened_last_week)
}

// optional int64 uma_release_id = 29;
inline bool VkMusicTrack::has_uma_release_id() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void VkMusicTrack::set_has_uma_release_id() {
  _has_bits_[0] |= 0x04000000u;
}
inline void VkMusicTrack::clear_has_uma_release_id() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void VkMusicTrack::clear_uma_release_id() {
  uma_release_id_ = GOOGLE_LONGLONG(0);
  clear_has_uma_release_id();
}
inline ::google::protobuf::int64 VkMusicTrack::uma_release_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.uma_release_id)
  return uma_release_id_;
}
inline void VkMusicTrack::set_uma_release_id(::google::protobuf::int64 value) {
  set_has_uma_release_id();
  uma_release_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.uma_release_id)
}

// repeated string alternative_track_ids = 30;
inline int VkMusicTrack::alternative_track_ids_size() const {
  return alternative_track_ids_.size();
}
inline void VkMusicTrack::clear_alternative_track_ids() {
  alternative_track_ids_.Clear();
}
inline const ::std::string& VkMusicTrack::alternative_track_ids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
  return alternative_track_ids_.Get(index);
}
inline ::std::string* VkMusicTrack::mutable_alternative_track_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
  return alternative_track_ids_.Mutable(index);
}
inline void VkMusicTrack::set_alternative_track_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
  alternative_track_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VkMusicTrack::set_alternative_track_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
  alternative_track_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VkMusicTrack::set_alternative_track_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  alternative_track_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
}
inline void VkMusicTrack::set_alternative_track_ids(int index, const char* value, size_t size) {
  alternative_track_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
}
inline ::std::string* VkMusicTrack::add_alternative_track_ids() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
  return alternative_track_ids_.Add();
}
inline void VkMusicTrack::add_alternative_track_ids(const ::std::string& value) {
  alternative_track_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
}
#if LANG_CXX11
inline void VkMusicTrack::add_alternative_track_ids(::std::string&& value) {
  alternative_track_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
}
#endif
inline void VkMusicTrack::add_alternative_track_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  alternative_track_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
}
inline void VkMusicTrack::add_alternative_track_ids(const char* value, size_t size) {
  alternative_track_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkMusicTrack::alternative_track_ids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
  return alternative_track_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VkMusicTrack::mutable_alternative_track_ids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
  return &alternative_track_ids_;
}

// optional int64 track_id = 31;
inline bool VkMusicTrack::has_track_id() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void VkMusicTrack::set_has_track_id() {
  _has_bits_[1] |= 0x00000004u;
}
inline void VkMusicTrack::clear_has_track_id() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void VkMusicTrack::clear_track_id() {
  track_id_ = GOOGLE_LONGLONG(0);
  clear_has_track_id();
}
inline ::google::protobuf::int64 VkMusicTrack::track_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.track_id)
  return track_id_;
}
inline void VkMusicTrack::set_track_id(::google::protobuf::int64 value) {
  set_has_track_id();
  track_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.track_id)
}

// optional int64 cluster_id = 32;
inline bool VkMusicTrack::has_cluster_id() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void VkMusicTrack::set_has_cluster_id() {
  _has_bits_[1] |= 0x00000008u;
}
inline void VkMusicTrack::clear_has_cluster_id() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void VkMusicTrack::clear_cluster_id() {
  cluster_id_ = GOOGLE_LONGLONG(0);
  clear_has_cluster_id();
}
inline ::google::protobuf::int64 VkMusicTrack::cluster_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.cluster_id)
  return cluster_id_;
}
inline void VkMusicTrack::set_cluster_id(::google::protobuf::int64 value) {
  set_has_cluster_id();
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.cluster_id)
}

// optional string subtitle = 33;
inline bool VkMusicTrack::has_subtitle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VkMusicTrack::set_has_subtitle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VkMusicTrack::clear_has_subtitle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VkMusicTrack::clear_subtitle() {
  subtitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subtitle();
}
inline const ::std::string& VkMusicTrack::subtitle() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.subtitle)
  return subtitle_.GetNoArena();
}
inline void VkMusicTrack::set_subtitle(const ::std::string& value) {
  set_has_subtitle();
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.subtitle)
}
#if LANG_CXX11
inline void VkMusicTrack::set_subtitle(::std::string&& value) {
  set_has_subtitle();
  subtitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicTrack.subtitle)
}
#endif
inline void VkMusicTrack::set_subtitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_subtitle();
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.subtitle)
}
inline void VkMusicTrack::set_subtitle(const char* value, size_t size) {
  set_has_subtitle();
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.subtitle)
}
inline ::std::string* VkMusicTrack::mutable_subtitle() {
  set_has_subtitle();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.subtitle)
  return subtitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicTrack::release_subtitle() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrack.subtitle)
  clear_has_subtitle();
  return subtitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicTrack::set_allocated_subtitle(::std::string* subtitle) {
  if (subtitle != NULL) {
    set_has_subtitle();
  } else {
    clear_has_subtitle();
  }
  subtitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subtitle);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrack.subtitle)
}

// optional int64 source_owner_id = 34;
inline bool VkMusicTrack::has_source_owner_id() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void VkMusicTrack::set_has_source_owner_id() {
  _has_bits_[1] |= 0x00000010u;
}
inline void VkMusicTrack::clear_has_source_owner_id() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void VkMusicTrack::clear_source_owner_id() {
  source_owner_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_owner_id();
}
inline ::google::protobuf::int64 VkMusicTrack::source_owner_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.source_owner_id)
  return source_owner_id_;
}
inline void VkMusicTrack::set_source_owner_id(::google::protobuf::int64 value) {
  set_has_source_owner_id();
  source_owner_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.source_owner_id)
}

// optional int64 source_audio_id = 35;
inline bool VkMusicTrack::has_source_audio_id() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void VkMusicTrack::set_has_source_audio_id() {
  _has_bits_[1] |= 0x00000020u;
}
inline void VkMusicTrack::clear_has_source_audio_id() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void VkMusicTrack::clear_source_audio_id() {
  source_audio_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_audio_id();
}
inline ::google::protobuf::int64 VkMusicTrack::source_audio_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.source_audio_id)
  return source_audio_id_;
}
inline void VkMusicTrack::set_source_audio_id(::google::protobuf::int64 value) {
  set_has_source_audio_id();
  source_audio_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.source_audio_id)
}

// optional int64 timestamp_ms = 36;
inline bool VkMusicTrack::has_timestamp_ms() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void VkMusicTrack::set_has_timestamp_ms() {
  _has_bits_[1] |= 0x00000040u;
}
inline void VkMusicTrack::clear_has_timestamp_ms() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void VkMusicTrack::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 VkMusicTrack::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.timestamp_ms)
  return timestamp_ms_;
}
inline void VkMusicTrack::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.timestamp_ms)
}

// optional bool from_offline_index = 37;
inline bool VkMusicTrack::has_from_offline_index() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void VkMusicTrack::set_has_from_offline_index() {
  _has_bits_[0] |= 0x40000000u;
}
inline void VkMusicTrack::clear_has_from_offline_index() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void VkMusicTrack::clear_from_offline_index() {
  from_offline_index_ = false;
  clear_has_from_offline_index();
}
inline bool VkMusicTrack::from_offline_index() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.from_offline_index)
  return from_offline_index_;
}
inline void VkMusicTrack::set_from_offline_index(bool value) {
  set_has_from_offline_index();
  from_offline_index_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.from_offline_index)
}

// optional string title_alternatives = 38;
inline bool VkMusicTrack::has_title_alternatives() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VkMusicTrack::set_has_title_alternatives() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VkMusicTrack::clear_has_title_alternatives() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VkMusicTrack::clear_title_alternatives() {
  title_alternatives_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title_alternatives();
}
inline const ::std::string& VkMusicTrack::title_alternatives() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.title_alternatives)
  return title_alternatives_.GetNoArena();
}
inline void VkMusicTrack::set_title_alternatives(const ::std::string& value) {
  set_has_title_alternatives();
  title_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.title_alternatives)
}
#if LANG_CXX11
inline void VkMusicTrack::set_title_alternatives(::std::string&& value) {
  set_has_title_alternatives();
  title_alternatives_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicTrack.title_alternatives)
}
#endif
inline void VkMusicTrack::set_title_alternatives(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title_alternatives();
  title_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.title_alternatives)
}
inline void VkMusicTrack::set_title_alternatives(const char* value, size_t size) {
  set_has_title_alternatives();
  title_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.title_alternatives)
}
inline ::std::string* VkMusicTrack::mutable_title_alternatives() {
  set_has_title_alternatives();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.title_alternatives)
  return title_alternatives_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicTrack::release_title_alternatives() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrack.title_alternatives)
  clear_has_title_alternatives();
  return title_alternatives_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicTrack::set_allocated_title_alternatives(::std::string* title_alternatives) {
  if (title_alternatives != NULL) {
    set_has_title_alternatives();
  } else {
    clear_has_title_alternatives();
  }
  title_alternatives_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title_alternatives);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrack.title_alternatives)
}

// optional string performer_alternatives = 39;
inline bool VkMusicTrack::has_performer_alternatives() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VkMusicTrack::set_has_performer_alternatives() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VkMusicTrack::clear_has_performer_alternatives() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VkMusicTrack::clear_performer_alternatives() {
  performer_alternatives_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_performer_alternatives();
}
inline const ::std::string& VkMusicTrack::performer_alternatives() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.performer_alternatives)
  return performer_alternatives_.GetNoArena();
}
inline void VkMusicTrack::set_performer_alternatives(const ::std::string& value) {
  set_has_performer_alternatives();
  performer_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.performer_alternatives)
}
#if LANG_CXX11
inline void VkMusicTrack::set_performer_alternatives(::std::string&& value) {
  set_has_performer_alternatives();
  performer_alternatives_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicTrack.performer_alternatives)
}
#endif
inline void VkMusicTrack::set_performer_alternatives(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_performer_alternatives();
  performer_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.performer_alternatives)
}
inline void VkMusicTrack::set_performer_alternatives(const char* value, size_t size) {
  set_has_performer_alternatives();
  performer_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.performer_alternatives)
}
inline ::std::string* VkMusicTrack::mutable_performer_alternatives() {
  set_has_performer_alternatives();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.performer_alternatives)
  return performer_alternatives_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicTrack::release_performer_alternatives() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrack.performer_alternatives)
  clear_has_performer_alternatives();
  return performer_alternatives_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicTrack::set_allocated_performer_alternatives(::std::string* performer_alternatives) {
  if (performer_alternatives != NULL) {
    set_has_performer_alternatives();
  } else {
    clear_has_performer_alternatives();
  }
  performer_alternatives_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), performer_alternatives);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrack.performer_alternatives)
}

// optional .ru.mail.go.webbase.blobs.VkMusicLyrics uma_lyrics = 40;
inline bool VkMusicTrack::has_uma_lyrics() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VkMusicTrack::set_has_uma_lyrics() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VkMusicTrack::clear_has_uma_lyrics() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VkMusicTrack::clear_uma_lyrics() {
  if (uma_lyrics_ != NULL) uma_lyrics_->::ru::mail::go::webbase::blobs::VkMusicLyrics::Clear();
  clear_has_uma_lyrics();
}
inline const ::ru::mail::go::webbase::blobs::VkMusicLyrics& VkMusicTrack::uma_lyrics() const {
  const ::ru::mail::go::webbase::blobs::VkMusicLyrics* p = uma_lyrics_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.uma_lyrics)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicLyrics*>(
      &::ru::mail::go::webbase::blobs::_VkMusicLyrics_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VkMusicLyrics* VkMusicTrack::mutable_uma_lyrics() {
  set_has_uma_lyrics();
  if (uma_lyrics_ == NULL) {
    uma_lyrics_ = new ::ru::mail::go::webbase::blobs::VkMusicLyrics;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.uma_lyrics)
  return uma_lyrics_;
}
inline ::ru::mail::go::webbase::blobs::VkMusicLyrics* VkMusicTrack::release_uma_lyrics() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrack.uma_lyrics)
  clear_has_uma_lyrics();
  ::ru::mail::go::webbase::blobs::VkMusicLyrics* temp = uma_lyrics_;
  uma_lyrics_ = NULL;
  return temp;
}
inline void VkMusicTrack::set_allocated_uma_lyrics(::ru::mail::go::webbase::blobs::VkMusicLyrics* uma_lyrics) {
  delete uma_lyrics_;
  uma_lyrics_ = uma_lyrics;
  if (uma_lyrics) {
    set_has_uma_lyrics();
  } else {
    clear_has_uma_lyrics();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrack.uma_lyrics)
}

// optional int64 album_release_ts = 41;
inline bool VkMusicTrack::has_album_release_ts() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void VkMusicTrack::set_has_album_release_ts() {
  _has_bits_[1] |= 0x00000080u;
}
inline void VkMusicTrack::clear_has_album_release_ts() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void VkMusicTrack::clear_album_release_ts() {
  album_release_ts_ = GOOGLE_LONGLONG(0);
  clear_has_album_release_ts();
}
inline ::google::protobuf::int64 VkMusicTrack::album_release_ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.album_release_ts)
  return album_release_ts_;
}
inline void VkMusicTrack::set_album_release_ts(::google::protobuf::int64 value) {
  set_has_album_release_ts();
  album_release_ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.album_release_ts)
}

// optional int64 rightholder_id = 42;
inline bool VkMusicTrack::has_rightholder_id() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void VkMusicTrack::set_has_rightholder_id() {
  _has_bits_[1] |= 0x00000100u;
}
inline void VkMusicTrack::clear_has_rightholder_id() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void VkMusicTrack::clear_rightholder_id() {
  rightholder_id_ = GOOGLE_LONGLONG(0);
  clear_has_rightholder_id();
}
inline ::google::protobuf::int64 VkMusicTrack::rightholder_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_id)
  return rightholder_id_;
}
inline void VkMusicTrack::set_rightholder_id(::google::protobuf::int64 value) {
  set_has_rightholder_id();
  rightholder_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_id)
}

// optional string rightholder_name = 43;
inline bool VkMusicTrack::has_rightholder_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VkMusicTrack::set_has_rightholder_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VkMusicTrack::clear_has_rightholder_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VkMusicTrack::clear_rightholder_name() {
  rightholder_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rightholder_name();
}
inline const ::std::string& VkMusicTrack::rightholder_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_name)
  return rightholder_name_.GetNoArena();
}
inline void VkMusicTrack::set_rightholder_name(const ::std::string& value) {
  set_has_rightholder_name();
  rightholder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_name)
}
#if LANG_CXX11
inline void VkMusicTrack::set_rightholder_name(::std::string&& value) {
  set_has_rightholder_name();
  rightholder_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_name)
}
#endif
inline void VkMusicTrack::set_rightholder_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rightholder_name();
  rightholder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_name)
}
inline void VkMusicTrack::set_rightholder_name(const char* value, size_t size) {
  set_has_rightholder_name();
  rightholder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_name)
}
inline ::std::string* VkMusicTrack::mutable_rightholder_name() {
  set_has_rightholder_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_name)
  return rightholder_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicTrack::release_rightholder_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_name)
  clear_has_rightholder_name();
  return rightholder_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicTrack::set_allocated_rightholder_name(::std::string* rightholder_name) {
  if (rightholder_name != NULL) {
    set_has_rightholder_name();
  } else {
    clear_has_rightholder_name();
  }
  rightholder_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rightholder_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_name)
}

// optional bool is_copy_of_mastercopy = 44;
inline bool VkMusicTrack::has_is_copy_of_mastercopy() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void VkMusicTrack::set_has_is_copy_of_mastercopy() {
  _has_bits_[0] |= 0x80000000u;
}
inline void VkMusicTrack::clear_has_is_copy_of_mastercopy() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void VkMusicTrack::clear_is_copy_of_mastercopy() {
  is_copy_of_mastercopy_ = false;
  clear_has_is_copy_of_mastercopy();
}
inline bool VkMusicTrack::is_copy_of_mastercopy() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.is_copy_of_mastercopy)
  return is_copy_of_mastercopy_;
}
inline void VkMusicTrack::set_is_copy_of_mastercopy(bool value) {
  set_has_is_copy_of_mastercopy();
  is_copy_of_mastercopy_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.is_copy_of_mastercopy)
}

// optional bool is_boostable_rightholder = 45;
inline bool VkMusicTrack::has_is_boostable_rightholder() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void VkMusicTrack::set_has_is_boostable_rightholder() {
  _has_bits_[1] |= 0x00000001u;
}
inline void VkMusicTrack::clear_has_is_boostable_rightholder() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void VkMusicTrack::clear_is_boostable_rightholder() {
  is_boostable_rightholder_ = false;
  clear_has_is_boostable_rightholder();
}
inline bool VkMusicTrack::is_boostable_rightholder() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.is_boostable_rightholder)
  return is_boostable_rightholder_;
}
inline void VkMusicTrack::set_is_boostable_rightholder(bool value) {
  set_has_is_boostable_rightholder();
  is_boostable_rightholder_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.is_boostable_rightholder)
}

// optional bool is_new_boostable_release = 46;
inline bool VkMusicTrack::has_is_new_boostable_release() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void VkMusicTrack::set_has_is_new_boostable_release() {
  _has_bits_[1] |= 0x00000002u;
}
inline void VkMusicTrack::clear_has_is_new_boostable_release() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void VkMusicTrack::clear_is_new_boostable_release() {
  is_new_boostable_release_ = false;
  clear_has_is_new_boostable_release();
}
inline bool VkMusicTrack::is_new_boostable_release() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.is_new_boostable_release)
  return is_new_boostable_release_;
}
inline void VkMusicTrack::set_is_new_boostable_release(bool value) {
  set_has_is_new_boostable_release();
  is_new_boostable_release_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.is_new_boostable_release)
}

// -------------------------------------------------------------------

// VkMusicLyrics

// optional string text = 1;
inline bool VkMusicLyrics::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkMusicLyrics::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkMusicLyrics::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkMusicLyrics::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& VkMusicLyrics::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicLyrics.text)
  return text_.GetNoArena();
}
inline void VkMusicLyrics::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicLyrics.text)
}
#if LANG_CXX11
inline void VkMusicLyrics::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicLyrics.text)
}
#endif
inline void VkMusicLyrics::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicLyrics.text)
}
inline void VkMusicLyrics::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicLyrics.text)
}
inline ::std::string* VkMusicLyrics::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicLyrics.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicLyrics::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicLyrics.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicLyrics::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicLyrics.text)
}

// optional int64 release_id = 2;
inline bool VkMusicLyrics::has_release_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkMusicLyrics::set_has_release_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkMusicLyrics::clear_has_release_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkMusicLyrics::clear_release_id() {
  release_id_ = GOOGLE_LONGLONG(0);
  clear_has_release_id();
}
inline ::google::protobuf::int64 VkMusicLyrics::release_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicLyrics.release_id)
  return release_id_;
}
inline void VkMusicLyrics::set_release_id(::google::protobuf::int64 value) {
  set_has_release_id();
  release_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicLyrics.release_id)
}

// optional int64 track_id = 3;
inline bool VkMusicLyrics::has_track_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VkMusicLyrics::set_has_track_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VkMusicLyrics::clear_has_track_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VkMusicLyrics::clear_track_id() {
  track_id_ = GOOGLE_LONGLONG(0);
  clear_has_track_id();
}
inline ::google::protobuf::int64 VkMusicLyrics::track_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicLyrics.track_id)
  return track_id_;
}
inline void VkMusicLyrics::set_track_id(::google::protobuf::int64 value) {
  set_has_track_id();
  track_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicLyrics.track_id)
}

// optional bool timecodes = 4;
inline bool VkMusicLyrics::has_timecodes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VkMusicLyrics::set_has_timecodes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VkMusicLyrics::clear_has_timecodes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VkMusicLyrics::clear_timecodes() {
  timecodes_ = false;
  clear_has_timecodes();
}
inline bool VkMusicLyrics::timecodes() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicLyrics.timecodes)
  return timecodes_;
}
inline void VkMusicLyrics::set_timecodes(bool value) {
  set_has_timecodes();
  timecodes_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicLyrics.timecodes)
}

// optional int64 timestamp = 5;
inline bool VkMusicLyrics::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VkMusicLyrics::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VkMusicLyrics::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VkMusicLyrics::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 VkMusicLyrics::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicLyrics.timestamp)
  return timestamp_;
}
inline void VkMusicLyrics::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicLyrics.timestamp)
}

// -------------------------------------------------------------------

// VkMusicTrackOrLyrics

// optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 1;
inline bool VkMusicTrackOrLyrics::has_track() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkMusicTrackOrLyrics::set_has_track() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkMusicTrackOrLyrics::clear_has_track() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkMusicTrackOrLyrics::clear_track() {
  if (track_ != NULL) track_->::ru::mail::go::webbase::blobs::VkMusicTrack::Clear();
  clear_has_track();
}
inline const ::ru::mail::go::webbase::blobs::VkMusicTrack& VkMusicTrackOrLyrics::track() const {
  const ::ru::mail::go::webbase::blobs::VkMusicTrack* p = track_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics.track)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicTrack*>(
      &::ru::mail::go::webbase::blobs::_VkMusicTrack_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VkMusicTrack* VkMusicTrackOrLyrics::mutable_track() {
  set_has_track();
  if (track_ == NULL) {
    track_ = new ::ru::mail::go::webbase::blobs::VkMusicTrack;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics.track)
  return track_;
}
inline ::ru::mail::go::webbase::blobs::VkMusicTrack* VkMusicTrackOrLyrics::release_track() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics.track)
  clear_has_track();
  ::ru::mail::go::webbase::blobs::VkMusicTrack* temp = track_;
  track_ = NULL;
  return temp;
}
inline void VkMusicTrackOrLyrics::set_allocated_track(::ru::mail::go::webbase::blobs::VkMusicTrack* track) {
  delete track_;
  track_ = track;
  if (track) {
    set_has_track();
  } else {
    clear_has_track();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics.track)
}

// optional .ru.mail.go.webbase.blobs.VkMusicLyrics lyrics = 2;
inline bool VkMusicTrackOrLyrics::has_lyrics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkMusicTrackOrLyrics::set_has_lyrics() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkMusicTrackOrLyrics::clear_has_lyrics() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkMusicTrackOrLyrics::clear_lyrics() {
  if (lyrics_ != NULL) lyrics_->::ru::mail::go::webbase::blobs::VkMusicLyrics::Clear();
  clear_has_lyrics();
}
inline const ::ru::mail::go::webbase::blobs::VkMusicLyrics& VkMusicTrackOrLyrics::lyrics() const {
  const ::ru::mail::go::webbase::blobs::VkMusicLyrics* p = lyrics_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics.lyrics)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicLyrics*>(
      &::ru::mail::go::webbase::blobs::_VkMusicLyrics_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VkMusicLyrics* VkMusicTrackOrLyrics::mutable_lyrics() {
  set_has_lyrics();
  if (lyrics_ == NULL) {
    lyrics_ = new ::ru::mail::go::webbase::blobs::VkMusicLyrics;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics.lyrics)
  return lyrics_;
}
inline ::ru::mail::go::webbase::blobs::VkMusicLyrics* VkMusicTrackOrLyrics::release_lyrics() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics.lyrics)
  clear_has_lyrics();
  ::ru::mail::go::webbase::blobs::VkMusicLyrics* temp = lyrics_;
  lyrics_ = NULL;
  return temp;
}
inline void VkMusicTrackOrLyrics::set_allocated_lyrics(::ru::mail::go::webbase::blobs::VkMusicLyrics* lyrics) {
  delete lyrics_;
  lyrics_ = lyrics;
  if (lyrics) {
    set_has_lyrics();
  } else {
    clear_has_lyrics();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics.lyrics)
}

// -------------------------------------------------------------------

// VkMusicUserEventListen

// optional int64 user_id = 1;
inline bool VkMusicUserEventListen::has_user_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VkMusicUserEventListen::set_has_user_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VkMusicUserEventListen::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VkMusicUserEventListen::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::int64 VkMusicUserEventListen::user_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.user_id)
  return user_id_;
}
inline void VkMusicUserEventListen::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.user_id)
}

// optional int64 start_ts = 2;
inline bool VkMusicUserEventListen::has_start_ts() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VkMusicUserEventListen::set_has_start_ts() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VkMusicUserEventListen::clear_has_start_ts() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VkMusicUserEventListen::clear_start_ts() {
  start_ts_ = GOOGLE_LONGLONG(0);
  clear_has_start_ts();
}
inline ::google::protobuf::int64 VkMusicUserEventListen::start_ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.start_ts)
  return start_ts_;
}
inline void VkMusicUserEventListen::set_start_ts(::google::protobuf::int64 value) {
  set_has_start_ts();
  start_ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.start_ts)
}

// optional int32 duration = 3;
inline bool VkMusicUserEventListen::has_duration() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VkMusicUserEventListen::set_has_duration() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VkMusicUserEventListen::clear_has_duration() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VkMusicUserEventListen::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 VkMusicUserEventListen::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.duration)
  return duration_;
}
inline void VkMusicUserEventListen::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.duration)
}

// optional string audio_id = 4;
inline bool VkMusicUserEventListen::has_audio_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkMusicUserEventListen::set_has_audio_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkMusicUserEventListen::clear_has_audio_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkMusicUserEventListen::clear_audio_id() {
  audio_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_audio_id();
}
inline const ::std::string& VkMusicUserEventListen::audio_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_id)
  return audio_id_.GetNoArena();
}
inline void VkMusicUserEventListen::set_audio_id(const ::std::string& value) {
  set_has_audio_id();
  audio_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_id)
}
#if LANG_CXX11
inline void VkMusicUserEventListen::set_audio_id(::std::string&& value) {
  set_has_audio_id();
  audio_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_id)
}
#endif
inline void VkMusicUserEventListen::set_audio_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_audio_id();
  audio_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_id)
}
inline void VkMusicUserEventListen::set_audio_id(const char* value, size_t size) {
  set_has_audio_id();
  audio_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_id)
}
inline ::std::string* VkMusicUserEventListen::mutable_audio_id() {
  set_has_audio_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_id)
  return audio_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicUserEventListen::release_audio_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_id)
  clear_has_audio_id();
  return audio_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicUserEventListen::set_allocated_audio_id(::std::string* audio_id) {
  if (audio_id != NULL) {
    set_has_audio_id();
  } else {
    clear_has_audio_id();
  }
  audio_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_id)
}

// optional string title = 5;
inline bool VkMusicUserEventListen::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkMusicUserEventListen::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkMusicUserEventListen::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkMusicUserEventListen::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& VkMusicUserEventListen::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.title)
  return title_.GetNoArena();
}
inline void VkMusicUserEventListen::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.title)
}
#if LANG_CXX11
inline void VkMusicUserEventListen::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUserEventListen.title)
}
#endif
inline void VkMusicUserEventListen::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUserEventListen.title)
}
inline void VkMusicUserEventListen::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUserEventListen.title)
}
inline ::std::string* VkMusicUserEventListen::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUserEventListen.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicUserEventListen::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUserEventListen.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicUserEventListen::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUserEventListen.title)
}

// optional string performer = 6;
inline bool VkMusicUserEventListen::has_performer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VkMusicUserEventListen::set_has_performer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VkMusicUserEventListen::clear_has_performer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VkMusicUserEventListen::clear_performer() {
  performer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_performer();
}
inline const ::std::string& VkMusicUserEventListen::performer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.performer)
  return performer_.GetNoArena();
}
inline void VkMusicUserEventListen::set_performer(const ::std::string& value) {
  set_has_performer();
  performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.performer)
}
#if LANG_CXX11
inline void VkMusicUserEventListen::set_performer(::std::string&& value) {
  set_has_performer();
  performer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUserEventListen.performer)
}
#endif
inline void VkMusicUserEventListen::set_performer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_performer();
  performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUserEventListen.performer)
}
inline void VkMusicUserEventListen::set_performer(const char* value, size_t size) {
  set_has_performer();
  performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUserEventListen.performer)
}
inline ::std::string* VkMusicUserEventListen::mutable_performer() {
  set_has_performer();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUserEventListen.performer)
  return performer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicUserEventListen::release_performer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUserEventListen.performer)
  clear_has_performer();
  return performer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicUserEventListen::set_allocated_performer(::std::string* performer) {
  if (performer != NULL) {
    set_has_performer();
  } else {
    clear_has_performer();
  }
  performer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), performer);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUserEventListen.performer)
}

// optional bool master_track = 7;
inline bool VkMusicUserEventListen::has_master_track() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VkMusicUserEventListen::set_has_master_track() {
  _has_bits_[0] |= 0x00004000u;
}
inline void VkMusicUserEventListen::clear_has_master_track() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void VkMusicUserEventListen::clear_master_track() {
  master_track_ = false;
  clear_has_master_track();
}
inline bool VkMusicUserEventListen::master_track() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.master_track)
  return master_track_;
}
inline void VkMusicUserEventListen::set_master_track(bool value) {
  set_has_master_track();
  master_track_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.master_track)
}

// optional string audio_section = 8;
inline bool VkMusicUserEventListen::has_audio_section() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VkMusicUserEventListen::set_has_audio_section() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VkMusicUserEventListen::clear_has_audio_section() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VkMusicUserEventListen::clear_audio_section() {
  audio_section_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_audio_section();
}
inline const ::std::string& VkMusicUserEventListen::audio_section() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_section)
  return audio_section_.GetNoArena();
}
inline void VkMusicUserEventListen::set_audio_section(const ::std::string& value) {
  set_has_audio_section();
  audio_section_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_section)
}
#if LANG_CXX11
inline void VkMusicUserEventListen::set_audio_section(::std::string&& value) {
  set_has_audio_section();
  audio_section_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_section)
}
#endif
inline void VkMusicUserEventListen::set_audio_section(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_audio_section();
  audio_section_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_section)
}
inline void VkMusicUserEventListen::set_audio_section(const char* value, size_t size) {
  set_has_audio_section();
  audio_section_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_section)
}
inline ::std::string* VkMusicUserEventListen::mutable_audio_section() {
  set_has_audio_section();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_section)
  return audio_section_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicUserEventListen::release_audio_section() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_section)
  clear_has_audio_section();
  return audio_section_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicUserEventListen::set_allocated_audio_section(::std::string* audio_section) {
  if (audio_section != NULL) {
    set_has_audio_section();
  } else {
    clear_has_audio_section();
  }
  audio_section_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_section);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_section)
}

// optional bool is_mail_search = 9;
inline bool VkMusicUserEventListen::has_is_mail_search() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VkMusicUserEventListen::set_has_is_mail_search() {
  _has_bits_[0] |= 0x00008000u;
}
inline void VkMusicUserEventListen::clear_has_is_mail_search() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void VkMusicUserEventListen::clear_is_mail_search() {
  is_mail_search_ = false;
  clear_has_is_mail_search();
}
inline bool VkMusicUserEventListen::is_mail_search() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.is_mail_search)
  return is_mail_search_;
}
inline void VkMusicUserEventListen::set_is_mail_search(bool value) {
  set_has_is_mail_search();
  is_mail_search_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.is_mail_search)
}

// optional string playlist_id = 10;
inline bool VkMusicUserEventListen::has_playlist_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VkMusicUserEventListen::set_has_playlist_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VkMusicUserEventListen::clear_has_playlist_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VkMusicUserEventListen::clear_playlist_id() {
  playlist_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playlist_id();
}
inline const ::std::string& VkMusicUserEventListen::playlist_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.playlist_id)
  return playlist_id_.GetNoArena();
}
inline void VkMusicUserEventListen::set_playlist_id(const ::std::string& value) {
  set_has_playlist_id();
  playlist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.playlist_id)
}
#if LANG_CXX11
inline void VkMusicUserEventListen::set_playlist_id(::std::string&& value) {
  set_has_playlist_id();
  playlist_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUserEventListen.playlist_id)
}
#endif
inline void VkMusicUserEventListen::set_playlist_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playlist_id();
  playlist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUserEventListen.playlist_id)
}
inline void VkMusicUserEventListen::set_playlist_id(const char* value, size_t size) {
  set_has_playlist_id();
  playlist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUserEventListen.playlist_id)
}
inline ::std::string* VkMusicUserEventListen::mutable_playlist_id() {
  set_has_playlist_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUserEventListen.playlist_id)
  return playlist_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicUserEventListen::release_playlist_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUserEventListen.playlist_id)
  clear_has_playlist_id();
  return playlist_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicUserEventListen::set_allocated_playlist_id(::std::string* playlist_id) {
  if (playlist_id != NULL) {
    set_has_playlist_id();
  } else {
    clear_has_playlist_id();
  }
  playlist_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playlist_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUserEventListen.playlist_id)
}

// optional int64 uma_release_id = 11;
inline bool VkMusicUserEventListen::has_uma_release_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void VkMusicUserEventListen::set_has_uma_release_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void VkMusicUserEventListen::clear_has_uma_release_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void VkMusicUserEventListen::clear_uma_release_id() {
  uma_release_id_ = GOOGLE_LONGLONG(0);
  clear_has_uma_release_id();
}
inline ::google::protobuf::int64 VkMusicUserEventListen::uma_release_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.uma_release_id)
  return uma_release_id_;
}
inline void VkMusicUserEventListen::set_uma_release_id(::google::protobuf::int64 value) {
  set_has_uma_release_id();
  uma_release_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.uma_release_id)
}

// optional string device_type = 12;
inline bool VkMusicUserEventListen::has_device_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VkMusicUserEventListen::set_has_device_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VkMusicUserEventListen::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VkMusicUserEventListen::clear_device_type() {
  device_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_type();
}
inline const ::std::string& VkMusicUserEventListen::device_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.device_type)
  return device_type_.GetNoArena();
}
inline void VkMusicUserEventListen::set_device_type(const ::std::string& value) {
  set_has_device_type();
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.device_type)
}
#if LANG_CXX11
inline void VkMusicUserEventListen::set_device_type(::std::string&& value) {
  set_has_device_type();
  device_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUserEventListen.device_type)
}
#endif
inline void VkMusicUserEventListen::set_device_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_type();
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUserEventListen.device_type)
}
inline void VkMusicUserEventListen::set_device_type(const char* value, size_t size) {
  set_has_device_type();
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUserEventListen.device_type)
}
inline ::std::string* VkMusicUserEventListen::mutable_device_type() {
  set_has_device_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUserEventListen.device_type)
  return device_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicUserEventListen::release_device_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUserEventListen.device_type)
  clear_has_device_type();
  return device_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicUserEventListen::set_allocated_device_type(::std::string* device_type) {
  if (device_type != NULL) {
    set_has_device_type();
  } else {
    clear_has_device_type();
  }
  device_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUserEventListen.device_type)
}

// optional string os_type = 13;
inline bool VkMusicUserEventListen::has_os_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VkMusicUserEventListen::set_has_os_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VkMusicUserEventListen::clear_has_os_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VkMusicUserEventListen::clear_os_type() {
  os_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_os_type();
}
inline const ::std::string& VkMusicUserEventListen::os_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.os_type)
  return os_type_.GetNoArena();
}
inline void VkMusicUserEventListen::set_os_type(const ::std::string& value) {
  set_has_os_type();
  os_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.os_type)
}
#if LANG_CXX11
inline void VkMusicUserEventListen::set_os_type(::std::string&& value) {
  set_has_os_type();
  os_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUserEventListen.os_type)
}
#endif
inline void VkMusicUserEventListen::set_os_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_os_type();
  os_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUserEventListen.os_type)
}
inline void VkMusicUserEventListen::set_os_type(const char* value, size_t size) {
  set_has_os_type();
  os_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUserEventListen.os_type)
}
inline ::std::string* VkMusicUserEventListen::mutable_os_type() {
  set_has_os_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUserEventListen.os_type)
  return os_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicUserEventListen::release_os_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUserEventListen.os_type)
  clear_has_os_type();
  return os_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicUserEventListen::set_allocated_os_type(::std::string* os_type) {
  if (os_type != NULL) {
    set_has_os_type();
  } else {
    clear_has_os_type();
  }
  os_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUserEventListen.os_type)
}

// optional string source = 14;
inline bool VkMusicUserEventListen::has_source() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VkMusicUserEventListen::set_has_source() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VkMusicUserEventListen::clear_has_source() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VkMusicUserEventListen::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& VkMusicUserEventListen::source() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.source)
  return source_.GetNoArena();
}
inline void VkMusicUserEventListen::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.source)
}
#if LANG_CXX11
inline void VkMusicUserEventListen::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUserEventListen.source)
}
#endif
inline void VkMusicUserEventListen::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUserEventListen.source)
}
inline void VkMusicUserEventListen::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUserEventListen.source)
}
inline ::std::string* VkMusicUserEventListen::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUserEventListen.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicUserEventListen::release_source() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUserEventListen.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicUserEventListen::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUserEventListen.source)
}

// optional string prev_audio_id = 15;
inline bool VkMusicUserEventListen::has_prev_audio_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VkMusicUserEventListen::set_has_prev_audio_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VkMusicUserEventListen::clear_has_prev_audio_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VkMusicUserEventListen::clear_prev_audio_id() {
  prev_audio_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev_audio_id();
}
inline const ::std::string& VkMusicUserEventListen::prev_audio_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_audio_id)
  return prev_audio_id_.GetNoArena();
}
inline void VkMusicUserEventListen::set_prev_audio_id(const ::std::string& value) {
  set_has_prev_audio_id();
  prev_audio_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_audio_id)
}
#if LANG_CXX11
inline void VkMusicUserEventListen::set_prev_audio_id(::std::string&& value) {
  set_has_prev_audio_id();
  prev_audio_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_audio_id)
}
#endif
inline void VkMusicUserEventListen::set_prev_audio_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev_audio_id();
  prev_audio_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_audio_id)
}
inline void VkMusicUserEventListen::set_prev_audio_id(const char* value, size_t size) {
  set_has_prev_audio_id();
  prev_audio_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_audio_id)
}
inline ::std::string* VkMusicUserEventListen::mutable_prev_audio_id() {
  set_has_prev_audio_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_audio_id)
  return prev_audio_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicUserEventListen::release_prev_audio_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_audio_id)
  clear_has_prev_audio_id();
  return prev_audio_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicUserEventListen::set_allocated_prev_audio_id(::std::string* prev_audio_id) {
  if (prev_audio_id != NULL) {
    set_has_prev_audio_id();
  } else {
    clear_has_prev_audio_id();
  }
  prev_audio_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev_audio_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_audio_id)
}

// optional string prev_playlist_id = 16;
inline bool VkMusicUserEventListen::has_prev_playlist_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VkMusicUserEventListen::set_has_prev_playlist_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VkMusicUserEventListen::clear_has_prev_playlist_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VkMusicUserEventListen::clear_prev_playlist_id() {
  prev_playlist_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev_playlist_id();
}
inline const ::std::string& VkMusicUserEventListen::prev_playlist_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_playlist_id)
  return prev_playlist_id_.GetNoArena();
}
inline void VkMusicUserEventListen::set_prev_playlist_id(const ::std::string& value) {
  set_has_prev_playlist_id();
  prev_playlist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_playlist_id)
}
#if LANG_CXX11
inline void VkMusicUserEventListen::set_prev_playlist_id(::std::string&& value) {
  set_has_prev_playlist_id();
  prev_playlist_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_playlist_id)
}
#endif
inline void VkMusicUserEventListen::set_prev_playlist_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev_playlist_id();
  prev_playlist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_playlist_id)
}
inline void VkMusicUserEventListen::set_prev_playlist_id(const char* value, size_t size) {
  set_has_prev_playlist_id();
  prev_playlist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_playlist_id)
}
inline ::std::string* VkMusicUserEventListen::mutable_prev_playlist_id() {
  set_has_prev_playlist_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_playlist_id)
  return prev_playlist_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicUserEventListen::release_prev_playlist_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_playlist_id)
  clear_has_prev_playlist_id();
  return prev_playlist_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicUserEventListen::set_allocated_prev_playlist_id(::std::string* prev_playlist_id) {
  if (prev_playlist_id != NULL) {
    set_has_prev_playlist_id();
  } else {
    clear_has_prev_playlist_id();
  }
  prev_playlist_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev_playlist_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_playlist_id)
}

// optional int64 vk_qid = 17;
inline bool VkMusicUserEventListen::has_vk_qid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void VkMusicUserEventListen::set_has_vk_qid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void VkMusicUserEventListen::clear_has_vk_qid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void VkMusicUserEventListen::clear_vk_qid() {
  vk_qid_ = GOOGLE_LONGLONG(0);
  clear_has_vk_qid();
}
inline ::google::protobuf::int64 VkMusicUserEventListen::vk_qid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.vk_qid)
  return vk_qid_;
}
inline void VkMusicUserEventListen::set_vk_qid(::google::protobuf::int64 value) {
  set_has_vk_qid();
  vk_qid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.vk_qid)
}

// optional string block_name = 18;
inline bool VkMusicUserEventListen::has_block_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VkMusicUserEventListen::set_has_block_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VkMusicUserEventListen::clear_has_block_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VkMusicUserEventListen::clear_block_name() {
  block_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_block_name();
}
inline const ::std::string& VkMusicUserEventListen::block_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.block_name)
  return block_name_.GetNoArena();
}
inline void VkMusicUserEventListen::set_block_name(const ::std::string& value) {
  set_has_block_name();
  block_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.block_name)
}
#if LANG_CXX11
inline void VkMusicUserEventListen::set_block_name(::std::string&& value) {
  set_has_block_name();
  block_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUserEventListen.block_name)
}
#endif
inline void VkMusicUserEventListen::set_block_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_block_name();
  block_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUserEventListen.block_name)
}
inline void VkMusicUserEventListen::set_block_name(const char* value, size_t size) {
  set_has_block_name();
  block_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUserEventListen.block_name)
}
inline ::std::string* VkMusicUserEventListen::mutable_block_name() {
  set_has_block_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUserEventListen.block_name)
  return block_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicUserEventListen::release_block_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUserEventListen.block_name)
  clear_has_block_name();
  return block_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicUserEventListen::set_allocated_block_name(::std::string* block_name) {
  if (block_name != NULL) {
    set_has_block_name();
  } else {
    clear_has_block_name();
  }
  block_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUserEventListen.block_name)
}

// optional int64 app_id = 19;
inline bool VkMusicUserEventListen::has_app_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void VkMusicUserEventListen::set_has_app_id() {
  _has_bits_[0] |= 0x00040000u;
}
inline void VkMusicUserEventListen::clear_has_app_id() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void VkMusicUserEventListen::clear_app_id() {
  app_id_ = GOOGLE_LONGLONG(0);
  clear_has_app_id();
}
inline ::google::protobuf::int64 VkMusicUserEventListen::app_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.app_id)
  return app_id_;
}
inline void VkMusicUserEventListen::set_app_id(::google::protobuf::int64 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.app_id)
}

// -------------------------------------------------------------------

// VkTrackList

// repeated string track_ids = 1;
inline int VkTrackList::track_ids_size() const {
  return track_ids_.size();
}
inline void VkTrackList::clear_track_ids() {
  track_ids_.Clear();
}
inline const ::std::string& VkTrackList::track_ids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
  return track_ids_.Get(index);
}
inline ::std::string* VkTrackList::mutable_track_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
  return track_ids_.Mutable(index);
}
inline void VkTrackList::set_track_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
  track_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VkTrackList::set_track_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
  track_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VkTrackList::set_track_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  track_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
}
inline void VkTrackList::set_track_ids(int index, const char* value, size_t size) {
  track_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
}
inline ::std::string* VkTrackList::add_track_ids() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
  return track_ids_.Add();
}
inline void VkTrackList::add_track_ids(const ::std::string& value) {
  track_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
}
#if LANG_CXX11
inline void VkTrackList::add_track_ids(::std::string&& value) {
  track_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
}
#endif
inline void VkTrackList::add_track_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  track_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
}
inline void VkTrackList::add_track_ids(const char* value, size_t size) {
  track_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkTrackList::track_ids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
  return track_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VkTrackList::mutable_track_ids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
  return &track_ids_;
}

// -------------------------------------------------------------------

// VkMusicPlaylist

// optional int64 owner_id = 1;
inline bool VkMusicPlaylist::has_owner_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VkMusicPlaylist::set_has_owner_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VkMusicPlaylist::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VkMusicPlaylist::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
  clear_has_owner_id();
}
inline ::google::protobuf::int64 VkMusicPlaylist::owner_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.owner_id)
  return owner_id_;
}
inline void VkMusicPlaylist::set_owner_id(::google::protobuf::int64 value) {
  set_has_owner_id();
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.owner_id)
}

// optional int64 playlist_id = 2;
inline bool VkMusicPlaylist::has_playlist_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VkMusicPlaylist::set_has_playlist_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VkMusicPlaylist::clear_has_playlist_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VkMusicPlaylist::clear_playlist_id() {
  playlist_id_ = GOOGLE_LONGLONG(0);
  clear_has_playlist_id();
}
inline ::google::protobuf::int64 VkMusicPlaylist::playlist_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.playlist_id)
  return playlist_id_;
}
inline void VkMusicPlaylist::set_playlist_id(::google::protobuf::int64 value) {
  set_has_playlist_id();
  playlist_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.playlist_id)
}

// optional string title = 3;
inline bool VkMusicPlaylist::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkMusicPlaylist::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkMusicPlaylist::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkMusicPlaylist::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& VkMusicPlaylist::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.title)
  return title_.GetNoArena();
}
inline void VkMusicPlaylist::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.title)
}
#if LANG_CXX11
inline void VkMusicPlaylist::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicPlaylist.title)
}
#endif
inline void VkMusicPlaylist::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicPlaylist.title)
}
inline void VkMusicPlaylist::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicPlaylist.title)
}
inline ::std::string* VkMusicPlaylist::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicPlaylist::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicPlaylist.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicPlaylist::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicPlaylist.title)
}

// optional string performer = 4;
inline bool VkMusicPlaylist::has_performer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkMusicPlaylist::set_has_performer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkMusicPlaylist::clear_has_performer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkMusicPlaylist::clear_performer() {
  performer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_performer();
}
inline const ::std::string& VkMusicPlaylist::performer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer)
  return performer_.GetNoArena();
}
inline void VkMusicPlaylist::set_performer(const ::std::string& value) {
  set_has_performer();
  performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer)
}
#if LANG_CXX11
inline void VkMusicPlaylist::set_performer(::std::string&& value) {
  set_has_performer();
  performer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer)
}
#endif
inline void VkMusicPlaylist::set_performer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_performer();
  performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer)
}
inline void VkMusicPlaylist::set_performer(const char* value, size_t size) {
  set_has_performer();
  performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer)
}
inline ::std::string* VkMusicPlaylist::mutable_performer() {
  set_has_performer();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer)
  return performer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicPlaylist::release_performer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer)
  clear_has_performer();
  return performer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicPlaylist::set_allocated_performer(::std::string* performer) {
  if (performer != NULL) {
    set_has_performer();
  } else {
    clear_has_performer();
  }
  performer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), performer);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer)
}

// optional int32 number_of_tracks = 5;
inline bool VkMusicPlaylist::has_number_of_tracks() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VkMusicPlaylist::set_has_number_of_tracks() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VkMusicPlaylist::clear_has_number_of_tracks() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VkMusicPlaylist::clear_number_of_tracks() {
  number_of_tracks_ = 0;
  clear_has_number_of_tracks();
}
inline ::google::protobuf::int32 VkMusicPlaylist::number_of_tracks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.number_of_tracks)
  return number_of_tracks_;
}
inline void VkMusicPlaylist::set_number_of_tracks(::google::protobuf::int32 value) {
  set_has_number_of_tracks();
  number_of_tracks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.number_of_tracks)
}

// optional bool is_official = 6;
inline bool VkMusicPlaylist::has_is_official() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VkMusicPlaylist::set_has_is_official() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VkMusicPlaylist::clear_has_is_official() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VkMusicPlaylist::clear_is_official() {
  is_official_ = false;
  clear_has_is_official();
}
inline bool VkMusicPlaylist::is_official() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.is_official)
  return is_official_;
}
inline void VkMusicPlaylist::set_is_official(bool value) {
  set_has_is_official();
  is_official_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.is_official)
}

// optional int64 times_listened = 7;
inline bool VkMusicPlaylist::has_times_listened() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VkMusicPlaylist::set_has_times_listened() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VkMusicPlaylist::clear_has_times_listened() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VkMusicPlaylist::clear_times_listened() {
  times_listened_ = GOOGLE_LONGLONG(0);
  clear_has_times_listened();
}
inline ::google::protobuf::int64 VkMusicPlaylist::times_listened() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.times_listened)
  return times_listened_;
}
inline void VkMusicPlaylist::set_times_listened(::google::protobuf::int64 value) {
  set_has_times_listened();
  times_listened_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.times_listened)
}

// optional int64 timestamp = 8;
inline bool VkMusicPlaylist::has_timestamp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VkMusicPlaylist::set_has_timestamp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VkMusicPlaylist::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VkMusicPlaylist::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 VkMusicPlaylist::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.timestamp)
  return timestamp_;
}
inline void VkMusicPlaylist::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.timestamp)
}

// optional int64 followers = 9;
inline bool VkMusicPlaylist::has_followers() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VkMusicPlaylist::set_has_followers() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VkMusicPlaylist::clear_has_followers() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VkMusicPlaylist::clear_followers() {
  followers_ = GOOGLE_LONGLONG(0);
  clear_has_followers();
}
inline ::google::protobuf::int64 VkMusicPlaylist::followers() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.followers)
  return followers_;
}
inline void VkMusicPlaylist::set_followers(::google::protobuf::int64 value) {
  set_has_followers();
  followers_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.followers)
}

// optional int64 times_listened_last_month = 10;
inline bool VkMusicPlaylist::has_times_listened_last_month() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VkMusicPlaylist::set_has_times_listened_last_month() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VkMusicPlaylist::clear_has_times_listened_last_month() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VkMusicPlaylist::clear_times_listened_last_month() {
  times_listened_last_month_ = GOOGLE_LONGLONG(0);
  clear_has_times_listened_last_month();
}
inline ::google::protobuf::int64 VkMusicPlaylist::times_listened_last_month() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.times_listened_last_month)
  return times_listened_last_month_;
}
inline void VkMusicPlaylist::set_times_listened_last_month(::google::protobuf::int64 value) {
  set_has_times_listened_last_month();
  times_listened_last_month_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.times_listened_last_month)
}

// optional int64 times_listened_last_week = 11;
inline bool VkMusicPlaylist::has_times_listened_last_week() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VkMusicPlaylist::set_has_times_listened_last_week() {
  _has_bits_[0] |= 0x00004000u;
}
inline void VkMusicPlaylist::clear_has_times_listened_last_week() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void VkMusicPlaylist::clear_times_listened_last_week() {
  times_listened_last_week_ = GOOGLE_LONGLONG(0);
  clear_has_times_listened_last_week();
}
inline ::google::protobuf::int64 VkMusicPlaylist::times_listened_last_week() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.times_listened_last_week)
  return times_listened_last_week_;
}
inline void VkMusicPlaylist::set_times_listened_last_week(::google::protobuf::int64 value) {
  set_has_times_listened_last_week();
  times_listened_last_week_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.times_listened_last_week)
}

// optional .ru.mail.go.webbase.blobs.VkTrackList tracks = 12;
inline bool VkMusicPlaylist::has_tracks() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VkMusicPlaylist::set_has_tracks() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VkMusicPlaylist::clear_has_tracks() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VkMusicPlaylist::clear_tracks() {
  if (tracks_ != NULL) tracks_->::ru::mail::go::webbase::blobs::VkTrackList::Clear();
  clear_has_tracks();
}
inline const ::ru::mail::go::webbase::blobs::VkTrackList& VkMusicPlaylist::tracks() const {
  const ::ru::mail::go::webbase::blobs::VkTrackList* p = tracks_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.tracks)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkTrackList*>(
      &::ru::mail::go::webbase::blobs::_VkTrackList_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VkTrackList* VkMusicPlaylist::mutable_tracks() {
  set_has_tracks();
  if (tracks_ == NULL) {
    tracks_ = new ::ru::mail::go::webbase::blobs::VkTrackList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.tracks)
  return tracks_;
}
inline ::ru::mail::go::webbase::blobs::VkTrackList* VkMusicPlaylist::release_tracks() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicPlaylist.tracks)
  clear_has_tracks();
  ::ru::mail::go::webbase::blobs::VkTrackList* temp = tracks_;
  tracks_ = NULL;
  return temp;
}
inline void VkMusicPlaylist::set_allocated_tracks(::ru::mail::go::webbase::blobs::VkTrackList* tracks) {
  delete tracks_;
  tracks_ = tracks;
  if (tracks) {
    set_has_tracks();
  } else {
    clear_has_tracks();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicPlaylist.tracks)
}

// repeated string track_names = 13;
inline int VkMusicPlaylist::track_names_size() const {
  return track_names_.size();
}
inline void VkMusicPlaylist::clear_track_names() {
  track_names_.Clear();
}
inline const ::std::string& VkMusicPlaylist::track_names(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
  return track_names_.Get(index);
}
inline ::std::string* VkMusicPlaylist::mutable_track_names(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
  return track_names_.Mutable(index);
}
inline void VkMusicPlaylist::set_track_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
  track_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VkMusicPlaylist::set_track_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
  track_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VkMusicPlaylist::set_track_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  track_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
}
inline void VkMusicPlaylist::set_track_names(int index, const char* value, size_t size) {
  track_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
}
inline ::std::string* VkMusicPlaylist::add_track_names() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
  return track_names_.Add();
}
inline void VkMusicPlaylist::add_track_names(const ::std::string& value) {
  track_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
}
#if LANG_CXX11
inline void VkMusicPlaylist::add_track_names(::std::string&& value) {
  track_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
}
#endif
inline void VkMusicPlaylist::add_track_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  track_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
}
inline void VkMusicPlaylist::add_track_names(const char* value, size_t size) {
  track_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkMusicPlaylist::track_names() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
  return track_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VkMusicPlaylist::mutable_track_names() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
  return &track_names_;
}

// optional int64 tracks_times_listened = 14;
inline bool VkMusicPlaylist::has_tracks_times_listened() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VkMusicPlaylist::set_has_tracks_times_listened() {
  _has_bits_[0] |= 0x00008000u;
}
inline void VkMusicPlaylist::clear_has_tracks_times_listened() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void VkMusicPlaylist::clear_tracks_times_listened() {
  tracks_times_listened_ = GOOGLE_LONGLONG(0);
  clear_has_tracks_times_listened();
}
inline ::google::protobuf::int64 VkMusicPlaylist::tracks_times_listened() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.tracks_times_listened)
  return tracks_times_listened_;
}
inline void VkMusicPlaylist::set_tracks_times_listened(::google::protobuf::int64 value) {
  set_has_tracks_times_listened();
  tracks_times_listened_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.tracks_times_listened)
}

// optional int64 tracks_times_listened_last_month = 15;
inline bool VkMusicPlaylist::has_tracks_times_listened_last_month() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void VkMusicPlaylist::set_has_tracks_times_listened_last_month() {
  _has_bits_[0] |= 0x00010000u;
}
inline void VkMusicPlaylist::clear_has_tracks_times_listened_last_month() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void VkMusicPlaylist::clear_tracks_times_listened_last_month() {
  tracks_times_listened_last_month_ = GOOGLE_LONGLONG(0);
  clear_has_tracks_times_listened_last_month();
}
inline ::google::protobuf::int64 VkMusicPlaylist::tracks_times_listened_last_month() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.tracks_times_listened_last_month)
  return tracks_times_listened_last_month_;
}
inline void VkMusicPlaylist::set_tracks_times_listened_last_month(::google::protobuf::int64 value) {
  set_has_tracks_times_listened_last_month();
  tracks_times_listened_last_month_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.tracks_times_listened_last_month)
}

// optional int64 tracks_times_listened_last_week = 16;
inline bool VkMusicPlaylist::has_tracks_times_listened_last_week() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void VkMusicPlaylist::set_has_tracks_times_listened_last_week() {
  _has_bits_[0] |= 0x00020000u;
}
inline void VkMusicPlaylist::clear_has_tracks_times_listened_last_week() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void VkMusicPlaylist::clear_tracks_times_listened_last_week() {
  tracks_times_listened_last_week_ = GOOGLE_LONGLONG(0);
  clear_has_tracks_times_listened_last_week();
}
inline ::google::protobuf::int64 VkMusicPlaylist::tracks_times_listened_last_week() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.tracks_times_listened_last_week)
  return tracks_times_listened_last_week_;
}
inline void VkMusicPlaylist::set_tracks_times_listened_last_week(::google::protobuf::int64 value) {
  set_has_tracks_times_listened_last_week();
  tracks_times_listened_last_week_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.tracks_times_listened_last_week)
}

// optional string subtitle = 17;
inline bool VkMusicPlaylist::has_subtitle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VkMusicPlaylist::set_has_subtitle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VkMusicPlaylist::clear_has_subtitle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VkMusicPlaylist::clear_subtitle() {
  subtitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subtitle();
}
inline const ::std::string& VkMusicPlaylist::subtitle() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.subtitle)
  return subtitle_.GetNoArena();
}
inline void VkMusicPlaylist::set_subtitle(const ::std::string& value) {
  set_has_subtitle();
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.subtitle)
}
#if LANG_CXX11
inline void VkMusicPlaylist::set_subtitle(::std::string&& value) {
  set_has_subtitle();
  subtitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicPlaylist.subtitle)
}
#endif
inline void VkMusicPlaylist::set_subtitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_subtitle();
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicPlaylist.subtitle)
}
inline void VkMusicPlaylist::set_subtitle(const char* value, size_t size) {
  set_has_subtitle();
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicPlaylist.subtitle)
}
inline ::std::string* VkMusicPlaylist::mutable_subtitle() {
  set_has_subtitle();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.subtitle)
  return subtitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicPlaylist::release_subtitle() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicPlaylist.subtitle)
  clear_has_subtitle();
  return subtitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicPlaylist::set_allocated_subtitle(::std::string* subtitle) {
  if (subtitle != NULL) {
    set_has_subtitle();
  } else {
    clear_has_subtitle();
  }
  subtitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subtitle);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicPlaylist.subtitle)
}

// optional uint32 year = 18;
inline bool VkMusicPlaylist::has_year() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void VkMusicPlaylist::set_has_year() {
  _has_bits_[0] |= 0x00080000u;
}
inline void VkMusicPlaylist::clear_has_year() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void VkMusicPlaylist::clear_year() {
  year_ = 0u;
  clear_has_year();
}
inline ::google::protobuf::uint32 VkMusicPlaylist::year() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.year)
  return year_;
}
inline void VkMusicPlaylist::set_year(::google::protobuf::uint32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.year)
}

// repeated string tags = 19;
inline int VkMusicPlaylist::tags_size() const {
  return tags_.size();
}
inline void VkMusicPlaylist::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& VkMusicPlaylist::tags(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
  return tags_.Get(index);
}
inline ::std::string* VkMusicPlaylist::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
  return tags_.Mutable(index);
}
inline void VkMusicPlaylist::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VkMusicPlaylist::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VkMusicPlaylist::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
}
inline void VkMusicPlaylist::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
}
inline ::std::string* VkMusicPlaylist::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
  return tags_.Add();
}
inline void VkMusicPlaylist::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
}
#if LANG_CXX11
inline void VkMusicPlaylist::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
}
#endif
inline void VkMusicPlaylist::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
}
inline void VkMusicPlaylist::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkMusicPlaylist::tags() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VkMusicPlaylist::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
  return &tags_;
}

// optional int64 timestamp_ms = 20;
inline bool VkMusicPlaylist::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void VkMusicPlaylist::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00040000u;
}
inline void VkMusicPlaylist::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void VkMusicPlaylist::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 VkMusicPlaylist::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.timestamp_ms)
  return timestamp_ms_;
}
inline void VkMusicPlaylist::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.timestamp_ms)
}

// repeated string uma_tags = 21;
inline int VkMusicPlaylist::uma_tags_size() const {
  return uma_tags_.size();
}
inline void VkMusicPlaylist::clear_uma_tags() {
  uma_tags_.Clear();
}
inline const ::std::string& VkMusicPlaylist::uma_tags(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
  return uma_tags_.Get(index);
}
inline ::std::string* VkMusicPlaylist::mutable_uma_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
  return uma_tags_.Mutable(index);
}
inline void VkMusicPlaylist::set_uma_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
  uma_tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VkMusicPlaylist::set_uma_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
  uma_tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VkMusicPlaylist::set_uma_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  uma_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
}
inline void VkMusicPlaylist::set_uma_tags(int index, const char* value, size_t size) {
  uma_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
}
inline ::std::string* VkMusicPlaylist::add_uma_tags() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
  return uma_tags_.Add();
}
inline void VkMusicPlaylist::add_uma_tags(const ::std::string& value) {
  uma_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
}
#if LANG_CXX11
inline void VkMusicPlaylist::add_uma_tags(::std::string&& value) {
  uma_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
}
#endif
inline void VkMusicPlaylist::add_uma_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  uma_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
}
inline void VkMusicPlaylist::add_uma_tags(const char* value, size_t size) {
  uma_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkMusicPlaylist::uma_tags() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
  return uma_tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VkMusicPlaylist::mutable_uma_tags() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
  return &uma_tags_;
}

// optional string title_alternatives = 22;
inline bool VkMusicPlaylist::has_title_alternatives() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VkMusicPlaylist::set_has_title_alternatives() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VkMusicPlaylist::clear_has_title_alternatives() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VkMusicPlaylist::clear_title_alternatives() {
  title_alternatives_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title_alternatives();
}
inline const ::std::string& VkMusicPlaylist::title_alternatives() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.title_alternatives)
  return title_alternatives_.GetNoArena();
}
inline void VkMusicPlaylist::set_title_alternatives(const ::std::string& value) {
  set_has_title_alternatives();
  title_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.title_alternatives)
}
#if LANG_CXX11
inline void VkMusicPlaylist::set_title_alternatives(::std::string&& value) {
  set_has_title_alternatives();
  title_alternatives_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicPlaylist.title_alternatives)
}
#endif
inline void VkMusicPlaylist::set_title_alternatives(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title_alternatives();
  title_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicPlaylist.title_alternatives)
}
inline void VkMusicPlaylist::set_title_alternatives(const char* value, size_t size) {
  set_has_title_alternatives();
  title_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicPlaylist.title_alternatives)
}
inline ::std::string* VkMusicPlaylist::mutable_title_alternatives() {
  set_has_title_alternatives();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.title_alternatives)
  return title_alternatives_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicPlaylist::release_title_alternatives() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicPlaylist.title_alternatives)
  clear_has_title_alternatives();
  return title_alternatives_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicPlaylist::set_allocated_title_alternatives(::std::string* title_alternatives) {
  if (title_alternatives != NULL) {
    set_has_title_alternatives();
  } else {
    clear_has_title_alternatives();
  }
  title_alternatives_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title_alternatives);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicPlaylist.title_alternatives)
}

// optional string performer_alternatives = 23;
inline bool VkMusicPlaylist::has_performer_alternatives() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VkMusicPlaylist::set_has_performer_alternatives() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VkMusicPlaylist::clear_has_performer_alternatives() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VkMusicPlaylist::clear_performer_alternatives() {
  performer_alternatives_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_performer_alternatives();
}
inline const ::std::string& VkMusicPlaylist::performer_alternatives() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer_alternatives)
  return performer_alternatives_.GetNoArena();
}
inline void VkMusicPlaylist::set_performer_alternatives(const ::std::string& value) {
  set_has_performer_alternatives();
  performer_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer_alternatives)
}
#if LANG_CXX11
inline void VkMusicPlaylist::set_performer_alternatives(::std::string&& value) {
  set_has_performer_alternatives();
  performer_alternatives_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer_alternatives)
}
#endif
inline void VkMusicPlaylist::set_performer_alternatives(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_performer_alternatives();
  performer_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer_alternatives)
}
inline void VkMusicPlaylist::set_performer_alternatives(const char* value, size_t size) {
  set_has_performer_alternatives();
  performer_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer_alternatives)
}
inline ::std::string* VkMusicPlaylist::mutable_performer_alternatives() {
  set_has_performer_alternatives();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer_alternatives)
  return performer_alternatives_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicPlaylist::release_performer_alternatives() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer_alternatives)
  clear_has_performer_alternatives();
  return performer_alternatives_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicPlaylist::set_allocated_performer_alternatives(::std::string* performer_alternatives) {
  if (performer_alternatives != NULL) {
    set_has_performer_alternatives();
  } else {
    clear_has_performer_alternatives();
  }
  performer_alternatives_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), performer_alternatives);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer_alternatives)
}

// -------------------------------------------------------------------

// VkMusicUMAAlbumMeta

// optional int64 owner_id = 1;
inline bool VkMusicUMAAlbumMeta::has_owner_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkMusicUMAAlbumMeta::set_has_owner_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkMusicUMAAlbumMeta::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkMusicUMAAlbumMeta::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
  clear_has_owner_id();
}
inline ::google::protobuf::int64 VkMusicUMAAlbumMeta::owner_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.owner_id)
  return owner_id_;
}
inline void VkMusicUMAAlbumMeta::set_owner_id(::google::protobuf::int64 value) {
  set_has_owner_id();
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.owner_id)
}

// optional int64 playlist_id = 2;
inline bool VkMusicUMAAlbumMeta::has_playlist_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VkMusicUMAAlbumMeta::set_has_playlist_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VkMusicUMAAlbumMeta::clear_has_playlist_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VkMusicUMAAlbumMeta::clear_playlist_id() {
  playlist_id_ = GOOGLE_LONGLONG(0);
  clear_has_playlist_id();
}
inline ::google::protobuf::int64 VkMusicUMAAlbumMeta::playlist_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.playlist_id)
  return playlist_id_;
}
inline void VkMusicUMAAlbumMeta::set_playlist_id(::google::protobuf::int64 value) {
  set_has_playlist_id();
  playlist_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.playlist_id)
}

// optional int64 timestamp = 3;
inline bool VkMusicUMAAlbumMeta::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VkMusicUMAAlbumMeta::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VkMusicUMAAlbumMeta::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VkMusicUMAAlbumMeta::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 VkMusicUMAAlbumMeta::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.timestamp)
  return timestamp_;
}
inline void VkMusicUMAAlbumMeta::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.timestamp)
}

// optional string json_str = 4;
inline bool VkMusicUMAAlbumMeta::has_json_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkMusicUMAAlbumMeta::set_has_json_str() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkMusicUMAAlbumMeta::clear_has_json_str() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkMusicUMAAlbumMeta::clear_json_str() {
  json_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_str();
}
inline const ::std::string& VkMusicUMAAlbumMeta::json_str() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.json_str)
  return json_str_.GetNoArena();
}
inline void VkMusicUMAAlbumMeta::set_json_str(const ::std::string& value) {
  set_has_json_str();
  json_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.json_str)
}
#if LANG_CXX11
inline void VkMusicUMAAlbumMeta::set_json_str(::std::string&& value) {
  set_has_json_str();
  json_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.json_str)
}
#endif
inline void VkMusicUMAAlbumMeta::set_json_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_json_str();
  json_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.json_str)
}
inline void VkMusicUMAAlbumMeta::set_json_str(const char* value, size_t size) {
  set_has_json_str();
  json_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.json_str)
}
inline ::std::string* VkMusicUMAAlbumMeta::mutable_json_str() {
  set_has_json_str();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.json_str)
  return json_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicUMAAlbumMeta::release_json_str() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.json_str)
  clear_has_json_str();
  return json_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicUMAAlbumMeta::set_allocated_json_str(::std::string* json_str) {
  if (json_str != NULL) {
    set_has_json_str();
  } else {
    clear_has_json_str();
  }
  json_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_str);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.json_str)
}

// -------------------------------------------------------------------

// VkMusicUserPrivacy

// required int64 owner_id = 1;
inline bool VkMusicUserPrivacy::has_owner_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkMusicUserPrivacy::set_has_owner_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkMusicUserPrivacy::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkMusicUserPrivacy::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
  clear_has_owner_id();
}
inline ::google::protobuf::int64 VkMusicUserPrivacy::owner_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserPrivacy.owner_id)
  return owner_id_;
}
inline void VkMusicUserPrivacy::set_owner_id(::google::protobuf::int64 value) {
  set_has_owner_id();
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserPrivacy.owner_id)
}

// required bool is_public = 2;
inline bool VkMusicUserPrivacy::has_is_public() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VkMusicUserPrivacy::set_has_is_public() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VkMusicUserPrivacy::clear_has_is_public() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VkMusicUserPrivacy::clear_is_public() {
  is_public_ = false;
  clear_has_is_public();
}
inline bool VkMusicUserPrivacy::is_public() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserPrivacy.is_public)
  return is_public_;
}
inline void VkMusicUserPrivacy::set_is_public(bool value) {
  set_has_is_public();
  is_public_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserPrivacy.is_public)
}

// optional int64 timestamp = 3;
inline bool VkMusicUserPrivacy::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkMusicUserPrivacy::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkMusicUserPrivacy::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkMusicUserPrivacy::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 VkMusicUserPrivacy::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserPrivacy.timestamp)
  return timestamp_;
}
inline void VkMusicUserPrivacy::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserPrivacy.timestamp)
}

// optional int64 timestamp_ms = 4;
inline bool VkMusicUserPrivacy::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VkMusicUserPrivacy::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VkMusicUserPrivacy::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VkMusicUserPrivacy::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 VkMusicUserPrivacy::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserPrivacy.timestamp_ms)
  return timestamp_ms_;
}
inline void VkMusicUserPrivacy::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserPrivacy.timestamp_ms)
}

// -------------------------------------------------------------------

// TrackOrPlaylistOrUserPrivacy

// optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 1;
inline bool TrackOrPlaylistOrUserPrivacy::has_track() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackOrPlaylistOrUserPrivacy::set_has_track() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackOrPlaylistOrUserPrivacy::clear_has_track() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackOrPlaylistOrUserPrivacy::clear_track() {
  if (track_ != NULL) track_->::ru::mail::go::webbase::blobs::VkMusicTrack::Clear();
  clear_has_track();
}
inline const ::ru::mail::go::webbase::blobs::VkMusicTrack& TrackOrPlaylistOrUserPrivacy::track() const {
  const ::ru::mail::go::webbase::blobs::VkMusicTrack* p = track_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.track)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicTrack*>(
      &::ru::mail::go::webbase::blobs::_VkMusicTrack_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VkMusicTrack* TrackOrPlaylistOrUserPrivacy::mutable_track() {
  set_has_track();
  if (track_ == NULL) {
    track_ = new ::ru::mail::go::webbase::blobs::VkMusicTrack;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.track)
  return track_;
}
inline ::ru::mail::go::webbase::blobs::VkMusicTrack* TrackOrPlaylistOrUserPrivacy::release_track() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.track)
  clear_has_track();
  ::ru::mail::go::webbase::blobs::VkMusicTrack* temp = track_;
  track_ = NULL;
  return temp;
}
inline void TrackOrPlaylistOrUserPrivacy::set_allocated_track(::ru::mail::go::webbase::blobs::VkMusicTrack* track) {
  delete track_;
  track_ = track;
  if (track) {
    set_has_track();
  } else {
    clear_has_track();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.track)
}

// optional .ru.mail.go.webbase.blobs.VkMusicPlaylist playlist = 2;
inline bool TrackOrPlaylistOrUserPrivacy::has_playlist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackOrPlaylistOrUserPrivacy::set_has_playlist() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackOrPlaylistOrUserPrivacy::clear_has_playlist() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackOrPlaylistOrUserPrivacy::clear_playlist() {
  if (playlist_ != NULL) playlist_->::ru::mail::go::webbase::blobs::VkMusicPlaylist::Clear();
  clear_has_playlist();
}
inline const ::ru::mail::go::webbase::blobs::VkMusicPlaylist& TrackOrPlaylistOrUserPrivacy::playlist() const {
  const ::ru::mail::go::webbase::blobs::VkMusicPlaylist* p = playlist_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.playlist)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicPlaylist*>(
      &::ru::mail::go::webbase::blobs::_VkMusicPlaylist_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VkMusicPlaylist* TrackOrPlaylistOrUserPrivacy::mutable_playlist() {
  set_has_playlist();
  if (playlist_ == NULL) {
    playlist_ = new ::ru::mail::go::webbase::blobs::VkMusicPlaylist;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.playlist)
  return playlist_;
}
inline ::ru::mail::go::webbase::blobs::VkMusicPlaylist* TrackOrPlaylistOrUserPrivacy::release_playlist() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.playlist)
  clear_has_playlist();
  ::ru::mail::go::webbase::blobs::VkMusicPlaylist* temp = playlist_;
  playlist_ = NULL;
  return temp;
}
inline void TrackOrPlaylistOrUserPrivacy::set_allocated_playlist(::ru::mail::go::webbase::blobs::VkMusicPlaylist* playlist) {
  delete playlist_;
  playlist_ = playlist;
  if (playlist) {
    set_has_playlist();
  } else {
    clear_has_playlist();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.playlist)
}

// optional .ru.mail.go.webbase.blobs.VkMusicUserPrivacy privacy = 3;
inline bool TrackOrPlaylistOrUserPrivacy::has_privacy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackOrPlaylistOrUserPrivacy::set_has_privacy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrackOrPlaylistOrUserPrivacy::clear_has_privacy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrackOrPlaylistOrUserPrivacy::clear_privacy() {
  if (privacy_ != NULL) privacy_->::ru::mail::go::webbase::blobs::VkMusicUserPrivacy::Clear();
  clear_has_privacy();
}
inline const ::ru::mail::go::webbase::blobs::VkMusicUserPrivacy& TrackOrPlaylistOrUserPrivacy::privacy() const {
  const ::ru::mail::go::webbase::blobs::VkMusicUserPrivacy* p = privacy_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.privacy)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicUserPrivacy*>(
      &::ru::mail::go::webbase::blobs::_VkMusicUserPrivacy_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VkMusicUserPrivacy* TrackOrPlaylistOrUserPrivacy::mutable_privacy() {
  set_has_privacy();
  if (privacy_ == NULL) {
    privacy_ = new ::ru::mail::go::webbase::blobs::VkMusicUserPrivacy;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.privacy)
  return privacy_;
}
inline ::ru::mail::go::webbase::blobs::VkMusicUserPrivacy* TrackOrPlaylistOrUserPrivacy::release_privacy() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.privacy)
  clear_has_privacy();
  ::ru::mail::go::webbase::blobs::VkMusicUserPrivacy* temp = privacy_;
  privacy_ = NULL;
  return temp;
}
inline void TrackOrPlaylistOrUserPrivacy::set_allocated_privacy(::ru::mail::go::webbase::blobs::VkMusicUserPrivacy* privacy) {
  delete privacy_;
  privacy_ = privacy;
  if (privacy) {
    set_has_privacy();
  } else {
    clear_has_privacy();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.privacy)
}

// -------------------------------------------------------------------

// TrackOrPlaylistOrListenEvent

// optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 1;
inline bool TrackOrPlaylistOrListenEvent::has_track() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackOrPlaylistOrListenEvent::set_has_track() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackOrPlaylistOrListenEvent::clear_has_track() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackOrPlaylistOrListenEvent::clear_track() {
  if (track_ != NULL) track_->::ru::mail::go::webbase::blobs::VkMusicTrack::Clear();
  clear_has_track();
}
inline const ::ru::mail::go::webbase::blobs::VkMusicTrack& TrackOrPlaylistOrListenEvent::track() const {
  const ::ru::mail::go::webbase::blobs::VkMusicTrack* p = track_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.track)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicTrack*>(
      &::ru::mail::go::webbase::blobs::_VkMusicTrack_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VkMusicTrack* TrackOrPlaylistOrListenEvent::mutable_track() {
  set_has_track();
  if (track_ == NULL) {
    track_ = new ::ru::mail::go::webbase::blobs::VkMusicTrack;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.track)
  return track_;
}
inline ::ru::mail::go::webbase::blobs::VkMusicTrack* TrackOrPlaylistOrListenEvent::release_track() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.track)
  clear_has_track();
  ::ru::mail::go::webbase::blobs::VkMusicTrack* temp = track_;
  track_ = NULL;
  return temp;
}
inline void TrackOrPlaylistOrListenEvent::set_allocated_track(::ru::mail::go::webbase::blobs::VkMusicTrack* track) {
  delete track_;
  track_ = track;
  if (track) {
    set_has_track();
  } else {
    clear_has_track();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.track)
}

// optional .ru.mail.go.webbase.blobs.VkMusicUserEventListen listen_event = 2;
inline bool TrackOrPlaylistOrListenEvent::has_listen_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackOrPlaylistOrListenEvent::set_has_listen_event() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackOrPlaylistOrListenEvent::clear_has_listen_event() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackOrPlaylistOrListenEvent::clear_listen_event() {
  if (listen_event_ != NULL) listen_event_->::ru::mail::go::webbase::blobs::VkMusicUserEventListen::Clear();
  clear_has_listen_event();
}
inline const ::ru::mail::go::webbase::blobs::VkMusicUserEventListen& TrackOrPlaylistOrListenEvent::listen_event() const {
  const ::ru::mail::go::webbase::blobs::VkMusicUserEventListen* p = listen_event_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.listen_event)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicUserEventListen*>(
      &::ru::mail::go::webbase::blobs::_VkMusicUserEventListen_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VkMusicUserEventListen* TrackOrPlaylistOrListenEvent::mutable_listen_event() {
  set_has_listen_event();
  if (listen_event_ == NULL) {
    listen_event_ = new ::ru::mail::go::webbase::blobs::VkMusicUserEventListen;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.listen_event)
  return listen_event_;
}
inline ::ru::mail::go::webbase::blobs::VkMusicUserEventListen* TrackOrPlaylistOrListenEvent::release_listen_event() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.listen_event)
  clear_has_listen_event();
  ::ru::mail::go::webbase::blobs::VkMusicUserEventListen* temp = listen_event_;
  listen_event_ = NULL;
  return temp;
}
inline void TrackOrPlaylistOrListenEvent::set_allocated_listen_event(::ru::mail::go::webbase::blobs::VkMusicUserEventListen* listen_event) {
  delete listen_event_;
  listen_event_ = listen_event;
  if (listen_event) {
    set_has_listen_event();
  } else {
    clear_has_listen_event();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.listen_event)
}

// optional .ru.mail.go.webbase.blobs.VkMusicPlaylist playlist = 3;
inline bool TrackOrPlaylistOrListenEvent::has_playlist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackOrPlaylistOrListenEvent::set_has_playlist() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrackOrPlaylistOrListenEvent::clear_has_playlist() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrackOrPlaylistOrListenEvent::clear_playlist() {
  if (playlist_ != NULL) playlist_->::ru::mail::go::webbase::blobs::VkMusicPlaylist::Clear();
  clear_has_playlist();
}
inline const ::ru::mail::go::webbase::blobs::VkMusicPlaylist& TrackOrPlaylistOrListenEvent::playlist() const {
  const ::ru::mail::go::webbase::blobs::VkMusicPlaylist* p = playlist_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.playlist)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicPlaylist*>(
      &::ru::mail::go::webbase::blobs::_VkMusicPlaylist_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VkMusicPlaylist* TrackOrPlaylistOrListenEvent::mutable_playlist() {
  set_has_playlist();
  if (playlist_ == NULL) {
    playlist_ = new ::ru::mail::go::webbase::blobs::VkMusicPlaylist;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.playlist)
  return playlist_;
}
inline ::ru::mail::go::webbase::blobs::VkMusicPlaylist* TrackOrPlaylistOrListenEvent::release_playlist() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.playlist)
  clear_has_playlist();
  ::ru::mail::go::webbase::blobs::VkMusicPlaylist* temp = playlist_;
  playlist_ = NULL;
  return temp;
}
inline void TrackOrPlaylistOrListenEvent::set_allocated_playlist(::ru::mail::go::webbase::blobs::VkMusicPlaylist* playlist) {
  delete playlist_;
  playlist_ = playlist;
  if (playlist) {
    set_has_playlist();
  } else {
    clear_has_playlist();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.playlist)
}

// -------------------------------------------------------------------

// VkUserEventHistory

// optional int64 user_id = 1;
inline bool VkUserEventHistory::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkUserEventHistory::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkUserEventHistory::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkUserEventHistory::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::int64 VkUserEventHistory::user_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkUserEventHistory.user_id)
  return user_id_;
}
inline void VkUserEventHistory::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkUserEventHistory.user_id)
}

// repeated .ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent history_entry = 2;
inline int VkUserEventHistory::history_entry_size() const {
  return history_entry_.size();
}
inline void VkUserEventHistory::clear_history_entry() {
  history_entry_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::TrackOrPlaylistOrListenEvent& VkUserEventHistory::history_entry(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkUserEventHistory.history_entry)
  return history_entry_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::TrackOrPlaylistOrListenEvent* VkUserEventHistory::mutable_history_entry(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkUserEventHistory.history_entry)
  return history_entry_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::TrackOrPlaylistOrListenEvent* VkUserEventHistory::add_history_entry() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkUserEventHistory.history_entry)
  return history_entry_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TrackOrPlaylistOrListenEvent >*
VkUserEventHistory::mutable_history_entry() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkUserEventHistory.history_entry)
  return &history_entry_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TrackOrPlaylistOrListenEvent >&
VkUserEventHistory::history_entry() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkUserEventHistory.history_entry)
  return history_entry_;
}

// -------------------------------------------------------------------

// VkMusicExtraData

// optional bool remove_ugc = 1;
inline bool VkMusicExtraData::has_remove_ugc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkMusicExtraData::set_has_remove_ugc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkMusicExtraData::clear_has_remove_ugc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkMusicExtraData::clear_remove_ugc() {
  remove_ugc_ = false;
  clear_has_remove_ugc();
}
inline bool VkMusicExtraData::remove_ugc() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicExtraData.remove_ugc)
  return remove_ugc_;
}
inline void VkMusicExtraData::set_remove_ugc(bool value) {
  set_has_remove_ugc();
  remove_ugc_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicExtraData.remove_ugc)
}

// -------------------------------------------------------------------

// VkMusicEvent

// optional uint64 time = 1;
inline bool VkMusicEvent::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkMusicEvent::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkMusicEvent::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkMusicEvent::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 VkMusicEvent::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicEvent.time)
  return time_;
}
inline void VkMusicEvent::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicEvent.time)
}

// optional uint32 position = 2;
inline bool VkMusicEvent::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VkMusicEvent::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VkMusicEvent::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VkMusicEvent::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 VkMusicEvent::position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicEvent.position)
  return position_;
}
inline void VkMusicEvent::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicEvent.position)
}

// optional .ru.mail.go.webbase.blobs.VkMusicEventType type = 3;
inline bool VkMusicEvent::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VkMusicEvent::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VkMusicEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VkMusicEvent::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ru::mail::go::webbase::blobs::VkMusicEventType VkMusicEvent::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicEvent.type)
  return static_cast< ::ru::mail::go::webbase::blobs::VkMusicEventType >(type_);
}
inline void VkMusicEvent::set_type(::ru::mail::go::webbase::blobs::VkMusicEventType value) {
  assert(::ru::mail::go::webbase::blobs::VkMusicEventType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicEvent.type)
}

// optional uint32 duration = 4;
inline bool VkMusicEvent::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VkMusicEvent::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VkMusicEvent::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VkMusicEvent::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 VkMusicEvent::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicEvent.duration)
  return duration_;
}
inline void VkMusicEvent::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicEvent.duration)
}

// optional uint64 uid = 5;
inline bool VkMusicEvent::has_uid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VkMusicEvent::set_has_uid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VkMusicEvent::clear_has_uid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VkMusicEvent::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 VkMusicEvent::uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicEvent.uid)
  return uid_;
}
inline void VkMusicEvent::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicEvent.uid)
}

// optional string extra = 6;
inline bool VkMusicEvent::has_extra() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkMusicEvent::set_has_extra() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkMusicEvent::clear_has_extra() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkMusicEvent::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extra();
}
inline const ::std::string& VkMusicEvent::extra() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicEvent.extra)
  return extra_.GetNoArena();
}
inline void VkMusicEvent::set_extra(const ::std::string& value) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicEvent.extra)
}
#if LANG_CXX11
inline void VkMusicEvent::set_extra(::std::string&& value) {
  set_has_extra();
  extra_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicEvent.extra)
}
#endif
inline void VkMusicEvent::set_extra(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicEvent.extra)
}
inline void VkMusicEvent::set_extra(const char* value, size_t size) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicEvent.extra)
}
inline ::std::string* VkMusicEvent::mutable_extra() {
  set_has_extra();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicEvent.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicEvent::release_extra() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicEvent.extra)
  clear_has_extra();
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicEvent::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    set_has_extra();
  } else {
    clear_has_extra();
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicEvent.extra)
}

// -------------------------------------------------------------------

// SessionOrVkMusicEvent

// optional .ru.mail.go.webbase.blobs.VkMusicSession session = 1;
inline bool SessionOrVkMusicEvent::has_session() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionOrVkMusicEvent::set_has_session() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionOrVkMusicEvent::clear_has_session() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionOrVkMusicEvent::clear_session() {
  if (session_ != NULL) session_->::ru::mail::go::webbase::blobs::VkMusicSession::Clear();
  clear_has_session();
}
inline const ::ru::mail::go::webbase::blobs::VkMusicSession& SessionOrVkMusicEvent::session() const {
  const ::ru::mail::go::webbase::blobs::VkMusicSession* p = session_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent.session)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicSession*>(
      &::ru::mail::go::webbase::blobs::_VkMusicSession_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VkMusicSession* SessionOrVkMusicEvent::mutable_session() {
  set_has_session();
  if (session_ == NULL) {
    session_ = new ::ru::mail::go::webbase::blobs::VkMusicSession;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent.session)
  return session_;
}
inline ::ru::mail::go::webbase::blobs::VkMusicSession* SessionOrVkMusicEvent::release_session() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent.session)
  clear_has_session();
  ::ru::mail::go::webbase::blobs::VkMusicSession* temp = session_;
  session_ = NULL;
  return temp;
}
inline void SessionOrVkMusicEvent::set_allocated_session(::ru::mail::go::webbase::blobs::VkMusicSession* session) {
  delete session_;
  session_ = session;
  if (session) {
    set_has_session();
  } else {
    clear_has_session();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent.session)
}

// optional .ru.mail.go.webbase.blobs.VkMusicEvent event = 2;
inline bool SessionOrVkMusicEvent::has_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionOrVkMusicEvent::set_has_event() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionOrVkMusicEvent::clear_has_event() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionOrVkMusicEvent::clear_event() {
  if (event_ != NULL) event_->::ru::mail::go::webbase::blobs::VkMusicEvent::Clear();
  clear_has_event();
}
inline const ::ru::mail::go::webbase::blobs::VkMusicEvent& SessionOrVkMusicEvent::event() const {
  const ::ru::mail::go::webbase::blobs::VkMusicEvent* p = event_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent.event)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicEvent*>(
      &::ru::mail::go::webbase::blobs::_VkMusicEvent_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VkMusicEvent* SessionOrVkMusicEvent::mutable_event() {
  set_has_event();
  if (event_ == NULL) {
    event_ = new ::ru::mail::go::webbase::blobs::VkMusicEvent;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent.event)
  return event_;
}
inline ::ru::mail::go::webbase::blobs::VkMusicEvent* SessionOrVkMusicEvent::release_event() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent.event)
  clear_has_event();
  ::ru::mail::go::webbase::blobs::VkMusicEvent* temp = event_;
  event_ = NULL;
  return temp;
}
inline void SessionOrVkMusicEvent::set_allocated_event(::ru::mail::go::webbase::blobs::VkMusicEvent* event) {
  delete event_;
  event_ = event;
  if (event) {
    set_has_event();
  } else {
    clear_has_event();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent.event)
}

// -------------------------------------------------------------------

// VkMusicSpellcheckerResponse

// optional .ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.Type type = 1;
inline bool VkMusicSpellcheckerResponse::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VkMusicSpellcheckerResponse::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VkMusicSpellcheckerResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VkMusicSpellcheckerResponse::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse_Type VkMusicSpellcheckerResponse::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.type)
  return static_cast< ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse_Type >(type_);
}
inline void VkMusicSpellcheckerResponse::set_type(::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse_Type value) {
  assert(::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.type)
}

// optional string fixed_query = 2;
inline bool VkMusicSpellcheckerResponse::has_fixed_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkMusicSpellcheckerResponse::set_has_fixed_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkMusicSpellcheckerResponse::clear_has_fixed_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkMusicSpellcheckerResponse::clear_fixed_query() {
  fixed_query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fixed_query();
}
inline const ::std::string& VkMusicSpellcheckerResponse::fixed_query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.fixed_query)
  return fixed_query_.GetNoArena();
}
inline void VkMusicSpellcheckerResponse::set_fixed_query(const ::std::string& value) {
  set_has_fixed_query();
  fixed_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.fixed_query)
}
#if LANG_CXX11
inline void VkMusicSpellcheckerResponse::set_fixed_query(::std::string&& value) {
  set_has_fixed_query();
  fixed_query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.fixed_query)
}
#endif
inline void VkMusicSpellcheckerResponse::set_fixed_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fixed_query();
  fixed_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.fixed_query)
}
inline void VkMusicSpellcheckerResponse::set_fixed_query(const char* value, size_t size) {
  set_has_fixed_query();
  fixed_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.fixed_query)
}
inline ::std::string* VkMusicSpellcheckerResponse::mutable_fixed_query() {
  set_has_fixed_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.fixed_query)
  return fixed_query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicSpellcheckerResponse::release_fixed_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.fixed_query)
  clear_has_fixed_query();
  return fixed_query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicSpellcheckerResponse::set_allocated_fixed_query(::std::string* fixed_query) {
  if (fixed_query != NULL) {
    set_has_fixed_query();
  } else {
    clear_has_fixed_query();
  }
  fixed_query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fixed_query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.fixed_query)
}

// optional bool applied = 3;
inline bool VkMusicSpellcheckerResponse::has_applied() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkMusicSpellcheckerResponse::set_has_applied() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkMusicSpellcheckerResponse::clear_has_applied() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkMusicSpellcheckerResponse::clear_applied() {
  applied_ = false;
  clear_has_applied();
}
inline bool VkMusicSpellcheckerResponse::applied() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.applied)
  return applied_;
}
inline void VkMusicSpellcheckerResponse::set_applied(bool value) {
  set_has_applied();
  applied_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.applied)
}

// -------------------------------------------------------------------

// VkMusicSession

// optional string query = 1;
inline bool VkMusicSession::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkMusicSession::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkMusicSession::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkMusicSession::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& VkMusicSession::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.query)
  return query_.GetNoArena();
}
inline void VkMusicSession::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.query)
}
#if LANG_CXX11
inline void VkMusicSession::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicSession.query)
}
#endif
inline void VkMusicSession::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicSession.query)
}
inline void VkMusicSession::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicSession.query)
}
inline ::std::string* VkMusicSession::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicSession.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicSession::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicSession.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicSession::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicSession.query)
}

// optional uint64 uid = 2;
inline bool VkMusicSession::has_uid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VkMusicSession::set_has_uid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VkMusicSession::clear_has_uid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VkMusicSession::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 VkMusicSession::uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.uid)
  return uid_;
}
inline void VkMusicSession::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.uid)
}

// optional uint64 time = 3;
inline bool VkMusicSession::has_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VkMusicSession::set_has_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VkMusicSession::clear_has_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VkMusicSession::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 VkMusicSession::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.time)
  return time_;
}
inline void VkMusicSession::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.time)
}

// repeated .ru.mail.go.webbase.blobs.VkMusicEvent events = 4;
inline int VkMusicSession::events_size() const {
  return events_.size();
}
inline void VkMusicSession::clear_events() {
  events_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::VkMusicEvent& VkMusicSession::events(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.events)
  return events_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::VkMusicEvent* VkMusicSession::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicSession.events)
  return events_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::VkMusicEvent* VkMusicSession::add_events() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicSession.events)
  return events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkMusicEvent >*
VkMusicSession::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicSession.events)
  return &events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkMusicEvent >&
VkMusicSession::events() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicSession.events)
  return events_;
}

// repeated string items = 5;
inline int VkMusicSession::items_size() const {
  return items_.size();
}
inline void VkMusicSession::clear_items() {
  items_.Clear();
}
inline const ::std::string& VkMusicSession::items(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.items)
  return items_.Get(index);
}
inline ::std::string* VkMusicSession::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicSession.items)
  return items_.Mutable(index);
}
inline void VkMusicSession::set_items(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.items)
  items_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VkMusicSession::set_items(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.items)
  items_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VkMusicSession::set_items(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicSession.items)
}
inline void VkMusicSession::set_items(int index, const char* value, size_t size) {
  items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicSession.items)
}
inline ::std::string* VkMusicSession::add_items() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkMusicSession.items)
  return items_.Add();
}
inline void VkMusicSession::add_items(const ::std::string& value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicSession.items)
}
#if LANG_CXX11
inline void VkMusicSession::add_items(::std::string&& value) {
  items_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicSession.items)
}
#endif
inline void VkMusicSession::add_items(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkMusicSession.items)
}
inline void VkMusicSession::add_items(const char* value, size_t size) {
  items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkMusicSession.items)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkMusicSession::items() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicSession.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VkMusicSession::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicSession.items)
  return &items_;
}

// optional .ru.mail.go.webbase.blobs.VkMusicSessionType type = 6;
inline bool VkMusicSession::has_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void VkMusicSession::set_has_type() {
  _has_bits_[0] |= 0x00040000u;
}
inline void VkMusicSession::clear_has_type() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void VkMusicSession::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ru::mail::go::webbase::blobs::VkMusicSessionType VkMusicSession::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.type)
  return static_cast< ::ru::mail::go::webbase::blobs::VkMusicSessionType >(type_);
}
inline void VkMusicSession::set_type(::ru::mail::go::webbase::blobs::VkMusicSessionType value) {
  assert(::ru::mail::go::webbase::blobs::VkMusicSessionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.type)
}

// optional uint32 split = 7;
inline bool VkMusicSession::has_split() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VkMusicSession::set_has_split() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VkMusicSession::clear_has_split() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VkMusicSession::clear_split() {
  split_ = 0u;
  clear_has_split();
}
inline ::google::protobuf::uint32 VkMusicSession::split() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.split)
  return split_;
}
inline void VkMusicSession::set_split(::google::protobuf::uint32 value) {
  set_has_split();
  split_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.split)
}

// optional string qid = 8;
inline bool VkMusicSession::has_qid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkMusicSession::set_has_qid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkMusicSession::clear_has_qid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkMusicSession::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qid();
}
inline const ::std::string& VkMusicSession::qid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.qid)
  return qid_.GetNoArena();
}
inline void VkMusicSession::set_qid(const ::std::string& value) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.qid)
}
#if LANG_CXX11
inline void VkMusicSession::set_qid(::std::string&& value) {
  set_has_qid();
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicSession.qid)
}
#endif
inline void VkMusicSession::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicSession.qid)
}
inline void VkMusicSession::set_qid(const char* value, size_t size) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicSession.qid)
}
inline ::std::string* VkMusicSession::mutable_qid() {
  set_has_qid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicSession.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicSession::release_qid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicSession.qid)
  clear_has_qid();
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicSession::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    set_has_qid();
  } else {
    clear_has_qid();
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicSession.qid)
}

// optional uint64 items_num = 9;
inline bool VkMusicSession::has_items_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VkMusicSession::set_has_items_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VkMusicSession::clear_has_items_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VkMusicSession::clear_items_num() {
  items_num_ = GOOGLE_ULONGLONG(0);
  clear_has_items_num();
}
inline ::google::protobuf::uint64 VkMusicSession::items_num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.items_num)
  return items_num_;
}
inline void VkMusicSession::set_items_num(::google::protobuf::uint64 value) {
  set_has_items_num();
  items_num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.items_num)
}

// optional uint64 official_tracks_num = 10;
inline bool VkMusicSession::has_official_tracks_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VkMusicSession::set_has_official_tracks_num() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VkMusicSession::clear_has_official_tracks_num() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VkMusicSession::clear_official_tracks_num() {
  official_tracks_num_ = GOOGLE_ULONGLONG(0);
  clear_has_official_tracks_num();
}
inline ::google::protobuf::uint64 VkMusicSession::official_tracks_num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.official_tracks_num)
  return official_tracks_num_;
}
inline void VkMusicSession::set_official_tracks_num(::google::protobuf::uint64 value) {
  set_has_official_tracks_num();
  official_tracks_num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.official_tracks_num)
}

// optional int64 vk_qid = 11;
inline bool VkMusicSession::has_vk_qid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VkMusicSession::set_has_vk_qid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VkMusicSession::clear_has_vk_qid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VkMusicSession::clear_vk_qid() {
  vk_qid_ = GOOGLE_LONGLONG(0);
  clear_has_vk_qid();
}
inline ::google::protobuf::int64 VkMusicSession::vk_qid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.vk_qid)
  return vk_qid_;
}
inline void VkMusicSession::set_vk_qid(::google::protobuf::int64 value) {
  set_has_vk_qid();
  vk_qid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.vk_qid)
}

// optional double reply_quality = 12;
inline bool VkMusicSession::has_reply_quality() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VkMusicSession::set_has_reply_quality() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VkMusicSession::clear_has_reply_quality() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VkMusicSession::clear_reply_quality() {
  reply_quality_ = 0;
  clear_has_reply_quality();
}
inline double VkMusicSession::reply_quality() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.reply_quality)
  return reply_quality_;
}
inline void VkMusicSession::set_reply_quality(double value) {
  set_has_reply_quality();
  reply_quality_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.reply_quality)
}

// optional string query_class = 13;
inline bool VkMusicSession::has_query_class() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VkMusicSession::set_has_query_class() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VkMusicSession::clear_has_query_class() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VkMusicSession::clear_query_class() {
  query_class_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_class();
}
inline const ::std::string& VkMusicSession::query_class() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.query_class)
  return query_class_.GetNoArena();
}
inline void VkMusicSession::set_query_class(const ::std::string& value) {
  set_has_query_class();
  query_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.query_class)
}
#if LANG_CXX11
inline void VkMusicSession::set_query_class(::std::string&& value) {
  set_has_query_class();
  query_class_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicSession.query_class)
}
#endif
inline void VkMusicSession::set_query_class(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_class();
  query_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicSession.query_class)
}
inline void VkMusicSession::set_query_class(const char* value, size_t size) {
  set_has_query_class();
  query_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicSession.query_class)
}
inline ::std::string* VkMusicSession::mutable_query_class() {
  set_has_query_class();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicSession.query_class)
  return query_class_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicSession::release_query_class() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicSession.query_class)
  clear_has_query_class();
  return query_class_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicSession::set_allocated_query_class(::std::string* query_class) {
  if (query_class != NULL) {
    set_has_query_class();
  } else {
    clear_has_query_class();
  }
  query_class_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_class);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicSession.query_class)
}

// optional int64 as_events_found = 14;
inline bool VkMusicSession::has_as_events_found() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VkMusicSession::set_has_as_events_found() {
  _has_bits_[0] |= 0x00004000u;
}
inline void VkMusicSession::clear_has_as_events_found() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void VkMusicSession::clear_as_events_found() {
  as_events_found_ = GOOGLE_LONGLONG(0);
  clear_has_as_events_found();
}
inline ::google::protobuf::int64 VkMusicSession::as_events_found() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.as_events_found)
  return as_events_found_;
}
inline void VkMusicSession::set_as_events_found(::google::protobuf::int64 value) {
  set_has_as_events_found();
  as_events_found_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.as_events_found)
}

// optional int64 favourite_tracks = 15;
inline bool VkMusicSession::has_favourite_tracks() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VkMusicSession::set_has_favourite_tracks() {
  _has_bits_[0] |= 0x00008000u;
}
inline void VkMusicSession::clear_has_favourite_tracks() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void VkMusicSession::clear_favourite_tracks() {
  favourite_tracks_ = GOOGLE_LONGLONG(0);
  clear_has_favourite_tracks();
}
inline ::google::protobuf::int64 VkMusicSession::favourite_tracks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.favourite_tracks)
  return favourite_tracks_;
}
inline void VkMusicSession::set_favourite_tracks(::google::protobuf::int64 value) {
  set_has_favourite_tracks();
  favourite_tracks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.favourite_tracks)
}

// optional int64 favourite_tracks_boosted = 16;
inline bool VkMusicSession::has_favourite_tracks_boosted() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void VkMusicSession::set_has_favourite_tracks_boosted() {
  _has_bits_[0] |= 0x00010000u;
}
inline void VkMusicSession::clear_has_favourite_tracks_boosted() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void VkMusicSession::clear_favourite_tracks_boosted() {
  favourite_tracks_boosted_ = GOOGLE_LONGLONG(0);
  clear_has_favourite_tracks_boosted();
}
inline ::google::protobuf::int64 VkMusicSession::favourite_tracks_boosted() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.favourite_tracks_boosted)
  return favourite_tracks_boosted_;
}
inline void VkMusicSession::set_favourite_tracks_boosted(::google::protobuf::int64 value) {
  set_has_favourite_tracks_boosted();
  favourite_tracks_boosted_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.favourite_tracks_boosted)
}

// optional uint32 qddb_sessions_num_log2 = 17;
inline bool VkMusicSession::has_qddb_sessions_num_log2() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VkMusicSession::set_has_qddb_sessions_num_log2() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VkMusicSession::clear_has_qddb_sessions_num_log2() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VkMusicSession::clear_qddb_sessions_num_log2() {
  qddb_sessions_num_log2_ = 0u;
  clear_has_qddb_sessions_num_log2();
}
inline ::google::protobuf::uint32 VkMusicSession::qddb_sessions_num_log2() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.qddb_sessions_num_log2)
  return qddb_sessions_num_log2_;
}
inline void VkMusicSession::set_qddb_sessions_num_log2(::google::protobuf::uint32 value) {
  set_has_qddb_sessions_num_log2();
  qddb_sessions_num_log2_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.qddb_sessions_num_log2)
}

// optional string client = 18;
inline bool VkMusicSession::has_client() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VkMusicSession::set_has_client() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VkMusicSession::clear_has_client() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VkMusicSession::clear_client() {
  client_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client();
}
inline const ::std::string& VkMusicSession::client() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.client)
  return client_.GetNoArena();
}
inline void VkMusicSession::set_client(const ::std::string& value) {
  set_has_client();
  client_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.client)
}
#if LANG_CXX11
inline void VkMusicSession::set_client(::std::string&& value) {
  set_has_client();
  client_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicSession.client)
}
#endif
inline void VkMusicSession::set_client(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client();
  client_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicSession.client)
}
inline void VkMusicSession::set_client(const char* value, size_t size) {
  set_has_client();
  client_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicSession.client)
}
inline ::std::string* VkMusicSession::mutable_client() {
  set_has_client();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicSession.client)
  return client_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicSession::release_client() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicSession.client)
  clear_has_client();
  return client_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicSession::set_allocated_client(::std::string* client) {
  if (client != NULL) {
    set_has_client();
  } else {
    clear_has_client();
  }
  client_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicSession.client)
}

// optional .ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse spellchecker_response = 19;
inline bool VkMusicSession::has_spellchecker_response() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VkMusicSession::set_has_spellchecker_response() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VkMusicSession::clear_has_spellchecker_response() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VkMusicSession::clear_spellchecker_response() {
  if (spellchecker_response_ != NULL) spellchecker_response_->::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse::Clear();
  clear_has_spellchecker_response();
}
inline const ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse& VkMusicSession::spellchecker_response() const {
  const ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse* p = spellchecker_response_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.spellchecker_response)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse*>(
      &::ru::mail::go::webbase::blobs::_VkMusicSpellcheckerResponse_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse* VkMusicSession::mutable_spellchecker_response() {
  set_has_spellchecker_response();
  if (spellchecker_response_ == NULL) {
    spellchecker_response_ = new ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicSession.spellchecker_response)
  return spellchecker_response_;
}
inline ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse* VkMusicSession::release_spellchecker_response() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicSession.spellchecker_response)
  clear_has_spellchecker_response();
  ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse* temp = spellchecker_response_;
  spellchecker_response_ = NULL;
  return temp;
}
inline void VkMusicSession::set_allocated_spellchecker_response(::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse* spellchecker_response) {
  delete spellchecker_response_;
  spellchecker_response_ = spellchecker_response;
  if (spellchecker_response) {
    set_has_spellchecker_response();
  } else {
    clear_has_spellchecker_response();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicSession.spellchecker_response)
}

// optional uint32 user_age = 20;
inline bool VkMusicSession::has_user_age() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void VkMusicSession::set_has_user_age() {
  _has_bits_[0] |= 0x00020000u;
}
inline void VkMusicSession::clear_has_user_age() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void VkMusicSession::clear_user_age() {
  user_age_ = 0u;
  clear_has_user_age();
}
inline ::google::protobuf::uint32 VkMusicSession::user_age() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.user_age)
  return user_age_;
}
inline void VkMusicSession::set_user_age(::google::protobuf::uint32 value) {
  set_has_user_age();
  user_age_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.user_age)
}

// optional .ru.mail.go.webbase.blobs.VkMusicSession.Sex user_sex = 21;
inline bool VkMusicSession::has_user_sex() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void VkMusicSession::set_has_user_sex() {
  _has_bits_[0] |= 0x00080000u;
}
inline void VkMusicSession::clear_has_user_sex() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void VkMusicSession::clear_user_sex() {
  user_sex_ = 1;
  clear_has_user_sex();
}
inline ::ru::mail::go::webbase::blobs::VkMusicSession_Sex VkMusicSession::user_sex() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.user_sex)
  return static_cast< ::ru::mail::go::webbase::blobs::VkMusicSession_Sex >(user_sex_);
}
inline void VkMusicSession::set_user_sex(::ru::mail::go::webbase::blobs::VkMusicSession_Sex value) {
  assert(::ru::mail::go::webbase::blobs::VkMusicSession_Sex_IsValid(value));
  set_has_user_sex();
  user_sex_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.user_sex)
}

// optional string ref = 22;
inline bool VkMusicSession::has_ref() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VkMusicSession::set_has_ref() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VkMusicSession::clear_has_ref() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VkMusicSession::clear_ref() {
  ref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ref();
}
inline const ::std::string& VkMusicSession::ref() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.ref)
  return ref_.GetNoArena();
}
inline void VkMusicSession::set_ref(const ::std::string& value) {
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.ref)
}
#if LANG_CXX11
inline void VkMusicSession::set_ref(::std::string&& value) {
  set_has_ref();
  ref_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicSession.ref)
}
#endif
inline void VkMusicSession::set_ref(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicSession.ref)
}
inline void VkMusicSession::set_ref(const char* value, size_t size) {
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicSession.ref)
}
inline ::std::string* VkMusicSession::mutable_ref() {
  set_has_ref();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicSession.ref)
  return ref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicSession::release_ref() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicSession.ref)
  clear_has_ref();
  return ref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicSession::set_allocated_ref(::std::string* ref) {
  if (ref != NULL) {
    set_has_ref();
  } else {
    clear_has_ref();
  }
  ref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ref);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicSession.ref)
}

// -------------------------------------------------------------------

// VkMusicTrackStatsForQuery

// optional string query = 1;
inline bool VkMusicTrackStatsForQuery::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkMusicTrackStatsForQuery::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkMusicTrackStatsForQuery::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkMusicTrackStatsForQuery::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& VkMusicTrackStatsForQuery::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.query)
  return query_.GetNoArena();
}
inline void VkMusicTrackStatsForQuery::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.query)
}
#if LANG_CXX11
inline void VkMusicTrackStatsForQuery::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.query)
}
#endif
inline void VkMusicTrackStatsForQuery::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.query)
}
inline void VkMusicTrackStatsForQuery::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.query)
}
inline ::std::string* VkMusicTrackStatsForQuery::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicTrackStatsForQuery::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicTrackStatsForQuery::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.query)
}

// optional uint64 sessionCount = 2;
inline bool VkMusicTrackStatsForQuery::has_sessioncount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VkMusicTrackStatsForQuery::set_has_sessioncount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VkMusicTrackStatsForQuery::clear_has_sessioncount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VkMusicTrackStatsForQuery::clear_sessioncount() {
  sessioncount_ = GOOGLE_ULONGLONG(0);
  clear_has_sessioncount();
}
inline ::google::protobuf::uint64 VkMusicTrackStatsForQuery::sessioncount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.sessionCount)
  return sessioncount_;
}
inline void VkMusicTrackStatsForQuery::set_sessioncount(::google::protobuf::uint64 value) {
  set_has_sessioncount();
  sessioncount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.sessionCount)
}

// optional uint64 performerFilterSessionCount = 3;
inline bool VkMusicTrackStatsForQuery::has_performerfiltersessioncount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VkMusicTrackStatsForQuery::set_has_performerfiltersessioncount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VkMusicTrackStatsForQuery::clear_has_performerfiltersessioncount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VkMusicTrackStatsForQuery::clear_performerfiltersessioncount() {
  performerfiltersessioncount_ = GOOGLE_ULONGLONG(0);
  clear_has_performerfiltersessioncount();
}
inline ::google::protobuf::uint64 VkMusicTrackStatsForQuery::performerfiltersessioncount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.performerFilterSessionCount)
  return performerfiltersessioncount_;
}
inline void VkMusicTrackStatsForQuery::set_performerfiltersessioncount(::google::protobuf::uint64 value) {
  set_has_performerfiltersessioncount();
  performerfiltersessioncount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.performerFilterSessionCount)
}

// optional uint64 timesClicked = 4;
inline bool VkMusicTrackStatsForQuery::has_timesclicked() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VkMusicTrackStatsForQuery::set_has_timesclicked() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VkMusicTrackStatsForQuery::clear_has_timesclicked() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VkMusicTrackStatsForQuery::clear_timesclicked() {
  timesclicked_ = GOOGLE_ULONGLONG(0);
  clear_has_timesclicked();
}
inline ::google::protobuf::uint64 VkMusicTrackStatsForQuery::timesclicked() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.timesClicked)
  return timesclicked_;
}
inline void VkMusicTrackStatsForQuery::set_timesclicked(::google::protobuf::uint64 value) {
  set_has_timesclicked();
  timesclicked_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.timesClicked)
}

// optional uint64 timesLongClicked = 5;
inline bool VkMusicTrackStatsForQuery::has_timeslongclicked() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VkMusicTrackStatsForQuery::set_has_timeslongclicked() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VkMusicTrackStatsForQuery::clear_has_timeslongclicked() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VkMusicTrackStatsForQuery::clear_timeslongclicked() {
  timeslongclicked_ = GOOGLE_ULONGLONG(0);
  clear_has_timeslongclicked();
}
inline ::google::protobuf::uint64 VkMusicTrackStatsForQuery::timeslongclicked() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.timesLongClicked)
  return timeslongclicked_;
}
inline void VkMusicTrackStatsForQuery::set_timeslongclicked(::google::protobuf::uint64 value) {
  set_has_timeslongclicked();
  timeslongclicked_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.timesLongClicked)
}

// optional uint64 timesLastClicked = 6;
inline bool VkMusicTrackStatsForQuery::has_timeslastclicked() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VkMusicTrackStatsForQuery::set_has_timeslastclicked() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VkMusicTrackStatsForQuery::clear_has_timeslastclicked() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VkMusicTrackStatsForQuery::clear_timeslastclicked() {
  timeslastclicked_ = GOOGLE_ULONGLONG(0);
  clear_has_timeslastclicked();
}
inline ::google::protobuf::uint64 VkMusicTrackStatsForQuery::timeslastclicked() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.timesLastClicked)
  return timeslastclicked_;
}
inline void VkMusicTrackStatsForQuery::set_timeslastclicked(::google::protobuf::uint64 value) {
  set_has_timeslastclicked();
  timeslastclicked_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.timesLastClicked)
}

// optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 7;
inline bool VkMusicTrackStatsForQuery::has_track() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkMusicTrackStatsForQuery::set_has_track() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkMusicTrackStatsForQuery::clear_has_track() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkMusicTrackStatsForQuery::clear_track() {
  if (track_ != NULL) track_->::ru::mail::go::webbase::blobs::VkMusicTrack::Clear();
  clear_has_track();
}
inline const ::ru::mail::go::webbase::blobs::VkMusicTrack& VkMusicTrackStatsForQuery::track() const {
  const ::ru::mail::go::webbase::blobs::VkMusicTrack* p = track_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.track)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicTrack*>(
      &::ru::mail::go::webbase::blobs::_VkMusicTrack_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VkMusicTrack* VkMusicTrackStatsForQuery::mutable_track() {
  set_has_track();
  if (track_ == NULL) {
    track_ = new ::ru::mail::go::webbase::blobs::VkMusicTrack;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.track)
  return track_;
}
inline ::ru::mail::go::webbase::blobs::VkMusicTrack* VkMusicTrackStatsForQuery::release_track() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.track)
  clear_has_track();
  ::ru::mail::go::webbase::blobs::VkMusicTrack* temp = track_;
  track_ = NULL;
  return temp;
}
inline void VkMusicTrackStatsForQuery::set_allocated_track(::ru::mail::go::webbase::blobs::VkMusicTrack* track) {
  delete track_;
  track_ = track;
  if (track) {
    set_has_track();
  } else {
    clear_has_track();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.track)
}

// -------------------------------------------------------------------

// VkMusicPerformer

// optional int64 performer_id = 1;
inline bool VkMusicPerformer::has_performer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VkMusicPerformer::set_has_performer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VkMusicPerformer::clear_has_performer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VkMusicPerformer::clear_performer_id() {
  performer_id_ = GOOGLE_LONGLONG(0);
  clear_has_performer_id();
}
inline ::google::protobuf::int64 VkMusicPerformer::performer_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPerformer.performer_id)
  return performer_id_;
}
inline void VkMusicPerformer::set_performer_id(::google::protobuf::int64 value) {
  set_has_performer_id();
  performer_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPerformer.performer_id)
}

// optional string name = 2;
inline bool VkMusicPerformer::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkMusicPerformer::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkMusicPerformer::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkMusicPerformer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& VkMusicPerformer::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPerformer.name)
  return name_.GetNoArena();
}
inline void VkMusicPerformer::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPerformer.name)
}
#if LANG_CXX11
inline void VkMusicPerformer::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicPerformer.name)
}
#endif
inline void VkMusicPerformer::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicPerformer.name)
}
inline void VkMusicPerformer::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicPerformer.name)
}
inline ::std::string* VkMusicPerformer::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPerformer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicPerformer::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicPerformer.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicPerformer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicPerformer.name)
}

// optional int64 timestamp = 3;
inline bool VkMusicPerformer::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VkMusicPerformer::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VkMusicPerformer::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VkMusicPerformer::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 VkMusicPerformer::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPerformer.timestamp)
  return timestamp_;
}
inline void VkMusicPerformer::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPerformer.timestamp)
}

// optional int64 followers = 4;
inline bool VkMusicPerformer::has_followers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VkMusicPerformer::set_has_followers() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VkMusicPerformer::clear_has_followers() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VkMusicPerformer::clear_followers() {
  followers_ = GOOGLE_LONGLONG(0);
  clear_has_followers();
}
inline ::google::protobuf::int64 VkMusicPerformer::followers() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPerformer.followers)
  return followers_;
}
inline void VkMusicPerformer::set_followers(::google::protobuf::int64 value) {
  set_has_followers();
  followers_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPerformer.followers)
}

// optional int64 times_listened = 5;
inline bool VkMusicPerformer::has_times_listened() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VkMusicPerformer::set_has_times_listened() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VkMusicPerformer::clear_has_times_listened() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VkMusicPerformer::clear_times_listened() {
  times_listened_ = GOOGLE_LONGLONG(0);
  clear_has_times_listened();
}
inline ::google::protobuf::int64 VkMusicPerformer::times_listened() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPerformer.times_listened)
  return times_listened_;
}
inline void VkMusicPerformer::set_times_listened(::google::protobuf::int64 value) {
  set_has_times_listened();
  times_listened_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPerformer.times_listened)
}

// optional int64 times_listened_last_month = 6;
inline bool VkMusicPerformer::has_times_listened_last_month() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VkMusicPerformer::set_has_times_listened_last_month() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VkMusicPerformer::clear_has_times_listened_last_month() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VkMusicPerformer::clear_times_listened_last_month() {
  times_listened_last_month_ = GOOGLE_LONGLONG(0);
  clear_has_times_listened_last_month();
}
inline ::google::protobuf::int64 VkMusicPerformer::times_listened_last_month() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPerformer.times_listened_last_month)
  return times_listened_last_month_;
}
inline void VkMusicPerformer::set_times_listened_last_month(::google::protobuf::int64 value) {
  set_has_times_listened_last_month();
  times_listened_last_month_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPerformer.times_listened_last_month)
}

// optional int64 times_listened_last_week = 7;
inline bool VkMusicPerformer::has_times_listened_last_week() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VkMusicPerformer::set_has_times_listened_last_week() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VkMusicPerformer::clear_has_times_listened_last_week() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VkMusicPerformer::clear_times_listened_last_week() {
  times_listened_last_week_ = GOOGLE_LONGLONG(0);
  clear_has_times_listened_last_week();
}
inline ::google::protobuf::int64 VkMusicPerformer::times_listened_last_week() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPerformer.times_listened_last_week)
  return times_listened_last_week_;
}
inline void VkMusicPerformer::set_times_listened_last_week(::google::protobuf::int64 value) {
  set_has_times_listened_last_week();
  times_listened_last_week_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPerformer.times_listened_last_week)
}

// repeated string tags = 8;
inline int VkMusicPerformer::tags_size() const {
  return tags_.size();
}
inline void VkMusicPerformer::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& VkMusicPerformer::tags(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
  return tags_.Get(index);
}
inline ::std::string* VkMusicPerformer::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
  return tags_.Mutable(index);
}
inline void VkMusicPerformer::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VkMusicPerformer::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VkMusicPerformer::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
}
inline void VkMusicPerformer::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
}
inline ::std::string* VkMusicPerformer::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
  return tags_.Add();
}
inline void VkMusicPerformer::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
}
#if LANG_CXX11
inline void VkMusicPerformer::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
}
#endif
inline void VkMusicPerformer::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
}
inline void VkMusicPerformer::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkMusicPerformer::tags() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VkMusicPerformer::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
  return &tags_;
}

// optional int64 timestamp_ms = 9;
inline bool VkMusicPerformer::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VkMusicPerformer::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VkMusicPerformer::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VkMusicPerformer::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 VkMusicPerformer::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPerformer.timestamp_ms)
  return timestamp_ms_;
}
inline void VkMusicPerformer::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPerformer.timestamp_ms)
}

// optional string name_alternatives = 10;
inline bool VkMusicPerformer::has_name_alternatives() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkMusicPerformer::set_has_name_alternatives() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkMusicPerformer::clear_has_name_alternatives() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkMusicPerformer::clear_name_alternatives() {
  name_alternatives_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name_alternatives();
}
inline const ::std::string& VkMusicPerformer::name_alternatives() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPerformer.name_alternatives)
  return name_alternatives_.GetNoArena();
}
inline void VkMusicPerformer::set_name_alternatives(const ::std::string& value) {
  set_has_name_alternatives();
  name_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPerformer.name_alternatives)
}
#if LANG_CXX11
inline void VkMusicPerformer::set_name_alternatives(::std::string&& value) {
  set_has_name_alternatives();
  name_alternatives_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicPerformer.name_alternatives)
}
#endif
inline void VkMusicPerformer::set_name_alternatives(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name_alternatives();
  name_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicPerformer.name_alternatives)
}
inline void VkMusicPerformer::set_name_alternatives(const char* value, size_t size) {
  set_has_name_alternatives();
  name_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicPerformer.name_alternatives)
}
inline ::std::string* VkMusicPerformer::mutable_name_alternatives() {
  set_has_name_alternatives();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPerformer.name_alternatives)
  return name_alternatives_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicPerformer::release_name_alternatives() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicPerformer.name_alternatives)
  clear_has_name_alternatives();
  return name_alternatives_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicPerformer::set_allocated_name_alternatives(::std::string* name_alternatives) {
  if (name_alternatives != NULL) {
    set_has_name_alternatives();
  } else {
    clear_has_name_alternatives();
  }
  name_alternatives_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_alternatives);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicPerformer.name_alternatives)
}

// -------------------------------------------------------------------

// VkMusicClick

// optional int64 qid = 1;
inline bool VkMusicClick::has_qid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VkMusicClick::set_has_qid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VkMusicClick::clear_has_qid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VkMusicClick::clear_qid() {
  qid_ = GOOGLE_LONGLONG(0);
  clear_has_qid();
}
inline ::google::protobuf::int64 VkMusicClick::qid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClick.qid)
  return qid_;
}
inline void VkMusicClick::set_qid(::google::protobuf::int64 value) {
  set_has_qid();
  qid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClick.qid)
}

// optional int64 user_id = 2;
inline bool VkMusicClick::has_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VkMusicClick::set_has_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VkMusicClick::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VkMusicClick::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::int64 VkMusicClick::user_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClick.user_id)
  return user_id_;
}
inline void VkMusicClick::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClick.user_id)
}

// optional string click_type = 3;
inline bool VkMusicClick::has_click_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkMusicClick::set_has_click_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkMusicClick::clear_has_click_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkMusicClick::clear_click_type() {
  click_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_click_type();
}
inline const ::std::string& VkMusicClick::click_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClick.click_type)
  return click_type_.GetNoArena();
}
inline void VkMusicClick::set_click_type(const ::std::string& value) {
  set_has_click_type();
  click_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClick.click_type)
}
#if LANG_CXX11
inline void VkMusicClick::set_click_type(::std::string&& value) {
  set_has_click_type();
  click_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicClick.click_type)
}
#endif
inline void VkMusicClick::set_click_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_click_type();
  click_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicClick.click_type)
}
inline void VkMusicClick::set_click_type(const char* value, size_t size) {
  set_has_click_type();
  click_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicClick.click_type)
}
inline ::std::string* VkMusicClick::mutable_click_type() {
  set_has_click_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicClick.click_type)
  return click_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicClick::release_click_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicClick.click_type)
  clear_has_click_type();
  return click_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicClick::set_allocated_click_type(::std::string* click_type) {
  if (click_type != NULL) {
    set_has_click_type();
  } else {
    clear_has_click_type();
  }
  click_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), click_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicClick.click_type)
}

// optional uint64 click_position = 4;
inline bool VkMusicClick::has_click_position() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VkMusicClick::set_has_click_position() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VkMusicClick::clear_has_click_position() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VkMusicClick::clear_click_position() {
  click_position_ = GOOGLE_ULONGLONG(0);
  clear_has_click_position();
}
inline ::google::protobuf::uint64 VkMusicClick::click_position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClick.click_position)
  return click_position_;
}
inline void VkMusicClick::set_click_position(::google::protobuf::uint64 value) {
  set_has_click_position();
  click_position_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClick.click_position)
}

// optional string query_text = 5;
inline bool VkMusicClick::has_query_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkMusicClick::set_has_query_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkMusicClick::clear_has_query_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkMusicClick::clear_query_text() {
  query_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_text();
}
inline const ::std::string& VkMusicClick::query_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClick.query_text)
  return query_text_.GetNoArena();
}
inline void VkMusicClick::set_query_text(const ::std::string& value) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClick.query_text)
}
#if LANG_CXX11
inline void VkMusicClick::set_query_text(::std::string&& value) {
  set_has_query_text();
  query_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicClick.query_text)
}
#endif
inline void VkMusicClick::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicClick.query_text)
}
inline void VkMusicClick::set_query_text(const char* value, size_t size) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicClick.query_text)
}
inline ::std::string* VkMusicClick::mutable_query_text() {
  set_has_query_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicClick.query_text)
  return query_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicClick::release_query_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicClick.query_text)
  clear_has_query_text();
  return query_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicClick::set_allocated_query_text(::std::string* query_text) {
  if (query_text != NULL) {
    set_has_query_text();
  } else {
    clear_has_query_text();
  }
  query_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicClick.query_text)
}

// optional string service_name = 6;
inline bool VkMusicClick::has_service_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VkMusicClick::set_has_service_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VkMusicClick::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VkMusicClick::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service_name();
}
inline const ::std::string& VkMusicClick::service_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClick.service_name)
  return service_name_.GetNoArena();
}
inline void VkMusicClick::set_service_name(const ::std::string& value) {
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClick.service_name)
}
#if LANG_CXX11
inline void VkMusicClick::set_service_name(::std::string&& value) {
  set_has_service_name();
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicClick.service_name)
}
#endif
inline void VkMusicClick::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicClick.service_name)
}
inline void VkMusicClick::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicClick.service_name)
}
inline ::std::string* VkMusicClick::mutable_service_name() {
  set_has_service_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicClick.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicClick::release_service_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicClick.service_name)
  clear_has_service_name();
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicClick::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    set_has_service_name();
  } else {
    clear_has_service_name();
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicClick.service_name)
}

// optional string block_name = 7;
inline bool VkMusicClick::has_block_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VkMusicClick::set_has_block_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VkMusicClick::clear_has_block_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VkMusicClick::clear_block_name() {
  block_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_block_name();
}
inline const ::std::string& VkMusicClick::block_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClick.block_name)
  return block_name_.GetNoArena();
}
inline void VkMusicClick::set_block_name(const ::std::string& value) {
  set_has_block_name();
  block_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClick.block_name)
}
#if LANG_CXX11
inline void VkMusicClick::set_block_name(::std::string&& value) {
  set_has_block_name();
  block_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicClick.block_name)
}
#endif
inline void VkMusicClick::set_block_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_block_name();
  block_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicClick.block_name)
}
inline void VkMusicClick::set_block_name(const char* value, size_t size) {
  set_has_block_name();
  block_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicClick.block_name)
}
inline ::std::string* VkMusicClick::mutable_block_name() {
  set_has_block_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicClick.block_name)
  return block_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicClick::release_block_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicClick.block_name)
  clear_has_block_name();
  return block_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicClick::set_allocated_block_name(::std::string* block_name) {
  if (block_name != NULL) {
    set_has_block_name();
  } else {
    clear_has_block_name();
  }
  block_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicClick.block_name)
}

// optional string platform = 8;
inline bool VkMusicClick::has_platform() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VkMusicClick::set_has_platform() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VkMusicClick::clear_has_platform() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VkMusicClick::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform();
}
inline const ::std::string& VkMusicClick::platform() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClick.platform)
  return platform_.GetNoArena();
}
inline void VkMusicClick::set_platform(const ::std::string& value) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClick.platform)
}
#if LANG_CXX11
inline void VkMusicClick::set_platform(::std::string&& value) {
  set_has_platform();
  platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicClick.platform)
}
#endif
inline void VkMusicClick::set_platform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicClick.platform)
}
inline void VkMusicClick::set_platform(const char* value, size_t size) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicClick.platform)
}
inline ::std::string* VkMusicClick::mutable_platform() {
  set_has_platform();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicClick.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicClick::release_platform() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicClick.platform)
  clear_has_platform();
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicClick::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    set_has_platform();
  } else {
    clear_has_platform();
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicClick.platform)
}

// optional int64 owner_id = 9;
inline bool VkMusicClick::has_owner_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VkMusicClick::set_has_owner_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VkMusicClick::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VkMusicClick::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
  clear_has_owner_id();
}
inline ::google::protobuf::int64 VkMusicClick::owner_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClick.owner_id)
  return owner_id_;
}
inline void VkMusicClick::set_owner_id(::google::protobuf::int64 value) {
  set_has_owner_id();
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClick.owner_id)
}

// optional int64 doc_id = 10;
inline bool VkMusicClick::has_doc_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VkMusicClick::set_has_doc_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VkMusicClick::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VkMusicClick::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
inline ::google::protobuf::int64 VkMusicClick::doc_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClick.doc_id)
  return doc_id_;
}
inline void VkMusicClick::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClick.doc_id)
}

// optional uint64 timestamp = 11;
inline bool VkMusicClick::has_timestamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VkMusicClick::set_has_timestamp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VkMusicClick::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VkMusicClick::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 VkMusicClick::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClick.timestamp)
  return timestamp_;
}
inline void VkMusicClick::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClick.timestamp)
}

// -------------------------------------------------------------------

// VkMusicClickOrQuery

// optional .ru.mail.go.webbase.blobs.VkMusicClick click = 1;
inline bool VkMusicClickOrQuery::has_click() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkMusicClickOrQuery::set_has_click() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkMusicClickOrQuery::clear_has_click() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkMusicClickOrQuery::clear_click() {
  if (click_ != NULL) click_->::ru::mail::go::webbase::blobs::VkMusicClick::Clear();
  clear_has_click();
}
inline const ::ru::mail::go::webbase::blobs::VkMusicClick& VkMusicClickOrQuery::click() const {
  const ::ru::mail::go::webbase::blobs::VkMusicClick* p = click_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.click)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicClick*>(
      &::ru::mail::go::webbase::blobs::_VkMusicClick_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VkMusicClick* VkMusicClickOrQuery::mutable_click() {
  set_has_click();
  if (click_ == NULL) {
    click_ = new ::ru::mail::go::webbase::blobs::VkMusicClick;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.click)
  return click_;
}
inline ::ru::mail::go::webbase::blobs::VkMusicClick* VkMusicClickOrQuery::release_click() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.click)
  clear_has_click();
  ::ru::mail::go::webbase::blobs::VkMusicClick* temp = click_;
  click_ = NULL;
  return temp;
}
inline void VkMusicClickOrQuery::set_allocated_click(::ru::mail::go::webbase::blobs::VkMusicClick* click) {
  delete click_;
  click_ = click;
  if (click) {
    set_has_click();
  } else {
    clear_has_click();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.click)
}

// optional string query = 2;
inline bool VkMusicClickOrQuery::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkMusicClickOrQuery::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkMusicClickOrQuery::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkMusicClickOrQuery::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& VkMusicClickOrQuery::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.query)
  return query_.GetNoArena();
}
inline void VkMusicClickOrQuery::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.query)
}
#if LANG_CXX11
inline void VkMusicClickOrQuery::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.query)
}
#endif
inline void VkMusicClickOrQuery::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.query)
}
inline void VkMusicClickOrQuery::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.query)
}
inline ::std::string* VkMusicClickOrQuery::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicClickOrQuery::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicClickOrQuery::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.query)
}

// -------------------------------------------------------------------

// VkMusicQueryBlockClicks_Block

// optional string name = 1;
inline bool VkMusicQueryBlockClicks_Block::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkMusicQueryBlockClicks_Block::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkMusicQueryBlockClicks_Block::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkMusicQueryBlockClicks_Block::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& VkMusicQueryBlockClicks_Block::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.name)
  return name_.GetNoArena();
}
inline void VkMusicQueryBlockClicks_Block::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.name)
}
#if LANG_CXX11
inline void VkMusicQueryBlockClicks_Block::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.name)
}
#endif
inline void VkMusicQueryBlockClicks_Block::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.name)
}
inline void VkMusicQueryBlockClicks_Block::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.name)
}
inline ::std::string* VkMusicQueryBlockClicks_Block::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicQueryBlockClicks_Block::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicQueryBlockClicks_Block::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.name)
}

// optional uint64 clicks = 2;
inline bool VkMusicQueryBlockClicks_Block::has_clicks() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkMusicQueryBlockClicks_Block::set_has_clicks() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkMusicQueryBlockClicks_Block::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkMusicQueryBlockClicks_Block::clear_clicks() {
  clicks_ = GOOGLE_ULONGLONG(0);
  clear_has_clicks();
}
inline ::google::protobuf::uint64 VkMusicQueryBlockClicks_Block::clicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.clicks)
  return clicks_;
}
inline void VkMusicQueryBlockClicks_Block::set_clicks(::google::protobuf::uint64 value) {
  set_has_clicks();
  clicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.clicks)
}

// -------------------------------------------------------------------

// VkMusicQueryBlockClicks_Service

// optional string name = 1;
inline bool VkMusicQueryBlockClicks_Service::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkMusicQueryBlockClicks_Service::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkMusicQueryBlockClicks_Service::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkMusicQueryBlockClicks_Service::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& VkMusicQueryBlockClicks_Service::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.name)
  return name_.GetNoArena();
}
inline void VkMusicQueryBlockClicks_Service::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.name)
}
#if LANG_CXX11
inline void VkMusicQueryBlockClicks_Service::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.name)
}
#endif
inline void VkMusicQueryBlockClicks_Service::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.name)
}
inline void VkMusicQueryBlockClicks_Service::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.name)
}
inline ::std::string* VkMusicQueryBlockClicks_Service::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicQueryBlockClicks_Service::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicQueryBlockClicks_Service::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.name)
}

// repeated .ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block blocks = 2;
inline int VkMusicQueryBlockClicks_Service::blocks_size() const {
  return blocks_.size();
}
inline void VkMusicQueryBlockClicks_Service::clear_blocks() {
  blocks_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Block& VkMusicQueryBlockClicks_Service::blocks(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.blocks)
  return blocks_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Block* VkMusicQueryBlockClicks_Service::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.blocks)
  return blocks_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Block* VkMusicQueryBlockClicks_Service::add_blocks() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.blocks)
  return blocks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Block >*
VkMusicQueryBlockClicks_Service::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.blocks)
  return &blocks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Block >&
VkMusicQueryBlockClicks_Service::blocks() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.blocks)
  return blocks_;
}

// -------------------------------------------------------------------

// VkMusicQueryBlockClicks

// optional string query_text = 1;
inline bool VkMusicQueryBlockClicks::has_query_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkMusicQueryBlockClicks::set_has_query_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkMusicQueryBlockClicks::clear_has_query_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkMusicQueryBlockClicks::clear_query_text() {
  query_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_text();
}
inline const ::std::string& VkMusicQueryBlockClicks::query_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.query_text)
  return query_text_.GetNoArena();
}
inline void VkMusicQueryBlockClicks::set_query_text(const ::std::string& value) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.query_text)
}
#if LANG_CXX11
inline void VkMusicQueryBlockClicks::set_query_text(::std::string&& value) {
  set_has_query_text();
  query_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.query_text)
}
#endif
inline void VkMusicQueryBlockClicks::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.query_text)
}
inline void VkMusicQueryBlockClicks::set_query_text(const char* value, size_t size) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.query_text)
}
inline ::std::string* VkMusicQueryBlockClicks::mutable_query_text() {
  set_has_query_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.query_text)
  return query_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkMusicQueryBlockClicks::release_query_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.query_text)
  clear_has_query_text();
  return query_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkMusicQueryBlockClicks::set_allocated_query_text(::std::string* query_text) {
  if (query_text != NULL) {
    set_has_query_text();
  } else {
    clear_has_query_text();
  }
  query_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.query_text)
}

// repeated .ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service services = 2;
inline int VkMusicQueryBlockClicks::services_size() const {
  return services_.size();
}
inline void VkMusicQueryBlockClicks::clear_services() {
  services_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Service& VkMusicQueryBlockClicks::services(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.services)
  return services_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Service* VkMusicQueryBlockClicks::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.services)
  return services_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Service* VkMusicQueryBlockClicks::add_services() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.services)
  return services_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Service >*
VkMusicQueryBlockClicks::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.services)
  return &services_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Service >&
VkMusicQueryBlockClicks::services() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.services)
  return services_;
}

// -------------------------------------------------------------------

// VkMusicFrontendExtradata

// optional uint32 orig_pos = 1;
inline bool VkMusicFrontendExtradata::has_orig_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkMusicFrontendExtradata::set_has_orig_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkMusicFrontendExtradata::clear_has_orig_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkMusicFrontendExtradata::clear_orig_pos() {
  orig_pos_ = 0u;
  clear_has_orig_pos();
}
inline ::google::protobuf::uint32 VkMusicFrontendExtradata::orig_pos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata.orig_pos)
  return orig_pos_;
}
inline void VkMusicFrontendExtradata::set_orig_pos(::google::protobuf::uint32 value) {
  set_has_orig_pos();
  orig_pos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata.orig_pos)
}

// optional uint32 fixed_pos = 2;
inline bool VkMusicFrontendExtradata::has_fixed_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkMusicFrontendExtradata::set_has_fixed_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkMusicFrontendExtradata::clear_has_fixed_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkMusicFrontendExtradata::clear_fixed_pos() {
  fixed_pos_ = 0u;
  clear_has_fixed_pos();
}
inline ::google::protobuf::uint32 VkMusicFrontendExtradata::fixed_pos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata.fixed_pos)
  return fixed_pos_;
}
inline void VkMusicFrontendExtradata::set_fixed_pos(::google::protobuf::uint32 value) {
  set_has_fixed_pos();
  fixed_pos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata.fixed_pos)
}

// optional bool orig_turn = 3;
inline bool VkMusicFrontendExtradata::has_orig_turn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VkMusicFrontendExtradata::set_has_orig_turn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VkMusicFrontendExtradata::clear_has_orig_turn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VkMusicFrontendExtradata::clear_orig_turn() {
  orig_turn_ = false;
  clear_has_orig_turn();
}
inline bool VkMusicFrontendExtradata::orig_turn() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata.orig_turn)
  return orig_turn_;
}
inline void VkMusicFrontendExtradata::set_orig_turn(bool value) {
  set_has_orig_turn();
  orig_turn_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata.orig_turn)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse_Type>() {
  return ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse_Type_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::VkMusicSession_Sex> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::VkMusicSession_Sex>() {
  return ::ru::mail::go::webbase::blobs::VkMusicSession_Sex_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::VkMusicSessionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::VkMusicSessionType>() {
  return ::ru::mail::go::webbase::blobs::VkMusicSessionType_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::VkMusicEventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::VkMusicEventType>() {
  return ::ru::mail::go::webbase::blobs::VkMusicEventType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vk_5fmusic_2eproto__INCLUDED
