// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yandex_news_session.proto

#ifndef PROTOBUF_yandex_5fnews_5fsession_2eproto__INCLUDED
#define PROTOBUF_yandex_5fnews_5fsession_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace yandex_news {
class DocItem;
class DocItemDefaultTypeInternal;
extern DocItemDefaultTypeInternal _DocItem_default_instance_;
class EventItem;
class EventItemDefaultTypeInternal;
extern EventItemDefaultTypeInternal _EventItem_default_instance_;
class ExperimentItem;
class ExperimentItemDefaultTypeInternal;
extern ExperimentItemDefaultTypeInternal _ExperimentItem_default_instance_;
class PageDocumentItem;
class PageDocumentItemDefaultTypeInternal;
extern PageDocumentItemDefaultTypeInternal _PageDocumentItem_default_instance_;
class PageItem;
class PageItemDefaultTypeInternal;
extern PageItemDefaultTypeInternal _PageItem_default_instance_;
class SearchParams;
class SearchParamsDefaultTypeInternal;
extern SearchParamsDefaultTypeInternal _SearchParams_default_instance_;
class SerpItem;
class SerpItemDefaultTypeInternal;
extern SerpItemDefaultTypeInternal _SerpItem_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class YandexNewsSessionItem;
class YandexNewsSessionItemDefaultTypeInternal;
extern YandexNewsSessionItemDefaultTypeInternal _YandexNewsSessionItem_default_instance_;
}  // namespace yandex_news
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace yandex_news {

namespace protobuf_yandex_5fnews_5fsession_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_yandex_5fnews_5fsession_2eproto

enum SortOrder {
  relevance = 0,
  chronology = 1
};
bool SortOrder_IsValid(int value);
const SortOrder SortOrder_MIN = relevance;
const SortOrder SortOrder_MAX = chronology;
const int SortOrder_ARRAYSIZE = SortOrder_MAX + 1;

const ::google::protobuf::EnumDescriptor* SortOrder_descriptor();
inline const ::std::string& SortOrder_Name(SortOrder value) {
  return ::google::protobuf::internal::NameOfEnum(
    SortOrder_descriptor(), value);
}
inline bool SortOrder_Parse(
    const ::std::string& name, SortOrder* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SortOrder>(
    SortOrder_descriptor(), name, value);
}
enum SerpType {
  document = 0,
  group = 1
};
bool SerpType_IsValid(int value);
const SerpType SerpType_MIN = document;
const SerpType SerpType_MAX = group;
const int SerpType_ARRAYSIZE = SerpType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SerpType_descriptor();
inline const ::std::string& SerpType_Name(SerpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SerpType_descriptor(), value);
}
inline bool SerpType_Parse(
    const ::std::string& name, SerpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SerpType>(
    SerpType_descriptor(), name, value);
}
enum EventType {
  search_request = 0,
  search_response = 1,
  search_focus = 2,
  search_blur = 3,
  search_clear = 4,
  search_filter_date = 5,
  search_filter_group = 6,
  search_filter_sort = 7
};
bool EventType_IsValid(int value);
const EventType EventType_MIN = search_request;
const EventType EventType_MAX = search_filter_sort;
const int EventType_ARRAYSIZE = EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventType_descriptor();
inline const ::std::string& EventType_Name(EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventType_descriptor(), value);
}
inline bool EventType_Parse(
    const ::std::string& name, EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventType>(
    EventType_descriptor(), name, value);
}
// ===================================================================

class SearchParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.yandex_news.SearchParams) */ {
 public:
  SearchParams();
  virtual ~SearchParams();

  SearchParams(const SearchParams& from);

  inline SearchParams& operator=(const SearchParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchParams(SearchParams&& from) noexcept
    : SearchParams() {
    *this = ::std::move(from);
  }

  inline SearchParams& operator=(SearchParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchParams& default_instance();

  static inline const SearchParams* internal_default_instance() {
    return reinterpret_cast<const SearchParams*>(
               &_SearchParams_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SearchParams* other);
  friend void swap(SearchParams& a, SearchParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchParams* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchParams& from);
  void MergeFrom(const SearchParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ru.mail.go.webbase.yandex_news.SortOrder sort_order = 1;
  bool has_sort_order() const;
  void clear_sort_order();
  static const int kSortOrderFieldNumber = 1;
  ::ru::mail::go::webbase::yandex_news::SortOrder sort_order() const;
  void set_sort_order(::ru::mail::go::webbase::yandex_news::SortOrder value);

  // required bool group = 2;
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 2;
  bool group() const;
  void set_group(bool value);

  // optional int32 time_from = 3;
  bool has_time_from() const;
  void clear_time_from();
  static const int kTimeFromFieldNumber = 3;
  ::google::protobuf::int32 time_from() const;
  void set_time_from(::google::protobuf::int32 value);

  // optional int32 time_to = 4;
  bool has_time_to() const;
  void clear_time_to();
  static const int kTimeToFieldNumber = 4;
  ::google::protobuf::int32 time_to() const;
  void set_time_to(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.yandex_news.SearchParams)
 private:
  void set_has_sort_order();
  void clear_has_sort_order();
  void set_has_group();
  void clear_has_group();
  void set_has_time_from();
  void clear_has_time_from();
  void set_has_time_to();
  void clear_has_time_to();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int sort_order_;
  bool group_;
  ::google::protobuf::int32 time_from_;
  ::google::protobuf::int32 time_to_;
  friend struct protobuf_yandex_5fnews_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.yandex_news.DocItem) */ {
 public:
  DocItem();
  virtual ~DocItem();

  DocItem(const DocItem& from);

  inline DocItem& operator=(const DocItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocItem(DocItem&& from) noexcept
    : DocItem() {
    *this = ::std::move(from);
  }

  inline DocItem& operator=(DocItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocItem& default_instance();

  static inline const DocItem* internal_default_instance() {
    return reinterpret_cast<const DocItem*>(
               &_DocItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DocItem* other);
  friend void swap(DocItem& a, DocItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocItem* New() const PROTOBUF_FINAL { return New(NULL); }

  DocItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocItem& from);
  void MergeFrom(const DocItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required int32 hpos = 1;
  bool has_hpos() const;
  void clear_hpos();
  static const int kHposFieldNumber = 1;
  ::google::protobuf::int32 hpos() const;
  void set_hpos(::google::protobuf::int32 value);

  // required bool click = 3;
  bool has_click() const;
  void clear_click();
  static const int kClickFieldNumber = 3;
  bool click() const;
  void set_click(bool value);

  // required int32 click_ts = 4;
  bool has_click_ts() const;
  void clear_click_ts();
  static const int kClickTsFieldNumber = 4;
  ::google::protobuf::int32 click_ts() const;
  void set_click_ts(::google::protobuf::int32 value);

  // required int32 show_ts = 5;
  bool has_show_ts() const;
  void clear_show_ts();
  static const int kShowTsFieldNumber = 5;
  ::google::protobuf::int32 show_ts() const;
  void set_show_ts(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.yandex_news.DocItem)
 private:
  void set_has_hpos();
  void clear_has_hpos();
  void set_has_url();
  void clear_has_url();
  void set_has_click();
  void clear_has_click();
  void set_has_click_ts();
  void clear_has_click_ts();
  void set_has_show_ts();
  void clear_has_show_ts();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::int32 hpos_;
  bool click_;
  ::google::protobuf::int32 click_ts_;
  ::google::protobuf::int32 show_ts_;
  friend struct protobuf_yandex_5fnews_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SerpItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.yandex_news.SerpItem) */ {
 public:
  SerpItem();
  virtual ~SerpItem();

  SerpItem(const SerpItem& from);

  inline SerpItem& operator=(const SerpItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SerpItem(SerpItem&& from) noexcept
    : SerpItem() {
    *this = ::std::move(from);
  }

  inline SerpItem& operator=(SerpItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SerpItem& default_instance();

  static inline const SerpItem* internal_default_instance() {
    return reinterpret_cast<const SerpItem*>(
               &_SerpItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SerpItem* other);
  friend void swap(SerpItem& a, SerpItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SerpItem* New() const PROTOBUF_FINAL { return New(NULL); }

  SerpItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SerpItem& from);
  void MergeFrom(const SerpItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SerpItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.yandex_news.DocItem docs = 5;
  int docs_size() const;
  void clear_docs();
  static const int kDocsFieldNumber = 5;
  const ::ru::mail::go::webbase::yandex_news::DocItem& docs(int index) const;
  ::ru::mail::go::webbase::yandex_news::DocItem* mutable_docs(int index);
  ::ru::mail::go::webbase::yandex_news::DocItem* add_docs();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::DocItem >*
      mutable_docs();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::DocItem >&
      docs() const;

  // optional string group = 3;
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 3;
  const ::std::string& group() const;
  void set_group(const ::std::string& value);
  #if LANG_CXX11
  void set_group(::std::string&& value);
  #endif
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  ::std::string* mutable_group();
  ::std::string* release_group();
  void set_allocated_group(::std::string* group);

  // optional string group_title = 4;
  bool has_group_title() const;
  void clear_group_title();
  static const int kGroupTitleFieldNumber = 4;
  const ::std::string& group_title() const;
  void set_group_title(const ::std::string& value);
  #if LANG_CXX11
  void set_group_title(::std::string&& value);
  #endif
  void set_group_title(const char* value);
  void set_group_title(const char* value, size_t size);
  ::std::string* mutable_group_title();
  ::std::string* release_group_title();
  void set_allocated_group_title(::std::string* group_title);

  // required .ru.mail.go.webbase.yandex_news.SerpType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ru::mail::go::webbase::yandex_news::SerpType type() const;
  void set_type(::ru::mail::go::webbase::yandex_news::SerpType value);

  // required int32 pos = 2;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  ::google::protobuf::int32 pos() const;
  void set_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.yandex_news.SerpItem)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_pos();
  void clear_has_pos();
  void set_has_group();
  void clear_has_group();
  void set_has_group_title();
  void clear_has_group_title();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::DocItem > docs_;
  ::google::protobuf::internal::ArenaStringPtr group_;
  ::google::protobuf::internal::ArenaStringPtr group_title_;
  int type_;
  ::google::protobuf::int32 pos_;
  friend struct protobuf_yandex_5fnews_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.yandex_news.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(UserInfo* other);
  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string yandex_uid = 1;
  bool has_yandex_uid() const;
  void clear_yandex_uid();
  static const int kYandexUidFieldNumber = 1;
  const ::std::string& yandex_uid() const;
  void set_yandex_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_yandex_uid(::std::string&& value);
  #endif
  void set_yandex_uid(const char* value);
  void set_yandex_uid(const char* value, size_t size);
  ::std::string* mutable_yandex_uid();
  ::std::string* release_yandex_uid();
  void set_allocated_yandex_uid(::std::string* yandex_uid);

  // required string user_agent = 2;
  bool has_user_agent() const;
  void clear_user_agent();
  static const int kUserAgentFieldNumber = 2;
  const ::std::string& user_agent() const;
  void set_user_agent(const ::std::string& value);
  #if LANG_CXX11
  void set_user_agent(::std::string&& value);
  #endif
  void set_user_agent(const char* value);
  void set_user_agent(const char* value, size_t size);
  ::std::string* mutable_user_agent();
  ::std::string* release_user_agent();
  void set_allocated_user_agent(::std::string* user_agent);

  // required string ip = 3;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.yandex_news.UserInfo)
 private:
  void set_has_yandex_uid();
  void clear_has_yandex_uid();
  void set_has_user_agent();
  void clear_has_user_agent();
  void set_has_ip();
  void clear_has_ip();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr yandex_uid_;
  ::google::protobuf::internal::ArenaStringPtr user_agent_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  friend struct protobuf_yandex_5fnews_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PageDocumentItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.yandex_news.PageDocumentItem) */ {
 public:
  PageDocumentItem();
  virtual ~PageDocumentItem();

  PageDocumentItem(const PageDocumentItem& from);

  inline PageDocumentItem& operator=(const PageDocumentItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PageDocumentItem(PageDocumentItem&& from) noexcept
    : PageDocumentItem() {
    *this = ::std::move(from);
  }

  inline PageDocumentItem& operator=(PageDocumentItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PageDocumentItem& default_instance();

  static inline const PageDocumentItem* internal_default_instance() {
    return reinterpret_cast<const PageDocumentItem*>(
               &_PageDocumentItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PageDocumentItem* other);
  friend void swap(PageDocumentItem& a, PageDocumentItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PageDocumentItem* New() const PROTOBUF_FINAL { return New(NULL); }

  PageDocumentItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PageDocumentItem& from);
  void MergeFrom(const PageDocumentItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PageDocumentItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required bool is_lightning = 2;
  bool has_is_lightning() const;
  void clear_is_lightning();
  static const int kIsLightningFieldNumber = 2;
  bool is_lightning() const;
  void set_is_lightning(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.yandex_news.PageDocumentItem)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_is_lightning();
  void clear_has_is_lightning();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  bool is_lightning_;
  friend struct protobuf_yandex_5fnews_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PageItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.yandex_news.PageItem) */ {
 public:
  PageItem();
  virtual ~PageItem();

  PageItem(const PageItem& from);

  inline PageItem& operator=(const PageItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PageItem(PageItem&& from) noexcept
    : PageItem() {
    *this = ::std::move(from);
  }

  inline PageItem& operator=(PageItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PageItem& default_instance();

  static inline const PageItem* internal_default_instance() {
    return reinterpret_cast<const PageItem*>(
               &_PageItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PageItem* other);
  friend void swap(PageItem& a, PageItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PageItem* New() const PROTOBUF_FINAL { return New(NULL); }

  PageItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PageItem& from);
  void MergeFrom(const PageItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PageItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string urls = 3;
  int urls_size() const;
  void clear_urls();
  static const int kUrlsFieldNumber = 3;
  const ::std::string& urls(int index) const;
  ::std::string* mutable_urls(int index);
  void set_urls(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_urls(int index, ::std::string&& value);
  #endif
  void set_urls(int index, const char* value);
  void set_urls(int index, const char* value, size_t size);
  ::std::string* add_urls();
  void add_urls(const ::std::string& value);
  #if LANG_CXX11
  void add_urls(::std::string&& value);
  #endif
  void add_urls(const char* value);
  void add_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_urls();

  // repeated .ru.mail.go.webbase.yandex_news.PageDocumentItem page_documents = 4;
  int page_documents_size() const;
  void clear_page_documents();
  static const int kPageDocumentsFieldNumber = 4;
  const ::ru::mail::go::webbase::yandex_news::PageDocumentItem& page_documents(int index) const;
  ::ru::mail::go::webbase::yandex_news::PageDocumentItem* mutable_page_documents(int index);
  ::ru::mail::go::webbase::yandex_news::PageDocumentItem* add_page_documents();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::PageDocumentItem >*
      mutable_page_documents();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::PageDocumentItem >&
      page_documents() const;

  // required string page_url = 1;
  bool has_page_url() const;
  void clear_page_url();
  static const int kPageUrlFieldNumber = 1;
  const ::std::string& page_url() const;
  void set_page_url(const ::std::string& value);
  #if LANG_CXX11
  void set_page_url(::std::string&& value);
  #endif
  void set_page_url(const char* value);
  void set_page_url(const char* value, size_t size);
  ::std::string* mutable_page_url();
  ::std::string* release_page_url();
  void set_allocated_page_url(::std::string* page_url);

  // required int32 page = 2;
  bool has_page() const;
  void clear_page();
  static const int kPageFieldNumber = 2;
  ::google::protobuf::int32 page() const;
  void set_page(::google::protobuf::int32 value);

  // optional int32 show_ts = 5;
  bool has_show_ts() const;
  void clear_show_ts();
  static const int kShowTsFieldNumber = 5;
  ::google::protobuf::int32 show_ts() const;
  void set_show_ts(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.yandex_news.PageItem)
 private:
  void set_has_page_url();
  void clear_has_page_url();
  void set_has_page();
  void clear_has_page();
  void set_has_show_ts();
  void clear_has_show_ts();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> urls_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::PageDocumentItem > page_documents_;
  ::google::protobuf::internal::ArenaStringPtr page_url_;
  ::google::protobuf::int32 page_;
  ::google::protobuf::int32 show_ts_;
  friend struct protobuf_yandex_5fnews_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExperimentItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.yandex_news.ExperimentItem) */ {
 public:
  ExperimentItem();
  virtual ~ExperimentItem();

  ExperimentItem(const ExperimentItem& from);

  inline ExperimentItem& operator=(const ExperimentItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExperimentItem(ExperimentItem&& from) noexcept
    : ExperimentItem() {
    *this = ::std::move(from);
  }

  inline ExperimentItem& operator=(ExperimentItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExperimentItem& default_instance();

  static inline const ExperimentItem* internal_default_instance() {
    return reinterpret_cast<const ExperimentItem*>(
               &_ExperimentItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ExperimentItem* other);
  friend void swap(ExperimentItem& a, ExperimentItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExperimentItem* New() const PROTOBUF_FINAL { return New(NULL); }

  ExperimentItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExperimentItem& from);
  void MergeFrom(const ExperimentItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExperimentItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string test_id = 1;
  bool has_test_id() const;
  void clear_test_id();
  static const int kTestIdFieldNumber = 1;
  const ::std::string& test_id() const;
  void set_test_id(const ::std::string& value);
  #if LANG_CXX11
  void set_test_id(::std::string&& value);
  #endif
  void set_test_id(const char* value);
  void set_test_id(const char* value, size_t size);
  ::std::string* mutable_test_id();
  ::std::string* release_test_id();
  void set_allocated_test_id(::std::string* test_id);

  // required string bucket = 2;
  bool has_bucket() const;
  void clear_bucket();
  static const int kBucketFieldNumber = 2;
  const ::std::string& bucket() const;
  void set_bucket(const ::std::string& value);
  #if LANG_CXX11
  void set_bucket(::std::string&& value);
  #endif
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  ::std::string* mutable_bucket();
  ::std::string* release_bucket();
  void set_allocated_bucket(::std::string* bucket);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.yandex_news.ExperimentItem)
 private:
  void set_has_test_id();
  void clear_has_test_id();
  void set_has_bucket();
  void clear_has_bucket();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr test_id_;
  ::google::protobuf::internal::ArenaStringPtr bucket_;
  friend struct protobuf_yandex_5fnews_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.yandex_news.EventItem) */ {
 public:
  EventItem();
  virtual ~EventItem();

  EventItem(const EventItem& from);

  inline EventItem& operator=(const EventItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventItem(EventItem&& from) noexcept
    : EventItem() {
    *this = ::std::move(from);
  }

  inline EventItem& operator=(EventItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EventItem& default_instance();

  static inline const EventItem* internal_default_instance() {
    return reinterpret_cast<const EventItem*>(
               &_EventItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(EventItem* other);
  friend void swap(EventItem& a, EventItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventItem* New() const PROTOBUF_FINAL { return New(NULL); }

  EventItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventItem& from);
  void MergeFrom(const EventItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string new_query = 4;
  bool has_new_query() const;
  void clear_new_query();
  static const int kNewQueryFieldNumber = 4;
  const ::std::string& new_query() const;
  void set_new_query(const ::std::string& value);
  #if LANG_CXX11
  void set_new_query(::std::string&& value);
  #endif
  void set_new_query(const char* value);
  void set_new_query(const char* value, size_t size);
  ::std::string* mutable_new_query();
  ::std::string* release_new_query();
  void set_allocated_new_query(::std::string* new_query);

  // optional string page_url = 5;
  bool has_page_url() const;
  void clear_page_url();
  static const int kPageUrlFieldNumber = 5;
  const ::std::string& page_url() const;
  void set_page_url(const ::std::string& value);
  #if LANG_CXX11
  void set_page_url(::std::string&& value);
  #endif
  void set_page_url(const char* value);
  void set_page_url(const char* value, size_t size);
  ::std::string* mutable_page_url();
  ::std::string* release_page_url();
  void set_allocated_page_url(::std::string* page_url);

  // optional .ru.mail.go.webbase.yandex_news.SearchParams new_search_params = 3;
  bool has_new_search_params() const;
  void clear_new_search_params();
  static const int kNewSearchParamsFieldNumber = 3;
  const ::ru::mail::go::webbase::yandex_news::SearchParams& new_search_params() const;
  ::ru::mail::go::webbase::yandex_news::SearchParams* mutable_new_search_params();
  ::ru::mail::go::webbase::yandex_news::SearchParams* release_new_search_params();
  void set_allocated_new_search_params(::ru::mail::go::webbase::yandex_news::SearchParams* new_search_params);

  // required int32 ts = 1;
  bool has_ts() const;
  void clear_ts();
  static const int kTsFieldNumber = 1;
  ::google::protobuf::int32 ts() const;
  void set_ts(::google::protobuf::int32 value);

  // required .ru.mail.go.webbase.yandex_news.EventType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::ru::mail::go::webbase::yandex_news::EventType type() const;
  void set_type(::ru::mail::go::webbase::yandex_news::EventType value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.yandex_news.EventItem)
 private:
  void set_has_ts();
  void clear_has_ts();
  void set_has_type();
  void clear_has_type();
  void set_has_new_search_params();
  void clear_has_new_search_params();
  void set_has_new_query();
  void clear_has_new_query();
  void set_has_page_url();
  void clear_has_page_url();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr new_query_;
  ::google::protobuf::internal::ArenaStringPtr page_url_;
  ::ru::mail::go::webbase::yandex_news::SearchParams* new_search_params_;
  ::google::protobuf::int32 ts_;
  int type_;
  friend struct protobuf_yandex_5fnews_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class YandexNewsSessionItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem) */ {
 public:
  YandexNewsSessionItem();
  virtual ~YandexNewsSessionItem();

  YandexNewsSessionItem(const YandexNewsSessionItem& from);

  inline YandexNewsSessionItem& operator=(const YandexNewsSessionItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  YandexNewsSessionItem(YandexNewsSessionItem&& from) noexcept
    : YandexNewsSessionItem() {
    *this = ::std::move(from);
  }

  inline YandexNewsSessionItem& operator=(YandexNewsSessionItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YandexNewsSessionItem& default_instance();

  static inline const YandexNewsSessionItem* internal_default_instance() {
    return reinterpret_cast<const YandexNewsSessionItem*>(
               &_YandexNewsSessionItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(YandexNewsSessionItem* other);
  friend void swap(YandexNewsSessionItem& a, YandexNewsSessionItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline YandexNewsSessionItem* New() const PROTOBUF_FINAL { return New(NULL); }

  YandexNewsSessionItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const YandexNewsSessionItem& from);
  void MergeFrom(const YandexNewsSessionItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(YandexNewsSessionItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.yandex_news.SerpItem serp = 5;
  int serp_size() const;
  void clear_serp();
  static const int kSerpFieldNumber = 5;
  const ::ru::mail::go::webbase::yandex_news::SerpItem& serp(int index) const;
  ::ru::mail::go::webbase::yandex_news::SerpItem* mutable_serp(int index);
  ::ru::mail::go::webbase::yandex_news::SerpItem* add_serp();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::SerpItem >*
      mutable_serp();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::SerpItem >&
      serp() const;

  // repeated .ru.mail.go.webbase.yandex_news.PageItem pages = 7;
  int pages_size() const;
  void clear_pages();
  static const int kPagesFieldNumber = 7;
  const ::ru::mail::go::webbase::yandex_news::PageItem& pages(int index) const;
  ::ru::mail::go::webbase::yandex_news::PageItem* mutable_pages(int index);
  ::ru::mail::go::webbase::yandex_news::PageItem* add_pages();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::PageItem >*
      mutable_pages();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::PageItem >&
      pages() const;

  // repeated .ru.mail.go.webbase.yandex_news.ExperimentItem experiments = 8;
  int experiments_size() const;
  void clear_experiments();
  static const int kExperimentsFieldNumber = 8;
  const ::ru::mail::go::webbase::yandex_news::ExperimentItem& experiments(int index) const;
  ::ru::mail::go::webbase::yandex_news::ExperimentItem* mutable_experiments(int index);
  ::ru::mail::go::webbase::yandex_news::ExperimentItem* add_experiments();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::ExperimentItem >*
      mutable_experiments();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::ExperimentItem >&
      experiments() const;

  // repeated .ru.mail.go.webbase.yandex_news.EventItem events = 11;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 11;
  const ::ru::mail::go::webbase::yandex_news::EventItem& events(int index) const;
  ::ru::mail::go::webbase::yandex_news::EventItem* mutable_events(int index);
  ::ru::mail::go::webbase::yandex_news::EventItem* add_events();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::EventItem >*
      mutable_events();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::EventItem >&
      events() const;

  // required string qid = 1;
  bool has_qid() const;
  void clear_qid();
  static const int kQidFieldNumber = 1;
  const ::std::string& qid() const;
  void set_qid(const ::std::string& value);
  #if LANG_CXX11
  void set_qid(::std::string&& value);
  #endif
  void set_qid(const char* value);
  void set_qid(const char* value, size_t size);
  ::std::string* mutable_qid();
  ::std::string* release_qid();
  void set_allocated_qid(::std::string* qid);

  // required string query = 3;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 3;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // optional string parent_qid = 12;
  bool has_parent_qid() const;
  void clear_parent_qid();
  static const int kParentQidFieldNumber = 12;
  const ::std::string& parent_qid() const;
  void set_parent_qid(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_qid(::std::string&& value);
  #endif
  void set_parent_qid(const char* value);
  void set_parent_qid(const char* value, size_t size);
  ::std::string* mutable_parent_qid();
  ::std::string* release_parent_qid();
  void set_allocated_parent_qid(::std::string* parent_qid);

  // optional .ru.mail.go.webbase.yandex_news.SearchParams search_params = 4;
  bool has_search_params() const;
  void clear_search_params();
  static const int kSearchParamsFieldNumber = 4;
  const ::ru::mail::go::webbase::yandex_news::SearchParams& search_params() const;
  ::ru::mail::go::webbase::yandex_news::SearchParams* mutable_search_params();
  ::ru::mail::go::webbase::yandex_news::SearchParams* release_search_params();
  void set_allocated_search_params(::ru::mail::go::webbase::yandex_news::SearchParams* search_params);

  // optional .ru.mail.go.webbase.yandex_news.UserInfo user_info = 6;
  bool has_user_info() const;
  void clear_user_info();
  static const int kUserInfoFieldNumber = 6;
  const ::ru::mail::go::webbase::yandex_news::UserInfo& user_info() const;
  ::ru::mail::go::webbase::yandex_news::UserInfo* mutable_user_info();
  ::ru::mail::go::webbase::yandex_news::UserInfo* release_user_info();
  void set_allocated_user_info(::ru::mail::go::webbase::yandex_news::UserInfo* user_info);

  // required int32 ts = 2;
  bool has_ts() const;
  void clear_ts();
  static const int kTsFieldNumber = 2;
  ::google::protobuf::int32 ts() const;
  void set_ts(::google::protobuf::int32 value);

  // optional float yandex_robotness = 10;
  bool has_yandex_robotness() const;
  void clear_yandex_robotness();
  static const int kYandexRobotnessFieldNumber = 10;
  float yandex_robotness() const;
  void set_yandex_robotness(float value);

  // optional bool yandex_suspected_robot = 9;
  bool has_yandex_suspected_robot() const;
  void clear_yandex_suspected_robot();
  static const int kYandexSuspectedRobotFieldNumber = 9;
  bool yandex_suspected_robot() const;
  void set_yandex_suspected_robot(bool value);

  // optional bool bot_by_parent = 13;
  bool has_bot_by_parent() const;
  void clear_bot_by_parent();
  static const int kBotByParentFieldNumber = 13;
  bool bot_by_parent() const;
  void set_bot_by_parent(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem)
 private:
  void set_has_qid();
  void clear_has_qid();
  void set_has_ts();
  void clear_has_ts();
  void set_has_query();
  void clear_has_query();
  void set_has_search_params();
  void clear_has_search_params();
  void set_has_user_info();
  void clear_has_user_info();
  void set_has_yandex_suspected_robot();
  void clear_has_yandex_suspected_robot();
  void set_has_yandex_robotness();
  void clear_has_yandex_robotness();
  void set_has_parent_qid();
  void clear_has_parent_qid();
  void set_has_bot_by_parent();
  void clear_has_bot_by_parent();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::SerpItem > serp_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::PageItem > pages_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::ExperimentItem > experiments_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::EventItem > events_;
  ::google::protobuf::internal::ArenaStringPtr qid_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr parent_qid_;
  ::ru::mail::go::webbase::yandex_news::SearchParams* search_params_;
  ::ru::mail::go::webbase::yandex_news::UserInfo* user_info_;
  ::google::protobuf::int32 ts_;
  float yandex_robotness_;
  bool yandex_suspected_robot_;
  bool bot_by_parent_;
  friend struct protobuf_yandex_5fnews_5fsession_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SearchParams

// required .ru.mail.go.webbase.yandex_news.SortOrder sort_order = 1;
inline bool SearchParams::has_sort_order() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchParams::set_has_sort_order() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchParams::clear_has_sort_order() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchParams::clear_sort_order() {
  sort_order_ = 0;
  clear_has_sort_order();
}
inline ::ru::mail::go::webbase::yandex_news::SortOrder SearchParams::sort_order() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.SearchParams.sort_order)
  return static_cast< ::ru::mail::go::webbase::yandex_news::SortOrder >(sort_order_);
}
inline void SearchParams::set_sort_order(::ru::mail::go::webbase::yandex_news::SortOrder value) {
  assert(::ru::mail::go::webbase::yandex_news::SortOrder_IsValid(value));
  set_has_sort_order();
  sort_order_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.SearchParams.sort_order)
}

// required bool group = 2;
inline bool SearchParams::has_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchParams::set_has_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchParams::clear_has_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchParams::clear_group() {
  group_ = false;
  clear_has_group();
}
inline bool SearchParams::group() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.SearchParams.group)
  return group_;
}
inline void SearchParams::set_group(bool value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.SearchParams.group)
}

// optional int32 time_from = 3;
inline bool SearchParams::has_time_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SearchParams::set_has_time_from() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SearchParams::clear_has_time_from() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SearchParams::clear_time_from() {
  time_from_ = 0;
  clear_has_time_from();
}
inline ::google::protobuf::int32 SearchParams::time_from() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.SearchParams.time_from)
  return time_from_;
}
inline void SearchParams::set_time_from(::google::protobuf::int32 value) {
  set_has_time_from();
  time_from_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.SearchParams.time_from)
}

// optional int32 time_to = 4;
inline bool SearchParams::has_time_to() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SearchParams::set_has_time_to() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SearchParams::clear_has_time_to() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SearchParams::clear_time_to() {
  time_to_ = 0;
  clear_has_time_to();
}
inline ::google::protobuf::int32 SearchParams::time_to() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.SearchParams.time_to)
  return time_to_;
}
inline void SearchParams::set_time_to(::google::protobuf::int32 value) {
  set_has_time_to();
  time_to_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.SearchParams.time_to)
}

// -------------------------------------------------------------------

// DocItem

// required int32 hpos = 1;
inline bool DocItem::has_hpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocItem::set_has_hpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocItem::clear_has_hpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocItem::clear_hpos() {
  hpos_ = 0;
  clear_has_hpos();
}
inline ::google::protobuf::int32 DocItem::hpos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.DocItem.hpos)
  return hpos_;
}
inline void DocItem::set_hpos(::google::protobuf::int32 value) {
  set_has_hpos();
  hpos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.DocItem.hpos)
}

// required string url = 2;
inline bool DocItem::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocItem::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocItem::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocItem::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& DocItem::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.DocItem.url)
  return url_.GetNoArena();
}
inline void DocItem::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.DocItem.url)
}
#if LANG_CXX11
inline void DocItem::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.yandex_news.DocItem.url)
}
#endif
inline void DocItem::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.yandex_news.DocItem.url)
}
inline void DocItem::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.yandex_news.DocItem.url)
}
inline ::std::string* DocItem::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.DocItem.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocItem::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.yandex_news.DocItem.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocItem::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.yandex_news.DocItem.url)
}

// required bool click = 3;
inline bool DocItem::has_click() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocItem::set_has_click() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocItem::clear_has_click() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocItem::clear_click() {
  click_ = false;
  clear_has_click();
}
inline bool DocItem::click() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.DocItem.click)
  return click_;
}
inline void DocItem::set_click(bool value) {
  set_has_click();
  click_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.DocItem.click)
}

// required int32 click_ts = 4;
inline bool DocItem::has_click_ts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocItem::set_has_click_ts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocItem::clear_has_click_ts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocItem::clear_click_ts() {
  click_ts_ = 0;
  clear_has_click_ts();
}
inline ::google::protobuf::int32 DocItem::click_ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.DocItem.click_ts)
  return click_ts_;
}
inline void DocItem::set_click_ts(::google::protobuf::int32 value) {
  set_has_click_ts();
  click_ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.DocItem.click_ts)
}

// required int32 show_ts = 5;
inline bool DocItem::has_show_ts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocItem::set_has_show_ts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocItem::clear_has_show_ts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocItem::clear_show_ts() {
  show_ts_ = 0;
  clear_has_show_ts();
}
inline ::google::protobuf::int32 DocItem::show_ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.DocItem.show_ts)
  return show_ts_;
}
inline void DocItem::set_show_ts(::google::protobuf::int32 value) {
  set_has_show_ts();
  show_ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.DocItem.show_ts)
}

// -------------------------------------------------------------------

// SerpItem

// required .ru.mail.go.webbase.yandex_news.SerpType type = 1;
inline bool SerpItem::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SerpItem::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SerpItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SerpItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ru::mail::go::webbase::yandex_news::SerpType SerpItem::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.SerpItem.type)
  return static_cast< ::ru::mail::go::webbase::yandex_news::SerpType >(type_);
}
inline void SerpItem::set_type(::ru::mail::go::webbase::yandex_news::SerpType value) {
  assert(::ru::mail::go::webbase::yandex_news::SerpType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.SerpItem.type)
}

// required int32 pos = 2;
inline bool SerpItem::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SerpItem::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SerpItem::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SerpItem::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 SerpItem::pos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.SerpItem.pos)
  return pos_;
}
inline void SerpItem::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.SerpItem.pos)
}

// optional string group = 3;
inline bool SerpItem::has_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SerpItem::set_has_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SerpItem::clear_has_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SerpItem::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_group();
}
inline const ::std::string& SerpItem::group() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.SerpItem.group)
  return group_.GetNoArena();
}
inline void SerpItem::set_group(const ::std::string& value) {
  set_has_group();
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.SerpItem.group)
}
#if LANG_CXX11
inline void SerpItem::set_group(::std::string&& value) {
  set_has_group();
  group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.yandex_news.SerpItem.group)
}
#endif
inline void SerpItem::set_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_group();
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.yandex_news.SerpItem.group)
}
inline void SerpItem::set_group(const char* value, size_t size) {
  set_has_group();
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.yandex_news.SerpItem.group)
}
inline ::std::string* SerpItem::mutable_group() {
  set_has_group();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.SerpItem.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerpItem::release_group() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.yandex_news.SerpItem.group)
  clear_has_group();
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerpItem::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    set_has_group();
  } else {
    clear_has_group();
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.yandex_news.SerpItem.group)
}

// optional string group_title = 4;
inline bool SerpItem::has_group_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SerpItem::set_has_group_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SerpItem::clear_has_group_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SerpItem::clear_group_title() {
  group_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_group_title();
}
inline const ::std::string& SerpItem::group_title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.SerpItem.group_title)
  return group_title_.GetNoArena();
}
inline void SerpItem::set_group_title(const ::std::string& value) {
  set_has_group_title();
  group_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.SerpItem.group_title)
}
#if LANG_CXX11
inline void SerpItem::set_group_title(::std::string&& value) {
  set_has_group_title();
  group_title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.yandex_news.SerpItem.group_title)
}
#endif
inline void SerpItem::set_group_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_group_title();
  group_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.yandex_news.SerpItem.group_title)
}
inline void SerpItem::set_group_title(const char* value, size_t size) {
  set_has_group_title();
  group_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.yandex_news.SerpItem.group_title)
}
inline ::std::string* SerpItem::mutable_group_title() {
  set_has_group_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.SerpItem.group_title)
  return group_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerpItem::release_group_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.yandex_news.SerpItem.group_title)
  clear_has_group_title();
  return group_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerpItem::set_allocated_group_title(::std::string* group_title) {
  if (group_title != NULL) {
    set_has_group_title();
  } else {
    clear_has_group_title();
  }
  group_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.yandex_news.SerpItem.group_title)
}

// repeated .ru.mail.go.webbase.yandex_news.DocItem docs = 5;
inline int SerpItem::docs_size() const {
  return docs_.size();
}
inline void SerpItem::clear_docs() {
  docs_.Clear();
}
inline const ::ru::mail::go::webbase::yandex_news::DocItem& SerpItem::docs(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.SerpItem.docs)
  return docs_.Get(index);
}
inline ::ru::mail::go::webbase::yandex_news::DocItem* SerpItem::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.SerpItem.docs)
  return docs_.Mutable(index);
}
inline ::ru::mail::go::webbase::yandex_news::DocItem* SerpItem::add_docs() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.yandex_news.SerpItem.docs)
  return docs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::DocItem >*
SerpItem::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.yandex_news.SerpItem.docs)
  return &docs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::DocItem >&
SerpItem::docs() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.yandex_news.SerpItem.docs)
  return docs_;
}

// -------------------------------------------------------------------

// UserInfo

// required string yandex_uid = 1;
inline bool UserInfo::has_yandex_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfo::set_has_yandex_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfo::clear_has_yandex_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfo::clear_yandex_uid() {
  yandex_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_yandex_uid();
}
inline const ::std::string& UserInfo::yandex_uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.UserInfo.yandex_uid)
  return yandex_uid_.GetNoArena();
}
inline void UserInfo::set_yandex_uid(const ::std::string& value) {
  set_has_yandex_uid();
  yandex_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.UserInfo.yandex_uid)
}
#if LANG_CXX11
inline void UserInfo::set_yandex_uid(::std::string&& value) {
  set_has_yandex_uid();
  yandex_uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.yandex_news.UserInfo.yandex_uid)
}
#endif
inline void UserInfo::set_yandex_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_yandex_uid();
  yandex_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.yandex_news.UserInfo.yandex_uid)
}
inline void UserInfo::set_yandex_uid(const char* value, size_t size) {
  set_has_yandex_uid();
  yandex_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.yandex_news.UserInfo.yandex_uid)
}
inline ::std::string* UserInfo::mutable_yandex_uid() {
  set_has_yandex_uid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.UserInfo.yandex_uid)
  return yandex_uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_yandex_uid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.yandex_news.UserInfo.yandex_uid)
  clear_has_yandex_uid();
  return yandex_uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_yandex_uid(::std::string* yandex_uid) {
  if (yandex_uid != NULL) {
    set_has_yandex_uid();
  } else {
    clear_has_yandex_uid();
  }
  yandex_uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), yandex_uid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.yandex_news.UserInfo.yandex_uid)
}

// required string user_agent = 2;
inline bool UserInfo::has_user_agent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfo::set_has_user_agent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfo::clear_has_user_agent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfo::clear_user_agent() {
  user_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_agent();
}
inline const ::std::string& UserInfo::user_agent() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.UserInfo.user_agent)
  return user_agent_.GetNoArena();
}
inline void UserInfo::set_user_agent(const ::std::string& value) {
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.UserInfo.user_agent)
}
#if LANG_CXX11
inline void UserInfo::set_user_agent(::std::string&& value) {
  set_has_user_agent();
  user_agent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.yandex_news.UserInfo.user_agent)
}
#endif
inline void UserInfo::set_user_agent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.yandex_news.UserInfo.user_agent)
}
inline void UserInfo::set_user_agent(const char* value, size_t size) {
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.yandex_news.UserInfo.user_agent)
}
inline ::std::string* UserInfo::mutable_user_agent() {
  set_has_user_agent();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.UserInfo.user_agent)
  return user_agent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_user_agent() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.yandex_news.UserInfo.user_agent)
  clear_has_user_agent();
  return user_agent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_user_agent(::std::string* user_agent) {
  if (user_agent != NULL) {
    set_has_user_agent();
  } else {
    clear_has_user_agent();
  }
  user_agent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_agent);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.yandex_news.UserInfo.user_agent)
}

// required string ip = 3;
inline bool UserInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& UserInfo::ip() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.UserInfo.ip)
  return ip_.GetNoArena();
}
inline void UserInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.UserInfo.ip)
}
#if LANG_CXX11
inline void UserInfo::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.yandex_news.UserInfo.ip)
}
#endif
inline void UserInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.yandex_news.UserInfo.ip)
}
inline void UserInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.yandex_news.UserInfo.ip)
}
inline ::std::string* UserInfo::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.UserInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_ip() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.yandex_news.UserInfo.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.yandex_news.UserInfo.ip)
}

// -------------------------------------------------------------------

// PageDocumentItem

// required string url = 1;
inline bool PageDocumentItem::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PageDocumentItem::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PageDocumentItem::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PageDocumentItem::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& PageDocumentItem::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.PageDocumentItem.url)
  return url_.GetNoArena();
}
inline void PageDocumentItem::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.PageDocumentItem.url)
}
#if LANG_CXX11
inline void PageDocumentItem::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.yandex_news.PageDocumentItem.url)
}
#endif
inline void PageDocumentItem::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.yandex_news.PageDocumentItem.url)
}
inline void PageDocumentItem::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.yandex_news.PageDocumentItem.url)
}
inline ::std::string* PageDocumentItem::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.PageDocumentItem.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PageDocumentItem::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.yandex_news.PageDocumentItem.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PageDocumentItem::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.yandex_news.PageDocumentItem.url)
}

// required bool is_lightning = 2;
inline bool PageDocumentItem::has_is_lightning() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PageDocumentItem::set_has_is_lightning() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PageDocumentItem::clear_has_is_lightning() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PageDocumentItem::clear_is_lightning() {
  is_lightning_ = false;
  clear_has_is_lightning();
}
inline bool PageDocumentItem::is_lightning() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.PageDocumentItem.is_lightning)
  return is_lightning_;
}
inline void PageDocumentItem::set_is_lightning(bool value) {
  set_has_is_lightning();
  is_lightning_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.PageDocumentItem.is_lightning)
}

// -------------------------------------------------------------------

// PageItem

// required string page_url = 1;
inline bool PageItem::has_page_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PageItem::set_has_page_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PageItem::clear_has_page_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PageItem::clear_page_url() {
  page_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_page_url();
}
inline const ::std::string& PageItem::page_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.PageItem.page_url)
  return page_url_.GetNoArena();
}
inline void PageItem::set_page_url(const ::std::string& value) {
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.PageItem.page_url)
}
#if LANG_CXX11
inline void PageItem::set_page_url(::std::string&& value) {
  set_has_page_url();
  page_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.yandex_news.PageItem.page_url)
}
#endif
inline void PageItem::set_page_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.yandex_news.PageItem.page_url)
}
inline void PageItem::set_page_url(const char* value, size_t size) {
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.yandex_news.PageItem.page_url)
}
inline ::std::string* PageItem::mutable_page_url() {
  set_has_page_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.PageItem.page_url)
  return page_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PageItem::release_page_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.yandex_news.PageItem.page_url)
  clear_has_page_url();
  return page_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PageItem::set_allocated_page_url(::std::string* page_url) {
  if (page_url != NULL) {
    set_has_page_url();
  } else {
    clear_has_page_url();
  }
  page_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.yandex_news.PageItem.page_url)
}

// required int32 page = 2;
inline bool PageItem::has_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PageItem::set_has_page() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PageItem::clear_has_page() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PageItem::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 PageItem::page() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.PageItem.page)
  return page_;
}
inline void PageItem::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.PageItem.page)
}

// repeated string urls = 3;
inline int PageItem::urls_size() const {
  return urls_.size();
}
inline void PageItem::clear_urls() {
  urls_.Clear();
}
inline const ::std::string& PageItem::urls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.PageItem.urls)
  return urls_.Get(index);
}
inline ::std::string* PageItem::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.PageItem.urls)
  return urls_.Mutable(index);
}
inline void PageItem::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.PageItem.urls)
  urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PageItem::set_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.PageItem.urls)
  urls_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PageItem::set_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.yandex_news.PageItem.urls)
}
inline void PageItem::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.yandex_news.PageItem.urls)
}
inline ::std::string* PageItem::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.yandex_news.PageItem.urls)
  return urls_.Add();
}
inline void PageItem::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.yandex_news.PageItem.urls)
}
#if LANG_CXX11
inline void PageItem::add_urls(::std::string&& value) {
  urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.yandex_news.PageItem.urls)
}
#endif
inline void PageItem::add_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.yandex_news.PageItem.urls)
}
inline void PageItem::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.yandex_news.PageItem.urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PageItem::urls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.yandex_news.PageItem.urls)
  return urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PageItem::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.yandex_news.PageItem.urls)
  return &urls_;
}

// repeated .ru.mail.go.webbase.yandex_news.PageDocumentItem page_documents = 4;
inline int PageItem::page_documents_size() const {
  return page_documents_.size();
}
inline void PageItem::clear_page_documents() {
  page_documents_.Clear();
}
inline const ::ru::mail::go::webbase::yandex_news::PageDocumentItem& PageItem::page_documents(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.PageItem.page_documents)
  return page_documents_.Get(index);
}
inline ::ru::mail::go::webbase::yandex_news::PageDocumentItem* PageItem::mutable_page_documents(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.PageItem.page_documents)
  return page_documents_.Mutable(index);
}
inline ::ru::mail::go::webbase::yandex_news::PageDocumentItem* PageItem::add_page_documents() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.yandex_news.PageItem.page_documents)
  return page_documents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::PageDocumentItem >*
PageItem::mutable_page_documents() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.yandex_news.PageItem.page_documents)
  return &page_documents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::PageDocumentItem >&
PageItem::page_documents() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.yandex_news.PageItem.page_documents)
  return page_documents_;
}

// optional int32 show_ts = 5;
inline bool PageItem::has_show_ts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PageItem::set_has_show_ts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PageItem::clear_has_show_ts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PageItem::clear_show_ts() {
  show_ts_ = 0;
  clear_has_show_ts();
}
inline ::google::protobuf::int32 PageItem::show_ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.PageItem.show_ts)
  return show_ts_;
}
inline void PageItem::set_show_ts(::google::protobuf::int32 value) {
  set_has_show_ts();
  show_ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.PageItem.show_ts)
}

// -------------------------------------------------------------------

// ExperimentItem

// required string test_id = 1;
inline bool ExperimentItem::has_test_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExperimentItem::set_has_test_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExperimentItem::clear_has_test_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExperimentItem::clear_test_id() {
  test_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_test_id();
}
inline const ::std::string& ExperimentItem::test_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.ExperimentItem.test_id)
  return test_id_.GetNoArena();
}
inline void ExperimentItem::set_test_id(const ::std::string& value) {
  set_has_test_id();
  test_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.ExperimentItem.test_id)
}
#if LANG_CXX11
inline void ExperimentItem::set_test_id(::std::string&& value) {
  set_has_test_id();
  test_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.yandex_news.ExperimentItem.test_id)
}
#endif
inline void ExperimentItem::set_test_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_test_id();
  test_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.yandex_news.ExperimentItem.test_id)
}
inline void ExperimentItem::set_test_id(const char* value, size_t size) {
  set_has_test_id();
  test_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.yandex_news.ExperimentItem.test_id)
}
inline ::std::string* ExperimentItem::mutable_test_id() {
  set_has_test_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.ExperimentItem.test_id)
  return test_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExperimentItem::release_test_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.yandex_news.ExperimentItem.test_id)
  clear_has_test_id();
  return test_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExperimentItem::set_allocated_test_id(::std::string* test_id) {
  if (test_id != NULL) {
    set_has_test_id();
  } else {
    clear_has_test_id();
  }
  test_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.yandex_news.ExperimentItem.test_id)
}

// required string bucket = 2;
inline bool ExperimentItem::has_bucket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExperimentItem::set_has_bucket() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExperimentItem::clear_has_bucket() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExperimentItem::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bucket();
}
inline const ::std::string& ExperimentItem::bucket() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.ExperimentItem.bucket)
  return bucket_.GetNoArena();
}
inline void ExperimentItem::set_bucket(const ::std::string& value) {
  set_has_bucket();
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.ExperimentItem.bucket)
}
#if LANG_CXX11
inline void ExperimentItem::set_bucket(::std::string&& value) {
  set_has_bucket();
  bucket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.yandex_news.ExperimentItem.bucket)
}
#endif
inline void ExperimentItem::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bucket();
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.yandex_news.ExperimentItem.bucket)
}
inline void ExperimentItem::set_bucket(const char* value, size_t size) {
  set_has_bucket();
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.yandex_news.ExperimentItem.bucket)
}
inline ::std::string* ExperimentItem::mutable_bucket() {
  set_has_bucket();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.ExperimentItem.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExperimentItem::release_bucket() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.yandex_news.ExperimentItem.bucket)
  clear_has_bucket();
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExperimentItem::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    set_has_bucket();
  } else {
    clear_has_bucket();
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.yandex_news.ExperimentItem.bucket)
}

// -------------------------------------------------------------------

// EventItem

// required int32 ts = 1;
inline bool EventItem::has_ts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EventItem::set_has_ts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EventItem::clear_has_ts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EventItem::clear_ts() {
  ts_ = 0;
  clear_has_ts();
}
inline ::google::protobuf::int32 EventItem::ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.EventItem.ts)
  return ts_;
}
inline void EventItem::set_ts(::google::protobuf::int32 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.EventItem.ts)
}

// required .ru.mail.go.webbase.yandex_news.EventType type = 2;
inline bool EventItem::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EventItem::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EventItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EventItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ru::mail::go::webbase::yandex_news::EventType EventItem::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.EventItem.type)
  return static_cast< ::ru::mail::go::webbase::yandex_news::EventType >(type_);
}
inline void EventItem::set_type(::ru::mail::go::webbase::yandex_news::EventType value) {
  assert(::ru::mail::go::webbase::yandex_news::EventType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.EventItem.type)
}

// optional .ru.mail.go.webbase.yandex_news.SearchParams new_search_params = 3;
inline bool EventItem::has_new_search_params() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EventItem::set_has_new_search_params() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EventItem::clear_has_new_search_params() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EventItem::clear_new_search_params() {
  if (new_search_params_ != NULL) new_search_params_->::ru::mail::go::webbase::yandex_news::SearchParams::Clear();
  clear_has_new_search_params();
}
inline const ::ru::mail::go::webbase::yandex_news::SearchParams& EventItem::new_search_params() const {
  const ::ru::mail::go::webbase::yandex_news::SearchParams* p = new_search_params_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.EventItem.new_search_params)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::yandex_news::SearchParams*>(
      &::ru::mail::go::webbase::yandex_news::_SearchParams_default_instance_);
}
inline ::ru::mail::go::webbase::yandex_news::SearchParams* EventItem::mutable_new_search_params() {
  set_has_new_search_params();
  if (new_search_params_ == NULL) {
    new_search_params_ = new ::ru::mail::go::webbase::yandex_news::SearchParams;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.EventItem.new_search_params)
  return new_search_params_;
}
inline ::ru::mail::go::webbase::yandex_news::SearchParams* EventItem::release_new_search_params() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.yandex_news.EventItem.new_search_params)
  clear_has_new_search_params();
  ::ru::mail::go::webbase::yandex_news::SearchParams* temp = new_search_params_;
  new_search_params_ = NULL;
  return temp;
}
inline void EventItem::set_allocated_new_search_params(::ru::mail::go::webbase::yandex_news::SearchParams* new_search_params) {
  delete new_search_params_;
  new_search_params_ = new_search_params;
  if (new_search_params) {
    set_has_new_search_params();
  } else {
    clear_has_new_search_params();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.yandex_news.EventItem.new_search_params)
}

// optional string new_query = 4;
inline bool EventItem::has_new_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventItem::set_has_new_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventItem::clear_has_new_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventItem::clear_new_query() {
  new_query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_new_query();
}
inline const ::std::string& EventItem::new_query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.EventItem.new_query)
  return new_query_.GetNoArena();
}
inline void EventItem::set_new_query(const ::std::string& value) {
  set_has_new_query();
  new_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.EventItem.new_query)
}
#if LANG_CXX11
inline void EventItem::set_new_query(::std::string&& value) {
  set_has_new_query();
  new_query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.yandex_news.EventItem.new_query)
}
#endif
inline void EventItem::set_new_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_new_query();
  new_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.yandex_news.EventItem.new_query)
}
inline void EventItem::set_new_query(const char* value, size_t size) {
  set_has_new_query();
  new_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.yandex_news.EventItem.new_query)
}
inline ::std::string* EventItem::mutable_new_query() {
  set_has_new_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.EventItem.new_query)
  return new_query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventItem::release_new_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.yandex_news.EventItem.new_query)
  clear_has_new_query();
  return new_query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventItem::set_allocated_new_query(::std::string* new_query) {
  if (new_query != NULL) {
    set_has_new_query();
  } else {
    clear_has_new_query();
  }
  new_query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.yandex_news.EventItem.new_query)
}

// optional string page_url = 5;
inline bool EventItem::has_page_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventItem::set_has_page_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventItem::clear_has_page_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventItem::clear_page_url() {
  page_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_page_url();
}
inline const ::std::string& EventItem::page_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.EventItem.page_url)
  return page_url_.GetNoArena();
}
inline void EventItem::set_page_url(const ::std::string& value) {
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.EventItem.page_url)
}
#if LANG_CXX11
inline void EventItem::set_page_url(::std::string&& value) {
  set_has_page_url();
  page_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.yandex_news.EventItem.page_url)
}
#endif
inline void EventItem::set_page_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.yandex_news.EventItem.page_url)
}
inline void EventItem::set_page_url(const char* value, size_t size) {
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.yandex_news.EventItem.page_url)
}
inline ::std::string* EventItem::mutable_page_url() {
  set_has_page_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.EventItem.page_url)
  return page_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventItem::release_page_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.yandex_news.EventItem.page_url)
  clear_has_page_url();
  return page_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventItem::set_allocated_page_url(::std::string* page_url) {
  if (page_url != NULL) {
    set_has_page_url();
  } else {
    clear_has_page_url();
  }
  page_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.yandex_news.EventItem.page_url)
}

// -------------------------------------------------------------------

// YandexNewsSessionItem

// required string qid = 1;
inline bool YandexNewsSessionItem::has_qid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YandexNewsSessionItem::set_has_qid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YandexNewsSessionItem::clear_has_qid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YandexNewsSessionItem::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qid();
}
inline const ::std::string& YandexNewsSessionItem::qid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.qid)
  return qid_.GetNoArena();
}
inline void YandexNewsSessionItem::set_qid(const ::std::string& value) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.qid)
}
#if LANG_CXX11
inline void YandexNewsSessionItem::set_qid(::std::string&& value) {
  set_has_qid();
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.qid)
}
#endif
inline void YandexNewsSessionItem::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.qid)
}
inline void YandexNewsSessionItem::set_qid(const char* value, size_t size) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.qid)
}
inline ::std::string* YandexNewsSessionItem::mutable_qid() {
  set_has_qid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YandexNewsSessionItem::release_qid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.qid)
  clear_has_qid();
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YandexNewsSessionItem::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    set_has_qid();
  } else {
    clear_has_qid();
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.qid)
}

// required int32 ts = 2;
inline bool YandexNewsSessionItem::has_ts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YandexNewsSessionItem::set_has_ts() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YandexNewsSessionItem::clear_has_ts() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YandexNewsSessionItem::clear_ts() {
  ts_ = 0;
  clear_has_ts();
}
inline ::google::protobuf::int32 YandexNewsSessionItem::ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.ts)
  return ts_;
}
inline void YandexNewsSessionItem::set_ts(::google::protobuf::int32 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.ts)
}

// required string query = 3;
inline bool YandexNewsSessionItem::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YandexNewsSessionItem::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YandexNewsSessionItem::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YandexNewsSessionItem::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& YandexNewsSessionItem::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.query)
  return query_.GetNoArena();
}
inline void YandexNewsSessionItem::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.query)
}
#if LANG_CXX11
inline void YandexNewsSessionItem::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.query)
}
#endif
inline void YandexNewsSessionItem::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.query)
}
inline void YandexNewsSessionItem::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.query)
}
inline ::std::string* YandexNewsSessionItem::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YandexNewsSessionItem::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YandexNewsSessionItem::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.query)
}

// optional .ru.mail.go.webbase.yandex_news.SearchParams search_params = 4;
inline bool YandexNewsSessionItem::has_search_params() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YandexNewsSessionItem::set_has_search_params() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YandexNewsSessionItem::clear_has_search_params() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YandexNewsSessionItem::clear_search_params() {
  if (search_params_ != NULL) search_params_->::ru::mail::go::webbase::yandex_news::SearchParams::Clear();
  clear_has_search_params();
}
inline const ::ru::mail::go::webbase::yandex_news::SearchParams& YandexNewsSessionItem::search_params() const {
  const ::ru::mail::go::webbase::yandex_news::SearchParams* p = search_params_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.search_params)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::yandex_news::SearchParams*>(
      &::ru::mail::go::webbase::yandex_news::_SearchParams_default_instance_);
}
inline ::ru::mail::go::webbase::yandex_news::SearchParams* YandexNewsSessionItem::mutable_search_params() {
  set_has_search_params();
  if (search_params_ == NULL) {
    search_params_ = new ::ru::mail::go::webbase::yandex_news::SearchParams;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.search_params)
  return search_params_;
}
inline ::ru::mail::go::webbase::yandex_news::SearchParams* YandexNewsSessionItem::release_search_params() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.search_params)
  clear_has_search_params();
  ::ru::mail::go::webbase::yandex_news::SearchParams* temp = search_params_;
  search_params_ = NULL;
  return temp;
}
inline void YandexNewsSessionItem::set_allocated_search_params(::ru::mail::go::webbase::yandex_news::SearchParams* search_params) {
  delete search_params_;
  search_params_ = search_params;
  if (search_params) {
    set_has_search_params();
  } else {
    clear_has_search_params();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.search_params)
}

// repeated .ru.mail.go.webbase.yandex_news.SerpItem serp = 5;
inline int YandexNewsSessionItem::serp_size() const {
  return serp_.size();
}
inline void YandexNewsSessionItem::clear_serp() {
  serp_.Clear();
}
inline const ::ru::mail::go::webbase::yandex_news::SerpItem& YandexNewsSessionItem::serp(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.serp)
  return serp_.Get(index);
}
inline ::ru::mail::go::webbase::yandex_news::SerpItem* YandexNewsSessionItem::mutable_serp(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.serp)
  return serp_.Mutable(index);
}
inline ::ru::mail::go::webbase::yandex_news::SerpItem* YandexNewsSessionItem::add_serp() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.serp)
  return serp_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::SerpItem >*
YandexNewsSessionItem::mutable_serp() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.serp)
  return &serp_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::SerpItem >&
YandexNewsSessionItem::serp() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.serp)
  return serp_;
}

// optional .ru.mail.go.webbase.yandex_news.UserInfo user_info = 6;
inline bool YandexNewsSessionItem::has_user_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YandexNewsSessionItem::set_has_user_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YandexNewsSessionItem::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YandexNewsSessionItem::clear_user_info() {
  if (user_info_ != NULL) user_info_->::ru::mail::go::webbase::yandex_news::UserInfo::Clear();
  clear_has_user_info();
}
inline const ::ru::mail::go::webbase::yandex_news::UserInfo& YandexNewsSessionItem::user_info() const {
  const ::ru::mail::go::webbase::yandex_news::UserInfo* p = user_info_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.user_info)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::yandex_news::UserInfo*>(
      &::ru::mail::go::webbase::yandex_news::_UserInfo_default_instance_);
}
inline ::ru::mail::go::webbase::yandex_news::UserInfo* YandexNewsSessionItem::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) {
    user_info_ = new ::ru::mail::go::webbase::yandex_news::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.user_info)
  return user_info_;
}
inline ::ru::mail::go::webbase::yandex_news::UserInfo* YandexNewsSessionItem::release_user_info() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.user_info)
  clear_has_user_info();
  ::ru::mail::go::webbase::yandex_news::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void YandexNewsSessionItem::set_allocated_user_info(::ru::mail::go::webbase::yandex_news::UserInfo* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.user_info)
}

// repeated .ru.mail.go.webbase.yandex_news.PageItem pages = 7;
inline int YandexNewsSessionItem::pages_size() const {
  return pages_.size();
}
inline void YandexNewsSessionItem::clear_pages() {
  pages_.Clear();
}
inline const ::ru::mail::go::webbase::yandex_news::PageItem& YandexNewsSessionItem::pages(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.pages)
  return pages_.Get(index);
}
inline ::ru::mail::go::webbase::yandex_news::PageItem* YandexNewsSessionItem::mutable_pages(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.pages)
  return pages_.Mutable(index);
}
inline ::ru::mail::go::webbase::yandex_news::PageItem* YandexNewsSessionItem::add_pages() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.pages)
  return pages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::PageItem >*
YandexNewsSessionItem::mutable_pages() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.pages)
  return &pages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::PageItem >&
YandexNewsSessionItem::pages() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.pages)
  return pages_;
}

// repeated .ru.mail.go.webbase.yandex_news.ExperimentItem experiments = 8;
inline int YandexNewsSessionItem::experiments_size() const {
  return experiments_.size();
}
inline void YandexNewsSessionItem::clear_experiments() {
  experiments_.Clear();
}
inline const ::ru::mail::go::webbase::yandex_news::ExperimentItem& YandexNewsSessionItem::experiments(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.experiments)
  return experiments_.Get(index);
}
inline ::ru::mail::go::webbase::yandex_news::ExperimentItem* YandexNewsSessionItem::mutable_experiments(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.experiments)
  return experiments_.Mutable(index);
}
inline ::ru::mail::go::webbase::yandex_news::ExperimentItem* YandexNewsSessionItem::add_experiments() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.experiments)
  return experiments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::ExperimentItem >*
YandexNewsSessionItem::mutable_experiments() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.experiments)
  return &experiments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::ExperimentItem >&
YandexNewsSessionItem::experiments() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.experiments)
  return experiments_;
}

// optional bool yandex_suspected_robot = 9;
inline bool YandexNewsSessionItem::has_yandex_suspected_robot() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void YandexNewsSessionItem::set_has_yandex_suspected_robot() {
  _has_bits_[0] |= 0x00000080u;
}
inline void YandexNewsSessionItem::clear_has_yandex_suspected_robot() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void YandexNewsSessionItem::clear_yandex_suspected_robot() {
  yandex_suspected_robot_ = false;
  clear_has_yandex_suspected_robot();
}
inline bool YandexNewsSessionItem::yandex_suspected_robot() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.yandex_suspected_robot)
  return yandex_suspected_robot_;
}
inline void YandexNewsSessionItem::set_yandex_suspected_robot(bool value) {
  set_has_yandex_suspected_robot();
  yandex_suspected_robot_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.yandex_suspected_robot)
}

// optional float yandex_robotness = 10;
inline bool YandexNewsSessionItem::has_yandex_robotness() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void YandexNewsSessionItem::set_has_yandex_robotness() {
  _has_bits_[0] |= 0x00000040u;
}
inline void YandexNewsSessionItem::clear_has_yandex_robotness() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void YandexNewsSessionItem::clear_yandex_robotness() {
  yandex_robotness_ = 0;
  clear_has_yandex_robotness();
}
inline float YandexNewsSessionItem::yandex_robotness() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.yandex_robotness)
  return yandex_robotness_;
}
inline void YandexNewsSessionItem::set_yandex_robotness(float value) {
  set_has_yandex_robotness();
  yandex_robotness_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.yandex_robotness)
}

// repeated .ru.mail.go.webbase.yandex_news.EventItem events = 11;
inline int YandexNewsSessionItem::events_size() const {
  return events_.size();
}
inline void YandexNewsSessionItem::clear_events() {
  events_.Clear();
}
inline const ::ru::mail::go::webbase::yandex_news::EventItem& YandexNewsSessionItem::events(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.events)
  return events_.Get(index);
}
inline ::ru::mail::go::webbase::yandex_news::EventItem* YandexNewsSessionItem::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.events)
  return events_.Mutable(index);
}
inline ::ru::mail::go::webbase::yandex_news::EventItem* YandexNewsSessionItem::add_events() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.events)
  return events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::EventItem >*
YandexNewsSessionItem::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.events)
  return &events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::yandex_news::EventItem >&
YandexNewsSessionItem::events() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.events)
  return events_;
}

// optional string parent_qid = 12;
inline bool YandexNewsSessionItem::has_parent_qid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YandexNewsSessionItem::set_has_parent_qid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YandexNewsSessionItem::clear_has_parent_qid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YandexNewsSessionItem::clear_parent_qid() {
  parent_qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent_qid();
}
inline const ::std::string& YandexNewsSessionItem::parent_qid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.parent_qid)
  return parent_qid_.GetNoArena();
}
inline void YandexNewsSessionItem::set_parent_qid(const ::std::string& value) {
  set_has_parent_qid();
  parent_qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.parent_qid)
}
#if LANG_CXX11
inline void YandexNewsSessionItem::set_parent_qid(::std::string&& value) {
  set_has_parent_qid();
  parent_qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.parent_qid)
}
#endif
inline void YandexNewsSessionItem::set_parent_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parent_qid();
  parent_qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.parent_qid)
}
inline void YandexNewsSessionItem::set_parent_qid(const char* value, size_t size) {
  set_has_parent_qid();
  parent_qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.parent_qid)
}
inline ::std::string* YandexNewsSessionItem::mutable_parent_qid() {
  set_has_parent_qid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.parent_qid)
  return parent_qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YandexNewsSessionItem::release_parent_qid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.parent_qid)
  clear_has_parent_qid();
  return parent_qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YandexNewsSessionItem::set_allocated_parent_qid(::std::string* parent_qid) {
  if (parent_qid != NULL) {
    set_has_parent_qid();
  } else {
    clear_has_parent_qid();
  }
  parent_qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_qid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.parent_qid)
}

// optional bool bot_by_parent = 13;
inline bool YandexNewsSessionItem::has_bot_by_parent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void YandexNewsSessionItem::set_has_bot_by_parent() {
  _has_bits_[0] |= 0x00000100u;
}
inline void YandexNewsSessionItem::clear_has_bot_by_parent() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void YandexNewsSessionItem::clear_bot_by_parent() {
  bot_by_parent_ = false;
  clear_has_bot_by_parent();
}
inline bool YandexNewsSessionItem::bot_by_parent() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.bot_by_parent)
  return bot_by_parent_;
}
inline void YandexNewsSessionItem::set_bot_by_parent(bool value) {
  set_has_bot_by_parent();
  bot_by_parent_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.yandex_news.YandexNewsSessionItem.bot_by_parent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace yandex_news
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ru::mail::go::webbase::yandex_news::SortOrder> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::yandex_news::SortOrder>() {
  return ::ru::mail::go::webbase::yandex_news::SortOrder_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::yandex_news::SerpType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::yandex_news::SerpType>() {
  return ::ru::mail::go::webbase::yandex_news::SerpType_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::yandex_news::EventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::yandex_news::EventType>() {
  return ::ru::mail::go::webbase::yandex_news::EventType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_yandex_5fnews_5fsession_2eproto__INCLUDED
