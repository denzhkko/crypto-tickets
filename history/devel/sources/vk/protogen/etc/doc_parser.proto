syntax = "proto2";

// doc parser blobs
package ru.mail.go.webbase.blobs;
option java_outer_classname = "DocParserBlobs";

import "document_enums.proto";

message AdditionalParsingData {
    optional bool ignore_nofollow = 1 [ default = false ];
    optional Encoding encoding = 2 [ default = enc_undefined ];
    optional ForumType forumType = 3;
    optional uint64 downloadTime = 4;
    optional Encoding bom_encoding = 5 [ default = enc_undefined ];
    optional int32 flag_meta_robots = 6;
    optional Encoding forced_encoding = 7 [ default = enc_undefined ];
}

message Links {
    required string url = 1;
    optional bytes text = 2;
    enum typeFlag {
        no_mark = 1;
        wiki_nofollow = 2;
        from_iframe = 3;
    }
    optional typeFlag flag = 3;
}

message FeatureKV 
{
	required string key = 1;
	required float value = 2;
}

message FeatureList
{
	repeated FeatureKV features = 1;
}

message RegionKV 
{
	required int32 key = 1;
	required int32 value = 2;
}

message RegionList
{
	repeated RegionKV region_info = 1;
}

message ContactInfo
{
	required string phone = 1;
	required string address = 2;
}

message ContactInfoList
{
	repeated ContactInfo contacts = 1;
}

message SubjContext
{
    required string text = 1;
}

message SubjContextList
{
    repeated SubjContext contexts = 1;
}

message ProfileInfo {
    required int64 time = 1;
    optional string counter = 2;
}

message SubjParsed
{
  message KeyValue
  {
    required string key = 1;
    repeated string values = 2;
    repeated bytes  bvalues = 3;
  }
  repeated KeyValue values = 1;
}

message ImageInfo {
    required bytes key = 1;
    required bytes content = 2;
    required bytes head = 3;
    required ContentType ctype = 4;
    optional uint64 download_time = 5; // timestamp of GET request (in seconds)
    optional string fullUrl = 6; // full url, as we'd downloaded it from net
}

message ChromeImageInfo {
    required ImageInfo imageInfo = 1;
    //TODO
}

message Features {
    enum spam_t {
        unknown = 0;
        spam = 1;
        not_spam = 2;
        bad = 3;
    }
    enum subj_t {
        not_related = 0;
        url_passed = 1;
        url_matched = 2;
        url_parsed = 3;
    }

    optional uint32 porn_score = 1;
    optional FeatureList porn_features = 2;

    optional spam_t spam_score = 3;
    optional FeatureList spam_features = 4;

    optional string contact_url = 5;
    optional ContactInfoList contacts = 6;

    optional subj_t subj_stage = 7;
    optional string subj_name = 8;
    optional SubjContextList subj_ctxs = 9;

    optional float soft_score = 10;
    optional FeatureList soft_features = 11;

    optional string subj_type = 12;

    optional float market_score = 13;
    optional FeatureList market_features = 14;

    optional SubjParsed subj_values = 15;

    optional float porn_score_raw = 16;
    optional float spam_score_raw = 17;

    optional uint32 porn_score2 = 18;
    optional float porn_score2_raw = 19;
    optional FeatureList porn_features2 = 20;
}

message DetectedLanguage {
    required Language language = 1;
    optional double estimation = 2;
}

message DetectedLangArray {
    repeated DetectedLanguage detected_lang = 1;
}

message SiteLanguage {
    required Language language = 1;
    required int32 page_num = 2;
}

message SiteLanguageArray {
    repeated SiteLanguage site_languages = 1;
}

message ParsedHtml {
    optional Language language = 1;
    optional Encoding encoding = 2;

    optional string canonical_link = 3;
    optional int32 flag_meta_robots = 4;

    enum page_errors {
        is_ok = 1;
        is_spam = 2;
        bad_url_normalize = 3;
        has_refresh = 4;
        has_canonical = 5;
        bad_parsing = 6;
    }
    optional page_errors page_error = 5;

    repeated Links links = 6;
    optional string refresh_link = 7;
    optional string refresh_time = 8;
    optional string base_link = 9;
    optional Features features = 10;
    optional bytes text = 11;
    optional DetectedLangArray detLang = 12;
    optional bytes title = 13;
    optional bytes description = 14;
    optional bool description_quality = 15;
    optional bool flag_ajax_fragment = 16;
    optional bytes og_description = 17;
    optional bool og_description_quality = 18;
    optional bool is_meta_content = 19 [ default = false ];
    optional bytes og_image = 20;
    optional bytes og_title = 21;
}

message MetaDescription {
    optional bytes descritption = 1;
    optional bool description_quality = 2;
}

message ParsedDoc {
    required ContentType type = 1;
    optional ParsedHtml html_info = 2;
    repeated ProfileInfo profiling = 3;
}

message StubDoc {
    required string           url = 1;
    optional ContentType     type = 2;
    optional Language    language = 3;
    optional Encoding    encoding = 4;
    optional uint64 download_time = 5;
    optional bytes        content = 6;
    optional bool   scriptRemoved = 7;
    optional uint32  content_size = 8;
    optional uint32    clean_size = 9;
}

message Region {
    required int32 start = 1;
    required int32 end   = 2;
}

message RegionBlob {
    required int32 num   = 1;
    repeated Region data = 2;
}

message OriginalDoc {
    required string url = 1;
    required uint64 download_time = 2;
    optional bytes content = 3;

    optional ContentType type = 4;
    optional Language language = 5;
    optional Encoding encoding = 6;

    optional uint32 porno_level = 7;

    optional uint32 spam_level  = 8;

    optional RegionBlob cuttedBlob = 9;
}

