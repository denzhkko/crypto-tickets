// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: target.proto

package ru.mail.go.webbase;

public final class TargetProto {
  private TargetProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface TargetStatMsgOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 ev_type = 1;
    /**
     * <code>optional uint32 ev_type = 1;</code>
     */
    boolean hasEvType();
    /**
     * <code>optional uint32 ev_type = 1;</code>
     */
    int getEvType();

    // optional uint32 flags = 2;
    /**
     * <code>optional uint32 flags = 2;</code>
     *
     * <pre>
     *
     *тип события:
     *0 - показ
     *1 - клик
     *... другое
     * </pre>
     */
    boolean hasFlags();
    /**
     * <code>optional uint32 flags = 2;</code>
     *
     * <pre>
     *
     *тип события:
     *0 - показ
     *1 - клик
     *... другое
     * </pre>
     */
    int getFlags();

    // optional fixed32 toplog_vid = 3;
    /**
     * <code>optional fixed32 toplog_vid = 3;</code>
     *
     * <pre>
     * parsed from VID cookie
     * </pre>
     */
    boolean hasToplogVid();
    /**
     * <code>optional fixed32 toplog_vid = 3;</code>
     *
     * <pre>
     * parsed from VID cookie
     * </pre>
     */
    int getToplogVid();

    // optional uint64 vid = 153;
    /**
     * <code>optional uint64 vid = 153;</code>
     */
    boolean hasVid();
    /**
     * <code>optional uint64 vid = 153;</code>
     */
    long getVid();

    // optional uint32 banner = 4;
    /**
     * <code>optional uint32 banner = 4;</code>
     */
    boolean hasBanner();
    /**
     * <code>optional uint32 banner = 4;</code>
     */
    int getBanner();

    // optional uint32 slot = 5;
    /**
     * <code>optional uint32 slot = 5;</code>
     */
    boolean hasSlot();
    /**
     * <code>optional uint32 slot = 5;</code>
     */
    int getSlot();

    // optional uint32 group = 6;
    /**
     * <code>optional uint32 group = 6;</code>
     */
    boolean hasGroup();
    /**
     * <code>optional uint32 group = 6;</code>
     */
    int getGroup();

    // optional uint32 version = 7;
    /**
     * <code>optional uint32 version = 7;</code>
     *
     * <pre>
     * RB client version, see rb2.master/include/protocol.h for rb_version_t
     * </pre>
     */
    boolean hasVersion();
    /**
     * <code>optional uint32 version = 7;</code>
     *
     * <pre>
     * RB client version, see rb2.master/include/protocol.h for rb_version_t
     * </pre>
     */
    int getVersion();

    // optional uint32 age = 9;
    /**
     * <code>optional uint32 age = 9;</code>
     */
    boolean hasAge();
    /**
     * <code>optional uint32 age = 9;</code>
     */
    int getAge();

    // optional uint32 sex = 10;
    /**
     * <code>optional uint32 sex = 10;</code>
     */
    boolean hasSex();
    /**
     * <code>optional uint32 sex = 10;</code>
     */
    int getSex();

    // optional uint32 geo = 11;
    /**
     * <code>optional uint32 geo = 11;</code>
     */
    boolean hasGeo();
    /**
     * <code>optional uint32 geo = 11;</code>
     */
    int getGeo();

    // optional uint64 user_id = 12;
    /**
     * <code>optional uint64 user_id = 12;</code>
     *
     * <pre>
     * id пользователя из куки p 
     * </pre>
     */
    boolean hasUserId();
    /**
     * <code>optional uint64 user_id = 12;</code>
     *
     * <pre>
     * id пользователя из куки p 
     * </pre>
     */
    long getUserId();

    // optional fixed32 user_ip = 13;
    /**
     * <code>optional fixed32 user_ip = 13;</code>
     *
     * <pre>
     * client's address goes here
     * </pre>
     */
    boolean hasUserIp();
    /**
     * <code>optional fixed32 user_ip = 13;</code>
     *
     * <pre>
     * client's address goes here
     * </pre>
     */
    int getUserIp();

    // repeated fixed32 src_ip_chain = 14;
    /**
     * <code>repeated fixed32 src_ip_chain = 14;</code>
     *
     * <pre>
     * ip address chain added by our daemons
     * </pre>
     */
    java.util.List<java.lang.Integer> getSrcIpChainList();
    /**
     * <code>repeated fixed32 src_ip_chain = 14;</code>
     *
     * <pre>
     * ip address chain added by our daemons
     * </pre>
     */
    int getSrcIpChainCount();
    /**
     * <code>repeated fixed32 src_ip_chain = 14;</code>
     *
     * <pre>
     * ip address chain added by our daemons
     * </pre>
     */
    int getSrcIpChain(int index);

    // optional fixed32 timestamp = 15;
    /**
     * <code>optional fixed32 timestamp = 15;</code>
     *
     * <pre>
     * (???) я бы писал в районе rbstatd для уменьшения проблем со смещением дня 
     * </pre>
     */
    boolean hasTimestamp();
    /**
     * <code>optional fixed32 timestamp = 15;</code>
     *
     * <pre>
     * (???) я бы писал в районе rbstatd для уменьшения проблем со смещением дня 
     * </pre>
     */
    int getTimestamp();

    // optional uint32 campaign = 17;
    /**
     * <code>optional uint32 campaign = 17;</code>
     */
    boolean hasCampaign();
    /**
     * <code>optional uint32 campaign = 17;</code>
     */
    int getCampaign();

    // optional uint32 phrase = 18;
    /**
     * <code>optional uint32 phrase = 18;</code>
     *
     * <pre>
     * рекламная кампания 
     * </pre>
     */
    boolean hasPhrase();
    /**
     * <code>optional uint32 phrase = 18;</code>
     *
     * <pre>
     * рекламная кампания 
     * </pre>
     */
    int getPhrase();

    // optional uint32 banner_url = 19;
    /**
     * <code>optional uint32 banner_url = 19;</code>
     *
     * <pre>
     * id фразы для контекстных баннеров 
     * </pre>
     */
    boolean hasBannerUrl();
    /**
     * <code>optional uint32 banner_url = 19;</code>
     *
     * <pre>
     * id фразы для контекстных баннеров 
     * </pre>
     */
    int getBannerUrl();

    // optional uint32 sitezone = 27;
    /**
     * <code>optional uint32 sitezone = 27;</code>
     *
     * <pre>
     * сайтзона 
     * </pre>
     */
    boolean hasSitezone();
    /**
     * <code>optional uint32 sitezone = 27;</code>
     *
     * <pre>
     * сайтзона 
     * </pre>
     */
    int getSitezone();

    // optional uint32 experiment_id = 29;
    /**
     * <code>optional uint32 experiment_id = 29;</code>
     *
     * <pre>
     * id эксперимента из запроса
     * </pre>
     */
    boolean hasExperimentId();
    /**
     * <code>optional uint32 experiment_id = 29;</code>
     *
     * <pre>
     * id эксперимента из запроса
     * </pre>
     */
    int getExperimentId();

    // optional uint32 cpm = 30;
    /**
     * <code>optional uint32 cpm = 30;</code>
     */
    boolean hasCpm();
    /**
     * <code>optional uint32 cpm = 30;</code>
     */
    int getCpm();

    // optional uint32 site_id = 31;
    /**
     * <code>optional uint32 site_id = 31;</code>
     */
    boolean hasSiteId();
    /**
     * <code>optional uint32 site_id = 31;</code>
     */
    int getSiteId();

    // optional uint32 orig_slot = 43;
    /**
     * <code>optional uint32 orig_slot = 43;</code>
     *
     * <pre>
     * original slot for merged slot scheme (RB-3867)
     * </pre>
     */
    boolean hasOrigSlot();
    /**
     * <code>optional uint32 orig_slot = 43;</code>
     *
     * <pre>
     * original slot for merged slot scheme (RB-3867)
     * </pre>
     */
    int getOrigSlot();

    // optional uint32 filter = 32;
    /**
     * <code>optional uint32 filter = 32;</code>
     *
     * <pre>
     * Filter ID, if it's set then the click or show was filtered and shouldn't be counted in statistics
     * </pre>
     */
    boolean hasFilter();
    /**
     * <code>optional uint32 filter = 32;</code>
     *
     * <pre>
     * Filter ID, if it's set then the click or show was filtered and shouldn't be counted in statistics
     * </pre>
     */
    int getFilter();

    // optional uint32 cln = 40;
    /**
     * <code>optional uint32 cln = 40;</code>
     *
     * <pre>
     * ID of click-through counter
     * </pre>
     */
    boolean hasCln();
    /**
     * <code>optional uint32 cln = 40;</code>
     *
     * <pre>
     * ID of click-through counter
     * </pre>
     */
    int getCln();

    // optional uint32 goal = 42;
    /**
     * <code>optional uint32 goal = 42;</code>
     *
     * <pre>
     * Goal ID
     * </pre>
     */
    boolean hasGoal();
    /**
     * <code>optional uint32 goal = 42;</code>
     *
     * <pre>
     * Goal ID
     * </pre>
     */
    int getGoal();

    // optional bytes user_ipv6 = 48;
    /**
     * <code>optional bytes user_ipv6 = 48;</code>
     *
     * <pre>
     * IPv6 address of client
     * </pre>
     */
    boolean hasUserIpv6();
    /**
     * <code>optional bytes user_ipv6 = 48;</code>
     *
     * <pre>
     * IPv6 address of client
     * </pre>
     */
    com.google.protobuf.ByteString getUserIpv6();

    // optional fixed32 user_ip_from_proxy = 50;
    /**
     * <code>optional fixed32 user_ip_from_proxy = 50;</code>
     *
     * <pre>
     * acquired from X-Forwarded-For and the like
     * </pre>
     */
    boolean hasUserIpFromProxy();
    /**
     * <code>optional fixed32 user_ip_from_proxy = 50;</code>
     *
     * <pre>
     * acquired from X-Forwarded-For and the like
     * </pre>
     */
    int getUserIpFromProxy();

    // optional uint32 banner_event = 51;
    /**
     * <code>optional uint32 banner_event = 51;</code>
     *
     * <pre>
     * banner event for movies
     * </pre>
     */
    boolean hasBannerEvent();
    /**
     * <code>optional uint32 banner_event = 51;</code>
     *
     * <pre>
     * banner event for movies
     * </pre>
     */
    int getBannerEvent();

    // optional bytes device_id = 55;
    /**
     * <code>optional bytes device_id = 55;</code>
     *
     * <pre>
     *android device id
     * </pre>
     */
    boolean hasDeviceId();
    /**
     * <code>optional bytes device_id = 55;</code>
     *
     * <pre>
     *android device id
     * </pre>
     */
    com.google.protobuf.ByteString getDeviceId();

    // optional bytes advertising_id = 128;
    /**
     * <code>optional bytes advertising_id = 128;</code>
     */
    boolean hasAdvertisingId();
    /**
     * <code>optional bytes advertising_id = 128;</code>
     */
    com.google.protobuf.ByteString getAdvertisingId();

    // optional bytes android_id = 56;
    /**
     * <code>optional bytes android_id = 56;</code>
     */
    boolean hasAndroidId();
    /**
     * <code>optional bytes android_id = 56;</code>
     */
    com.google.protobuf.ByteString getAndroidId();

    // optional bytes idfa = 57;
    /**
     * <code>optional bytes idfa = 57;</code>
     */
    boolean hasIdfa();
    /**
     * <code>optional bytes idfa = 57;</code>
     */
    com.google.protobuf.ByteString getIdfa();

    // optional bytes waid = 152;
    /**
     * <code>optional bytes waid = 152;</code>
     */
    boolean hasWaid();
    /**
     * <code>optional bytes waid = 152;</code>
     */
    com.google.protobuf.ByteString getWaid();

    // repeated uint32 matched_targets = 70 [packed = true];
    /**
     * <code>repeated uint32 matched_targets = 70 [packed = true];</code>
     *
     * <pre>
     * matched targeting ids
     * </pre>
     */
    java.util.List<java.lang.Integer> getMatchedTargetsList();
    /**
     * <code>repeated uint32 matched_targets = 70 [packed = true];</code>
     *
     * <pre>
     * matched targeting ids
     * </pre>
     */
    int getMatchedTargetsCount();
    /**
     * <code>repeated uint32 matched_targets = 70 [packed = true];</code>
     *
     * <pre>
     * matched targeting ids
     * </pre>
     */
    int getMatchedTargets(int index);

    // optional .ru.mail.go.webbase.TargetMsg target = 100;
    /**
     * <code>optional .ru.mail.go.webbase.TargetMsg target = 100;</code>
     *
     * <pre>
     *
     *переменные таргета, может быть вложенным протобуф-сообщением,
     *в контексте РБ будет скипаться как одно значение
     * </pre>
     */
    boolean hasTarget();
    /**
     * <code>optional .ru.mail.go.webbase.TargetMsg target = 100;</code>
     *
     * <pre>
     *
     *переменные таргета, может быть вложенным протобуф-сообщением,
     *в контексте РБ будет скипаться как одно значение
     * </pre>
     */
    ru.mail.go.webbase.TargetProto.TargetMsg getTarget();
    /**
     * <code>optional .ru.mail.go.webbase.TargetMsg target = 100;</code>
     *
     * <pre>
     *
     *переменные таргета, может быть вложенным протобуф-сообщением,
     *в контексте РБ будет скипаться как одно значение
     * </pre>
     */
    ru.mail.go.webbase.TargetProto.TargetMsgOrBuilder getTargetOrBuilder();

    // optional bytes target_win_notice = 106;
    /**
     * <code>optional bytes target_win_notice = 106;</code>
     */
    boolean hasTargetWinNotice();
    /**
     * <code>optional bytes target_win_notice = 106;</code>
     */
    com.google.protobuf.ByteString getTargetWinNotice();

    // optional bytes rutube = 102;
    /**
     * <code>optional bytes rutube = 102;</code>
     */
    boolean hasRutube();
    /**
     * <code>optional bytes rutube = 102;</code>
     */
    com.google.protobuf.ByteString getRutube();

    // optional uint32 ssp_id = 103;
    /**
     * <code>optional uint32 ssp_id = 103;</code>
     *
     * <pre>
     * вложенное сообщение с данными по рутубу, работаем так же как и с target 
     * </pre>
     */
    boolean hasSspId();
    /**
     * <code>optional uint32 ssp_id = 103;</code>
     *
     * <pre>
     * вложенное сообщение с данными по рутубу, работаем так же как и с target 
     * </pre>
     */
    int getSspId();

    // optional bytes request_id = 104;
    /**
     * <code>optional bytes request_id = 104;</code>
     */
    boolean hasRequestId();
    /**
     * <code>optional bytes request_id = 104;</code>
     */
    com.google.protobuf.ByteString getRequestId();

    // optional bytes sitename = 105;
    /**
     * <code>optional bytes sitename = 105;</code>
     */
    boolean hasSitename();
    /**
     * <code>optional bytes sitename = 105;</code>
     */
    com.google.protobuf.ByteString getSitename();

    // optional uint64 ok_id = 107;
    /**
     * <code>optional uint64 ok_id = 107;</code>
     */
    boolean hasOkId();
    /**
     * <code>optional uint64 ok_id = 107;</code>
     */
    long getOkId();

    // optional uint32 random = 111;
    /**
     * <code>optional uint32 random = 111;</code>
     */
    boolean hasRandom();
    /**
     * <code>optional uint32 random = 111;</code>
     */
    int getRandom();

    // optional uint32 mid = 112;
    /**
     * <code>optional uint32 mid = 112;</code>
     */
    boolean hasMid();
    /**
     * <code>optional uint32 mid = 112;</code>
     */
    int getMid();

    // optional uint32 action_timestamp = 114;
    /**
     * <code>optional uint32 action_timestamp = 114;</code>
     *
     * <pre>
     * таймстамп с фронта (который подставляли в ClickId). Только для ссылок с ClickId
     * </pre>
     */
    boolean hasActionTimestamp();
    /**
     * <code>optional uint32 action_timestamp = 114;</code>
     *
     * <pre>
     * таймстамп с фронта (который подставляли в ClickId). Только для ссылок с ClickId
     * </pre>
     */
    int getActionTimestamp();

    // optional uint32 postback_vendor = 119;
    /**
     * <code>optional uint32 postback_vendor = 119;</code>
     *
     * <pre>
     *
     *1 - appsflyer
     *2 - MAT
     *3 - Ad-X
     *4 - tapstream
     *5 - adjust
     *6 - gameloft (RB-8027)
     *7 - kochava (RB-8443)
     *8 - Yandex.AppMetrika (RB-8440)
     *9 - Apsalar (RB-8936)
     * </pre>
     */
    boolean hasPostbackVendor();
    /**
     * <code>optional uint32 postback_vendor = 119;</code>
     *
     * <pre>
     *
     *1 - appsflyer
     *2 - MAT
     *3 - Ad-X
     *4 - tapstream
     *5 - adjust
     *6 - gameloft (RB-8027)
     *7 - kochava (RB-8443)
     *8 - Yandex.AppMetrika (RB-8440)
     *9 - Apsalar (RB-8936)
     * </pre>
     */
    int getPostbackVendor();

    // optional uint64 vk_id = 130;
    /**
     * <code>optional uint64 vk_id = 130;</code>
     */
    boolean hasVkId();
    /**
     * <code>optional uint64 vk_id = 130;</code>
     */
    long getVkId();

    // optional bytes sha1_idfa = 131;
    /**
     * <code>optional bytes sha1_idfa = 131;</code>
     */
    boolean hasSha1Idfa();
    /**
     * <code>optional bytes sha1_idfa = 131;</code>
     */
    com.google.protobuf.ByteString getSha1Idfa();

    // optional bytes sha1_advertising_id = 132;
    /**
     * <code>optional bytes sha1_advertising_id = 132;</code>
     */
    boolean hasSha1AdvertisingId();
    /**
     * <code>optional bytes sha1_advertising_id = 132;</code>
     */
    com.google.protobuf.ByteString getSha1AdvertisingId();

    // optional bytes sha1_dpid = 133;
    /**
     * <code>optional bytes sha1_dpid = 133;</code>
     */
    boolean hasSha1Dpid();
    /**
     * <code>optional bytes sha1_dpid = 133;</code>
     */
    com.google.protobuf.ByteString getSha1Dpid();

    // optional uint64 uid = 167;
    /**
     * <code>optional uint64 uid = 167;</code>
     */
    boolean hasUid();
    /**
     * <code>optional uint64 uid = 167;</code>
     */
    long getUid();

    // repeated uint64 ok_viral_chain = 171;
    /**
     * <code>repeated uint64 ok_viral_chain = 171;</code>
     *
     * <pre>
     * id пользователей вирального распространения топика (RB-10380)
     * </pre>
     */
    java.util.List<java.lang.Long> getOkViralChainList();
    /**
     * <code>repeated uint64 ok_viral_chain = 171;</code>
     *
     * <pre>
     * id пользователей вирального распространения топика (RB-10380)
     * </pre>
     */
    int getOkViralChainCount();
    /**
     * <code>repeated uint64 ok_viral_chain = 171;</code>
     *
     * <pre>
     * id пользователей вирального распространения топика (RB-10380)
     * </pre>
     */
    long getOkViralChain(int index);

    // optional uint32 winner_cpm = 185;
    /**
     * <code>optional uint32 winner_cpm = 185;</code>
     *
     * <pre>
     * цена, выигравшая RTB аукцион (заполняется для loose-notice)
     * </pre>
     */
    boolean hasWinnerCpm();
    /**
     * <code>optional uint32 winner_cpm = 185;</code>
     *
     * <pre>
     * цена, выигравшая RTB аукцион (заполняется для loose-notice)
     * </pre>
     */
    int getWinnerCpm();
  }
  /**
   * Protobuf type {@code ru.mail.go.webbase.TargetStatMsg}
   */
  public static final class TargetStatMsg extends
      com.google.protobuf.GeneratedMessage
      implements TargetStatMsgOrBuilder {
    // Use TargetStatMsg.newBuilder() to construct.
    private TargetStatMsg(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TargetStatMsg(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TargetStatMsg defaultInstance;
    public static TargetStatMsg getDefaultInstance() {
      return defaultInstance;
    }

    public TargetStatMsg getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TargetStatMsg(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              evType_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              flags_ = input.readUInt32();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              toplogVid_ = input.readFixed32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000010;
              banner_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000020;
              slot_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000040;
              group_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000080;
              version_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              age_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              sex_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              geo_ = input.readUInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              userId_ = input.readUInt64();
              break;
            }
            case 109: {
              bitField0_ |= 0x00001000;
              userIp_ = input.readFixed32();
              break;
            }
            case 117: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                srcIpChain_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              srcIpChain_.add(input.readFixed32());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                srcIpChain_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              while (input.getBytesUntilLimit() > 0) {
                srcIpChain_.add(input.readFixed32());
              }
              input.popLimit(limit);
              break;
            }
            case 125: {
              bitField0_ |= 0x00002000;
              timestamp_ = input.readFixed32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00004000;
              campaign_ = input.readUInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00008000;
              phrase_ = input.readUInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00010000;
              bannerUrl_ = input.readUInt32();
              break;
            }
            case 216: {
              bitField0_ |= 0x00020000;
              sitezone_ = input.readUInt32();
              break;
            }
            case 232: {
              bitField0_ |= 0x00040000;
              experimentId_ = input.readUInt32();
              break;
            }
            case 240: {
              bitField0_ |= 0x00080000;
              cpm_ = input.readUInt32();
              break;
            }
            case 248: {
              bitField0_ |= 0x00100000;
              siteId_ = input.readUInt32();
              break;
            }
            case 256: {
              bitField0_ |= 0x00400000;
              filter_ = input.readUInt32();
              break;
            }
            case 320: {
              bitField0_ |= 0x00800000;
              cln_ = input.readUInt32();
              break;
            }
            case 336: {
              bitField0_ |= 0x01000000;
              goal_ = input.readUInt32();
              break;
            }
            case 344: {
              bitField0_ |= 0x00200000;
              origSlot_ = input.readUInt32();
              break;
            }
            case 386: {
              bitField0_ |= 0x02000000;
              userIpv6_ = input.readBytes();
              break;
            }
            case 405: {
              bitField0_ |= 0x04000000;
              userIpFromProxy_ = input.readFixed32();
              break;
            }
            case 408: {
              bitField0_ |= 0x08000000;
              bannerEvent_ = input.readUInt32();
              break;
            }
            case 442: {
              bitField0_ |= 0x10000000;
              deviceId_ = input.readBytes();
              break;
            }
            case 450: {
              bitField0_ |= 0x40000000;
              androidId_ = input.readBytes();
              break;
            }
            case 458: {
              bitField0_ |= 0x80000000;
              idfa_ = input.readBytes();
              break;
            }
            case 560: {
              if (!((mutable_bitField1_ & 0x00000004) == 0x00000004)) {
                matchedTargets_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField1_ |= 0x00000004;
              }
              matchedTargets_.add(input.readUInt32());
              break;
            }
            case 562: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField1_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                matchedTargets_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField1_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                matchedTargets_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 802: {
              ru.mail.go.webbase.TargetProto.TargetMsg.Builder subBuilder = null;
              if (((bitField1_ & 0x00000002) == 0x00000002)) {
                subBuilder = target_.toBuilder();
              }
              target_ = input.readMessage(ru.mail.go.webbase.TargetProto.TargetMsg.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(target_);
                target_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000002;
              break;
            }
            case 818: {
              bitField1_ |= 0x00000008;
              rutube_ = input.readBytes();
              break;
            }
            case 824: {
              bitField1_ |= 0x00000010;
              sspId_ = input.readUInt32();
              break;
            }
            case 834: {
              bitField1_ |= 0x00000020;
              requestId_ = input.readBytes();
              break;
            }
            case 842: {
              bitField1_ |= 0x00000040;
              sitename_ = input.readBytes();
              break;
            }
            case 850: {
              bitField1_ |= 0x00000004;
              targetWinNotice_ = input.readBytes();
              break;
            }
            case 856: {
              bitField1_ |= 0x00000080;
              okId_ = input.readUInt64();
              break;
            }
            case 888: {
              bitField1_ |= 0x00000100;
              random_ = input.readUInt32();
              break;
            }
            case 896: {
              bitField1_ |= 0x00000200;
              mid_ = input.readUInt32();
              break;
            }
            case 912: {
              bitField1_ |= 0x00000400;
              actionTimestamp_ = input.readUInt32();
              break;
            }
            case 952: {
              bitField1_ |= 0x00000800;
              postbackVendor_ = input.readUInt32();
              break;
            }
            case 1026: {
              bitField0_ |= 0x20000000;
              advertisingId_ = input.readBytes();
              break;
            }
            case 1040: {
              bitField1_ |= 0x00001000;
              vkId_ = input.readUInt64();
              break;
            }
            case 1050: {
              bitField1_ |= 0x00002000;
              sha1Idfa_ = input.readBytes();
              break;
            }
            case 1058: {
              bitField1_ |= 0x00004000;
              sha1AdvertisingId_ = input.readBytes();
              break;
            }
            case 1066: {
              bitField1_ |= 0x00008000;
              sha1Dpid_ = input.readBytes();
              break;
            }
            case 1218: {
              bitField1_ |= 0x00000001;
              waid_ = input.readBytes();
              break;
            }
            case 1224: {
              bitField0_ |= 0x00000008;
              vid_ = input.readUInt64();
              break;
            }
            case 1336: {
              bitField1_ |= 0x00010000;
              uid_ = input.readUInt64();
              break;
            }
            case 1368: {
              if (!((mutable_bitField1_ & 0x00080000) == 0x00080000)) {
                okViralChain_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField1_ |= 0x00080000;
              }
              okViralChain_.add(input.readUInt64());
              break;
            }
            case 1370: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField1_ & 0x00080000) == 0x00080000) && input.getBytesUntilLimit() > 0) {
                okViralChain_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField1_ |= 0x00080000;
              }
              while (input.getBytesUntilLimit() > 0) {
                okViralChain_.add(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 1480: {
              bitField1_ |= 0x00020000;
              winnerCpm_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          srcIpChain_ = java.util.Collections.unmodifiableList(srcIpChain_);
        }
        if (((mutable_bitField1_ & 0x00000004) == 0x00000004)) {
          matchedTargets_ = java.util.Collections.unmodifiableList(matchedTargets_);
        }
        if (((mutable_bitField1_ & 0x00080000) == 0x00080000)) {
          okViralChain_ = java.util.Collections.unmodifiableList(okViralChain_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetStatMsg_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetStatMsg_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ru.mail.go.webbase.TargetProto.TargetStatMsg.class, ru.mail.go.webbase.TargetProto.TargetStatMsg.Builder.class);
    }

    public static com.google.protobuf.Parser<TargetStatMsg> PARSER =
        new com.google.protobuf.AbstractParser<TargetStatMsg>() {
      public TargetStatMsg parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TargetStatMsg(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TargetStatMsg> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int bitField1_;
    // optional uint32 ev_type = 1;
    public static final int EV_TYPE_FIELD_NUMBER = 1;
    private int evType_;
    /**
     * <code>optional uint32 ev_type = 1;</code>
     */
    public boolean hasEvType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 ev_type = 1;</code>
     */
    public int getEvType() {
      return evType_;
    }

    // optional uint32 flags = 2;
    public static final int FLAGS_FIELD_NUMBER = 2;
    private int flags_;
    /**
     * <code>optional uint32 flags = 2;</code>
     *
     * <pre>
     *
     *тип события:
     *0 - показ
     *1 - клик
     *... другое
     * </pre>
     */
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 flags = 2;</code>
     *
     * <pre>
     *
     *тип события:
     *0 - показ
     *1 - клик
     *... другое
     * </pre>
     */
    public int getFlags() {
      return flags_;
    }

    // optional fixed32 toplog_vid = 3;
    public static final int TOPLOG_VID_FIELD_NUMBER = 3;
    private int toplogVid_;
    /**
     * <code>optional fixed32 toplog_vid = 3;</code>
     *
     * <pre>
     * parsed from VID cookie
     * </pre>
     */
    public boolean hasToplogVid() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional fixed32 toplog_vid = 3;</code>
     *
     * <pre>
     * parsed from VID cookie
     * </pre>
     */
    public int getToplogVid() {
      return toplogVid_;
    }

    // optional uint64 vid = 153;
    public static final int VID_FIELD_NUMBER = 153;
    private long vid_;
    /**
     * <code>optional uint64 vid = 153;</code>
     */
    public boolean hasVid() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint64 vid = 153;</code>
     */
    public long getVid() {
      return vid_;
    }

    // optional uint32 banner = 4;
    public static final int BANNER_FIELD_NUMBER = 4;
    private int banner_;
    /**
     * <code>optional uint32 banner = 4;</code>
     */
    public boolean hasBanner() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 banner = 4;</code>
     */
    public int getBanner() {
      return banner_;
    }

    // optional uint32 slot = 5;
    public static final int SLOT_FIELD_NUMBER = 5;
    private int slot_;
    /**
     * <code>optional uint32 slot = 5;</code>
     */
    public boolean hasSlot() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 slot = 5;</code>
     */
    public int getSlot() {
      return slot_;
    }

    // optional uint32 group = 6;
    public static final int GROUP_FIELD_NUMBER = 6;
    private int group_;
    /**
     * <code>optional uint32 group = 6;</code>
     */
    public boolean hasGroup() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 group = 6;</code>
     */
    public int getGroup() {
      return group_;
    }

    // optional uint32 version = 7;
    public static final int VERSION_FIELD_NUMBER = 7;
    private int version_;
    /**
     * <code>optional uint32 version = 7;</code>
     *
     * <pre>
     * RB client version, see rb2.master/include/protocol.h for rb_version_t
     * </pre>
     */
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 version = 7;</code>
     *
     * <pre>
     * RB client version, see rb2.master/include/protocol.h for rb_version_t
     * </pre>
     */
    public int getVersion() {
      return version_;
    }

    // optional uint32 age = 9;
    public static final int AGE_FIELD_NUMBER = 9;
    private int age_;
    /**
     * <code>optional uint32 age = 9;</code>
     */
    public boolean hasAge() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 age = 9;</code>
     */
    public int getAge() {
      return age_;
    }

    // optional uint32 sex = 10;
    public static final int SEX_FIELD_NUMBER = 10;
    private int sex_;
    /**
     * <code>optional uint32 sex = 10;</code>
     */
    public boolean hasSex() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 sex = 10;</code>
     */
    public int getSex() {
      return sex_;
    }

    // optional uint32 geo = 11;
    public static final int GEO_FIELD_NUMBER = 11;
    private int geo_;
    /**
     * <code>optional uint32 geo = 11;</code>
     */
    public boolean hasGeo() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional uint32 geo = 11;</code>
     */
    public int getGeo() {
      return geo_;
    }

    // optional uint64 user_id = 12;
    public static final int USER_ID_FIELD_NUMBER = 12;
    private long userId_;
    /**
     * <code>optional uint64 user_id = 12;</code>
     *
     * <pre>
     * id пользователя из куки p 
     * </pre>
     */
    public boolean hasUserId() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint64 user_id = 12;</code>
     *
     * <pre>
     * id пользователя из куки p 
     * </pre>
     */
    public long getUserId() {
      return userId_;
    }

    // optional fixed32 user_ip = 13;
    public static final int USER_IP_FIELD_NUMBER = 13;
    private int userIp_;
    /**
     * <code>optional fixed32 user_ip = 13;</code>
     *
     * <pre>
     * client's address goes here
     * </pre>
     */
    public boolean hasUserIp() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional fixed32 user_ip = 13;</code>
     *
     * <pre>
     * client's address goes here
     * </pre>
     */
    public int getUserIp() {
      return userIp_;
    }

    // repeated fixed32 src_ip_chain = 14;
    public static final int SRC_IP_CHAIN_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Integer> srcIpChain_;
    /**
     * <code>repeated fixed32 src_ip_chain = 14;</code>
     *
     * <pre>
     * ip address chain added by our daemons
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getSrcIpChainList() {
      return srcIpChain_;
    }
    /**
     * <code>repeated fixed32 src_ip_chain = 14;</code>
     *
     * <pre>
     * ip address chain added by our daemons
     * </pre>
     */
    public int getSrcIpChainCount() {
      return srcIpChain_.size();
    }
    /**
     * <code>repeated fixed32 src_ip_chain = 14;</code>
     *
     * <pre>
     * ip address chain added by our daemons
     * </pre>
     */
    public int getSrcIpChain(int index) {
      return srcIpChain_.get(index);
    }

    // optional fixed32 timestamp = 15;
    public static final int TIMESTAMP_FIELD_NUMBER = 15;
    private int timestamp_;
    /**
     * <code>optional fixed32 timestamp = 15;</code>
     *
     * <pre>
     * (???) я бы писал в районе rbstatd для уменьшения проблем со смещением дня 
     * </pre>
     */
    public boolean hasTimestamp() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional fixed32 timestamp = 15;</code>
     *
     * <pre>
     * (???) я бы писал в районе rbstatd для уменьшения проблем со смещением дня 
     * </pre>
     */
    public int getTimestamp() {
      return timestamp_;
    }

    // optional uint32 campaign = 17;
    public static final int CAMPAIGN_FIELD_NUMBER = 17;
    private int campaign_;
    /**
     * <code>optional uint32 campaign = 17;</code>
     */
    public boolean hasCampaign() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional uint32 campaign = 17;</code>
     */
    public int getCampaign() {
      return campaign_;
    }

    // optional uint32 phrase = 18;
    public static final int PHRASE_FIELD_NUMBER = 18;
    private int phrase_;
    /**
     * <code>optional uint32 phrase = 18;</code>
     *
     * <pre>
     * рекламная кампания 
     * </pre>
     */
    public boolean hasPhrase() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional uint32 phrase = 18;</code>
     *
     * <pre>
     * рекламная кампания 
     * </pre>
     */
    public int getPhrase() {
      return phrase_;
    }

    // optional uint32 banner_url = 19;
    public static final int BANNER_URL_FIELD_NUMBER = 19;
    private int bannerUrl_;
    /**
     * <code>optional uint32 banner_url = 19;</code>
     *
     * <pre>
     * id фразы для контекстных баннеров 
     * </pre>
     */
    public boolean hasBannerUrl() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional uint32 banner_url = 19;</code>
     *
     * <pre>
     * id фразы для контекстных баннеров 
     * </pre>
     */
    public int getBannerUrl() {
      return bannerUrl_;
    }

    // optional uint32 sitezone = 27;
    public static final int SITEZONE_FIELD_NUMBER = 27;
    private int sitezone_;
    /**
     * <code>optional uint32 sitezone = 27;</code>
     *
     * <pre>
     * сайтзона 
     * </pre>
     */
    public boolean hasSitezone() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional uint32 sitezone = 27;</code>
     *
     * <pre>
     * сайтзона 
     * </pre>
     */
    public int getSitezone() {
      return sitezone_;
    }

    // optional uint32 experiment_id = 29;
    public static final int EXPERIMENT_ID_FIELD_NUMBER = 29;
    private int experimentId_;
    /**
     * <code>optional uint32 experiment_id = 29;</code>
     *
     * <pre>
     * id эксперимента из запроса
     * </pre>
     */
    public boolean hasExperimentId() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional uint32 experiment_id = 29;</code>
     *
     * <pre>
     * id эксперимента из запроса
     * </pre>
     */
    public int getExperimentId() {
      return experimentId_;
    }

    // optional uint32 cpm = 30;
    public static final int CPM_FIELD_NUMBER = 30;
    private int cpm_;
    /**
     * <code>optional uint32 cpm = 30;</code>
     */
    public boolean hasCpm() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional uint32 cpm = 30;</code>
     */
    public int getCpm() {
      return cpm_;
    }

    // optional uint32 site_id = 31;
    public static final int SITE_ID_FIELD_NUMBER = 31;
    private int siteId_;
    /**
     * <code>optional uint32 site_id = 31;</code>
     */
    public boolean hasSiteId() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional uint32 site_id = 31;</code>
     */
    public int getSiteId() {
      return siteId_;
    }

    // optional uint32 orig_slot = 43;
    public static final int ORIG_SLOT_FIELD_NUMBER = 43;
    private int origSlot_;
    /**
     * <code>optional uint32 orig_slot = 43;</code>
     *
     * <pre>
     * original slot for merged slot scheme (RB-3867)
     * </pre>
     */
    public boolean hasOrigSlot() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional uint32 orig_slot = 43;</code>
     *
     * <pre>
     * original slot for merged slot scheme (RB-3867)
     * </pre>
     */
    public int getOrigSlot() {
      return origSlot_;
    }

    // optional uint32 filter = 32;
    public static final int FILTER_FIELD_NUMBER = 32;
    private int filter_;
    /**
     * <code>optional uint32 filter = 32;</code>
     *
     * <pre>
     * Filter ID, if it's set then the click or show was filtered and shouldn't be counted in statistics
     * </pre>
     */
    public boolean hasFilter() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional uint32 filter = 32;</code>
     *
     * <pre>
     * Filter ID, if it's set then the click or show was filtered and shouldn't be counted in statistics
     * </pre>
     */
    public int getFilter() {
      return filter_;
    }

    // optional uint32 cln = 40;
    public static final int CLN_FIELD_NUMBER = 40;
    private int cln_;
    /**
     * <code>optional uint32 cln = 40;</code>
     *
     * <pre>
     * ID of click-through counter
     * </pre>
     */
    public boolean hasCln() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional uint32 cln = 40;</code>
     *
     * <pre>
     * ID of click-through counter
     * </pre>
     */
    public int getCln() {
      return cln_;
    }

    // optional uint32 goal = 42;
    public static final int GOAL_FIELD_NUMBER = 42;
    private int goal_;
    /**
     * <code>optional uint32 goal = 42;</code>
     *
     * <pre>
     * Goal ID
     * </pre>
     */
    public boolean hasGoal() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional uint32 goal = 42;</code>
     *
     * <pre>
     * Goal ID
     * </pre>
     */
    public int getGoal() {
      return goal_;
    }

    // optional bytes user_ipv6 = 48;
    public static final int USER_IPV6_FIELD_NUMBER = 48;
    private com.google.protobuf.ByteString userIpv6_;
    /**
     * <code>optional bytes user_ipv6 = 48;</code>
     *
     * <pre>
     * IPv6 address of client
     * </pre>
     */
    public boolean hasUserIpv6() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional bytes user_ipv6 = 48;</code>
     *
     * <pre>
     * IPv6 address of client
     * </pre>
     */
    public com.google.protobuf.ByteString getUserIpv6() {
      return userIpv6_;
    }

    // optional fixed32 user_ip_from_proxy = 50;
    public static final int USER_IP_FROM_PROXY_FIELD_NUMBER = 50;
    private int userIpFromProxy_;
    /**
     * <code>optional fixed32 user_ip_from_proxy = 50;</code>
     *
     * <pre>
     * acquired from X-Forwarded-For and the like
     * </pre>
     */
    public boolean hasUserIpFromProxy() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional fixed32 user_ip_from_proxy = 50;</code>
     *
     * <pre>
     * acquired from X-Forwarded-For and the like
     * </pre>
     */
    public int getUserIpFromProxy() {
      return userIpFromProxy_;
    }

    // optional uint32 banner_event = 51;
    public static final int BANNER_EVENT_FIELD_NUMBER = 51;
    private int bannerEvent_;
    /**
     * <code>optional uint32 banner_event = 51;</code>
     *
     * <pre>
     * banner event for movies
     * </pre>
     */
    public boolean hasBannerEvent() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional uint32 banner_event = 51;</code>
     *
     * <pre>
     * banner event for movies
     * </pre>
     */
    public int getBannerEvent() {
      return bannerEvent_;
    }

    // optional bytes device_id = 55;
    public static final int DEVICE_ID_FIELD_NUMBER = 55;
    private com.google.protobuf.ByteString deviceId_;
    /**
     * <code>optional bytes device_id = 55;</code>
     *
     * <pre>
     *android device id
     * </pre>
     */
    public boolean hasDeviceId() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional bytes device_id = 55;</code>
     *
     * <pre>
     *android device id
     * </pre>
     */
    public com.google.protobuf.ByteString getDeviceId() {
      return deviceId_;
    }

    // optional bytes advertising_id = 128;
    public static final int ADVERTISING_ID_FIELD_NUMBER = 128;
    private com.google.protobuf.ByteString advertisingId_;
    /**
     * <code>optional bytes advertising_id = 128;</code>
     */
    public boolean hasAdvertisingId() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional bytes advertising_id = 128;</code>
     */
    public com.google.protobuf.ByteString getAdvertisingId() {
      return advertisingId_;
    }

    // optional bytes android_id = 56;
    public static final int ANDROID_ID_FIELD_NUMBER = 56;
    private com.google.protobuf.ByteString androidId_;
    /**
     * <code>optional bytes android_id = 56;</code>
     */
    public boolean hasAndroidId() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional bytes android_id = 56;</code>
     */
    public com.google.protobuf.ByteString getAndroidId() {
      return androidId_;
    }

    // optional bytes idfa = 57;
    public static final int IDFA_FIELD_NUMBER = 57;
    private com.google.protobuf.ByteString idfa_;
    /**
     * <code>optional bytes idfa = 57;</code>
     */
    public boolean hasIdfa() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional bytes idfa = 57;</code>
     */
    public com.google.protobuf.ByteString getIdfa() {
      return idfa_;
    }

    // optional bytes waid = 152;
    public static final int WAID_FIELD_NUMBER = 152;
    private com.google.protobuf.ByteString waid_;
    /**
     * <code>optional bytes waid = 152;</code>
     */
    public boolean hasWaid() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bytes waid = 152;</code>
     */
    public com.google.protobuf.ByteString getWaid() {
      return waid_;
    }

    // repeated uint32 matched_targets = 70 [packed = true];
    public static final int MATCHED_TARGETS_FIELD_NUMBER = 70;
    private java.util.List<java.lang.Integer> matchedTargets_;
    /**
     * <code>repeated uint32 matched_targets = 70 [packed = true];</code>
     *
     * <pre>
     * matched targeting ids
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getMatchedTargetsList() {
      return matchedTargets_;
    }
    /**
     * <code>repeated uint32 matched_targets = 70 [packed = true];</code>
     *
     * <pre>
     * matched targeting ids
     * </pre>
     */
    public int getMatchedTargetsCount() {
      return matchedTargets_.size();
    }
    /**
     * <code>repeated uint32 matched_targets = 70 [packed = true];</code>
     *
     * <pre>
     * matched targeting ids
     * </pre>
     */
    public int getMatchedTargets(int index) {
      return matchedTargets_.get(index);
    }
    private int matchedTargetsMemoizedSerializedSize = -1;

    // optional .ru.mail.go.webbase.TargetMsg target = 100;
    public static final int TARGET_FIELD_NUMBER = 100;
    private ru.mail.go.webbase.TargetProto.TargetMsg target_;
    /**
     * <code>optional .ru.mail.go.webbase.TargetMsg target = 100;</code>
     *
     * <pre>
     *
     *переменные таргета, может быть вложенным протобуф-сообщением,
     *в контексте РБ будет скипаться как одно значение
     * </pre>
     */
    public boolean hasTarget() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .ru.mail.go.webbase.TargetMsg target = 100;</code>
     *
     * <pre>
     *
     *переменные таргета, может быть вложенным протобуф-сообщением,
     *в контексте РБ будет скипаться как одно значение
     * </pre>
     */
    public ru.mail.go.webbase.TargetProto.TargetMsg getTarget() {
      return target_;
    }
    /**
     * <code>optional .ru.mail.go.webbase.TargetMsg target = 100;</code>
     *
     * <pre>
     *
     *переменные таргета, может быть вложенным протобуф-сообщением,
     *в контексте РБ будет скипаться как одно значение
     * </pre>
     */
    public ru.mail.go.webbase.TargetProto.TargetMsgOrBuilder getTargetOrBuilder() {
      return target_;
    }

    // optional bytes target_win_notice = 106;
    public static final int TARGET_WIN_NOTICE_FIELD_NUMBER = 106;
    private com.google.protobuf.ByteString targetWinNotice_;
    /**
     * <code>optional bytes target_win_notice = 106;</code>
     */
    public boolean hasTargetWinNotice() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bytes target_win_notice = 106;</code>
     */
    public com.google.protobuf.ByteString getTargetWinNotice() {
      return targetWinNotice_;
    }

    // optional bytes rutube = 102;
    public static final int RUTUBE_FIELD_NUMBER = 102;
    private com.google.protobuf.ByteString rutube_;
    /**
     * <code>optional bytes rutube = 102;</code>
     */
    public boolean hasRutube() {
      return ((bitField1_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bytes rutube = 102;</code>
     */
    public com.google.protobuf.ByteString getRutube() {
      return rutube_;
    }

    // optional uint32 ssp_id = 103;
    public static final int SSP_ID_FIELD_NUMBER = 103;
    private int sspId_;
    /**
     * <code>optional uint32 ssp_id = 103;</code>
     *
     * <pre>
     * вложенное сообщение с данными по рутубу, работаем так же как и с target 
     * </pre>
     */
    public boolean hasSspId() {
      return ((bitField1_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 ssp_id = 103;</code>
     *
     * <pre>
     * вложенное сообщение с данными по рутубу, работаем так же как и с target 
     * </pre>
     */
    public int getSspId() {
      return sspId_;
    }

    // optional bytes request_id = 104;
    public static final int REQUEST_ID_FIELD_NUMBER = 104;
    private com.google.protobuf.ByteString requestId_;
    /**
     * <code>optional bytes request_id = 104;</code>
     */
    public boolean hasRequestId() {
      return ((bitField1_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bytes request_id = 104;</code>
     */
    public com.google.protobuf.ByteString getRequestId() {
      return requestId_;
    }

    // optional bytes sitename = 105;
    public static final int SITENAME_FIELD_NUMBER = 105;
    private com.google.protobuf.ByteString sitename_;
    /**
     * <code>optional bytes sitename = 105;</code>
     */
    public boolean hasSitename() {
      return ((bitField1_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bytes sitename = 105;</code>
     */
    public com.google.protobuf.ByteString getSitename() {
      return sitename_;
    }

    // optional uint64 ok_id = 107;
    public static final int OK_ID_FIELD_NUMBER = 107;
    private long okId_;
    /**
     * <code>optional uint64 ok_id = 107;</code>
     */
    public boolean hasOkId() {
      return ((bitField1_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint64 ok_id = 107;</code>
     */
    public long getOkId() {
      return okId_;
    }

    // optional uint32 random = 111;
    public static final int RANDOM_FIELD_NUMBER = 111;
    private int random_;
    /**
     * <code>optional uint32 random = 111;</code>
     */
    public boolean hasRandom() {
      return ((bitField1_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 random = 111;</code>
     */
    public int getRandom() {
      return random_;
    }

    // optional uint32 mid = 112;
    public static final int MID_FIELD_NUMBER = 112;
    private int mid_;
    /**
     * <code>optional uint32 mid = 112;</code>
     */
    public boolean hasMid() {
      return ((bitField1_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 mid = 112;</code>
     */
    public int getMid() {
      return mid_;
    }

    // optional uint32 action_timestamp = 114;
    public static final int ACTION_TIMESTAMP_FIELD_NUMBER = 114;
    private int actionTimestamp_;
    /**
     * <code>optional uint32 action_timestamp = 114;</code>
     *
     * <pre>
     * таймстамп с фронта (который подставляли в ClickId). Только для ссылок с ClickId
     * </pre>
     */
    public boolean hasActionTimestamp() {
      return ((bitField1_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional uint32 action_timestamp = 114;</code>
     *
     * <pre>
     * таймстамп с фронта (который подставляли в ClickId). Только для ссылок с ClickId
     * </pre>
     */
    public int getActionTimestamp() {
      return actionTimestamp_;
    }

    // optional uint32 postback_vendor = 119;
    public static final int POSTBACK_VENDOR_FIELD_NUMBER = 119;
    private int postbackVendor_;
    /**
     * <code>optional uint32 postback_vendor = 119;</code>
     *
     * <pre>
     *
     *1 - appsflyer
     *2 - MAT
     *3 - Ad-X
     *4 - tapstream
     *5 - adjust
     *6 - gameloft (RB-8027)
     *7 - kochava (RB-8443)
     *8 - Yandex.AppMetrika (RB-8440)
     *9 - Apsalar (RB-8936)
     * </pre>
     */
    public boolean hasPostbackVendor() {
      return ((bitField1_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint32 postback_vendor = 119;</code>
     *
     * <pre>
     *
     *1 - appsflyer
     *2 - MAT
     *3 - Ad-X
     *4 - tapstream
     *5 - adjust
     *6 - gameloft (RB-8027)
     *7 - kochava (RB-8443)
     *8 - Yandex.AppMetrika (RB-8440)
     *9 - Apsalar (RB-8936)
     * </pre>
     */
    public int getPostbackVendor() {
      return postbackVendor_;
    }

    // optional uint64 vk_id = 130;
    public static final int VK_ID_FIELD_NUMBER = 130;
    private long vkId_;
    /**
     * <code>optional uint64 vk_id = 130;</code>
     */
    public boolean hasVkId() {
      return ((bitField1_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional uint64 vk_id = 130;</code>
     */
    public long getVkId() {
      return vkId_;
    }

    // optional bytes sha1_idfa = 131;
    public static final int SHA1_IDFA_FIELD_NUMBER = 131;
    private com.google.protobuf.ByteString sha1Idfa_;
    /**
     * <code>optional bytes sha1_idfa = 131;</code>
     */
    public boolean hasSha1Idfa() {
      return ((bitField1_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional bytes sha1_idfa = 131;</code>
     */
    public com.google.protobuf.ByteString getSha1Idfa() {
      return sha1Idfa_;
    }

    // optional bytes sha1_advertising_id = 132;
    public static final int SHA1_ADVERTISING_ID_FIELD_NUMBER = 132;
    private com.google.protobuf.ByteString sha1AdvertisingId_;
    /**
     * <code>optional bytes sha1_advertising_id = 132;</code>
     */
    public boolean hasSha1AdvertisingId() {
      return ((bitField1_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional bytes sha1_advertising_id = 132;</code>
     */
    public com.google.protobuf.ByteString getSha1AdvertisingId() {
      return sha1AdvertisingId_;
    }

    // optional bytes sha1_dpid = 133;
    public static final int SHA1_DPID_FIELD_NUMBER = 133;
    private com.google.protobuf.ByteString sha1Dpid_;
    /**
     * <code>optional bytes sha1_dpid = 133;</code>
     */
    public boolean hasSha1Dpid() {
      return ((bitField1_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional bytes sha1_dpid = 133;</code>
     */
    public com.google.protobuf.ByteString getSha1Dpid() {
      return sha1Dpid_;
    }

    // optional uint64 uid = 167;
    public static final int UID_FIELD_NUMBER = 167;
    private long uid_;
    /**
     * <code>optional uint64 uid = 167;</code>
     */
    public boolean hasUid() {
      return ((bitField1_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional uint64 uid = 167;</code>
     */
    public long getUid() {
      return uid_;
    }

    // repeated uint64 ok_viral_chain = 171;
    public static final int OK_VIRAL_CHAIN_FIELD_NUMBER = 171;
    private java.util.List<java.lang.Long> okViralChain_;
    /**
     * <code>repeated uint64 ok_viral_chain = 171;</code>
     *
     * <pre>
     * id пользователей вирального распространения топика (RB-10380)
     * </pre>
     */
    public java.util.List<java.lang.Long>
        getOkViralChainList() {
      return okViralChain_;
    }
    /**
     * <code>repeated uint64 ok_viral_chain = 171;</code>
     *
     * <pre>
     * id пользователей вирального распространения топика (RB-10380)
     * </pre>
     */
    public int getOkViralChainCount() {
      return okViralChain_.size();
    }
    /**
     * <code>repeated uint64 ok_viral_chain = 171;</code>
     *
     * <pre>
     * id пользователей вирального распространения топика (RB-10380)
     * </pre>
     */
    public long getOkViralChain(int index) {
      return okViralChain_.get(index);
    }

    // optional uint32 winner_cpm = 185;
    public static final int WINNER_CPM_FIELD_NUMBER = 185;
    private int winnerCpm_;
    /**
     * <code>optional uint32 winner_cpm = 185;</code>
     *
     * <pre>
     * цена, выигравшая RTB аукцион (заполняется для loose-notice)
     * </pre>
     */
    public boolean hasWinnerCpm() {
      return ((bitField1_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional uint32 winner_cpm = 185;</code>
     *
     * <pre>
     * цена, выигравшая RTB аукцион (заполняется для loose-notice)
     * </pre>
     */
    public int getWinnerCpm() {
      return winnerCpm_;
    }

    private void initFields() {
      evType_ = 0;
      flags_ = 0;
      toplogVid_ = 0;
      vid_ = 0L;
      banner_ = 0;
      slot_ = 0;
      group_ = 0;
      version_ = 0;
      age_ = 0;
      sex_ = 0;
      geo_ = 0;
      userId_ = 0L;
      userIp_ = 0;
      srcIpChain_ = java.util.Collections.emptyList();
      timestamp_ = 0;
      campaign_ = 0;
      phrase_ = 0;
      bannerUrl_ = 0;
      sitezone_ = 0;
      experimentId_ = 0;
      cpm_ = 0;
      siteId_ = 0;
      origSlot_ = 0;
      filter_ = 0;
      cln_ = 0;
      goal_ = 0;
      userIpv6_ = com.google.protobuf.ByteString.EMPTY;
      userIpFromProxy_ = 0;
      bannerEvent_ = 0;
      deviceId_ = com.google.protobuf.ByteString.EMPTY;
      advertisingId_ = com.google.protobuf.ByteString.EMPTY;
      androidId_ = com.google.protobuf.ByteString.EMPTY;
      idfa_ = com.google.protobuf.ByteString.EMPTY;
      waid_ = com.google.protobuf.ByteString.EMPTY;
      matchedTargets_ = java.util.Collections.emptyList();
      target_ = ru.mail.go.webbase.TargetProto.TargetMsg.getDefaultInstance();
      targetWinNotice_ = com.google.protobuf.ByteString.EMPTY;
      rutube_ = com.google.protobuf.ByteString.EMPTY;
      sspId_ = 0;
      requestId_ = com.google.protobuf.ByteString.EMPTY;
      sitename_ = com.google.protobuf.ByteString.EMPTY;
      okId_ = 0L;
      random_ = 0;
      mid_ = 0;
      actionTimestamp_ = 0;
      postbackVendor_ = 0;
      vkId_ = 0L;
      sha1Idfa_ = com.google.protobuf.ByteString.EMPTY;
      sha1AdvertisingId_ = com.google.protobuf.ByteString.EMPTY;
      sha1Dpid_ = com.google.protobuf.ByteString.EMPTY;
      uid_ = 0L;
      okViralChain_ = java.util.Collections.emptyList();
      winnerCpm_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, evType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, flags_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFixed32(3, toplogVid_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(4, banner_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(5, slot_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(6, group_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(7, version_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, age_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, sex_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(11, geo_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt64(12, userId_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeFixed32(13, userIp_);
      }
      for (int i = 0; i < srcIpChain_.size(); i++) {
        output.writeFixed32(14, srcIpChain_.get(i));
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeFixed32(15, timestamp_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeUInt32(17, campaign_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeUInt32(18, phrase_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeUInt32(19, bannerUrl_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeUInt32(27, sitezone_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeUInt32(29, experimentId_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeUInt32(30, cpm_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeUInt32(31, siteId_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeUInt32(32, filter_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeUInt32(40, cln_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeUInt32(42, goal_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeUInt32(43, origSlot_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeBytes(48, userIpv6_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeFixed32(50, userIpFromProxy_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeUInt32(51, bannerEvent_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeBytes(55, deviceId_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeBytes(56, androidId_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeBytes(57, idfa_);
      }
      if (getMatchedTargetsList().size() > 0) {
        output.writeRawVarint32(562);
        output.writeRawVarint32(matchedTargetsMemoizedSerializedSize);
      }
      for (int i = 0; i < matchedTargets_.size(); i++) {
        output.writeUInt32NoTag(matchedTargets_.get(i));
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(100, target_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(102, rutube_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(103, sspId_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(104, requestId_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        output.writeBytes(105, sitename_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(106, targetWinNotice_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        output.writeUInt64(107, okId_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(111, random_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(112, mid_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(114, actionTimestamp_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(119, postbackVendor_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeBytes(128, advertisingId_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        output.writeUInt64(130, vkId_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        output.writeBytes(131, sha1Idfa_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        output.writeBytes(132, sha1AdvertisingId_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        output.writeBytes(133, sha1Dpid_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(152, waid_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt64(153, vid_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        output.writeUInt64(167, uid_);
      }
      for (int i = 0; i < okViralChain_.size(); i++) {
        output.writeUInt64(171, okViralChain_.get(i));
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        output.writeUInt32(185, winnerCpm_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, evType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, flags_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, toplogVid_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, banner_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, slot_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, group_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, version_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, age_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, sex_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, geo_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(12, userId_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(13, userIp_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getSrcIpChainList().size();
        size += dataSize;
        size += 1 * getSrcIpChainList().size();
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(15, timestamp_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(17, campaign_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(18, phrase_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(19, bannerUrl_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(27, sitezone_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(29, experimentId_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(30, cpm_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(31, siteId_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(32, filter_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(40, cln_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(42, goal_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(43, origSlot_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(48, userIpv6_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(50, userIpFromProxy_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(51, bannerEvent_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(55, deviceId_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(56, androidId_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(57, idfa_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < matchedTargets_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(matchedTargets_.get(i));
        }
        size += dataSize;
        if (!getMatchedTargetsList().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        matchedTargetsMemoizedSerializedSize = dataSize;
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(100, target_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(102, rutube_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(103, sspId_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(104, requestId_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(105, sitename_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(106, targetWinNotice_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(107, okId_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(111, random_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(112, mid_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(114, actionTimestamp_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(119, postbackVendor_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(128, advertisingId_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(130, vkId_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(131, sha1Idfa_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(132, sha1AdvertisingId_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(133, sha1Dpid_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(152, waid_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(153, vid_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(167, uid_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < okViralChain_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(okViralChain_.get(i));
        }
        size += dataSize;
        size += 2 * getOkViralChainList().size();
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(185, winnerCpm_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static ru.mail.go.webbase.TargetProto.TargetStatMsg parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ru.mail.go.webbase.TargetProto.TargetStatMsg parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ru.mail.go.webbase.TargetProto.TargetStatMsg parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ru.mail.go.webbase.TargetProto.TargetStatMsg parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ru.mail.go.webbase.TargetProto.TargetStatMsg parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static ru.mail.go.webbase.TargetProto.TargetStatMsg parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static ru.mail.go.webbase.TargetProto.TargetStatMsg parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static ru.mail.go.webbase.TargetProto.TargetStatMsg parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static ru.mail.go.webbase.TargetProto.TargetStatMsg parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static ru.mail.go.webbase.TargetProto.TargetStatMsg parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(ru.mail.go.webbase.TargetProto.TargetStatMsg prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ru.mail.go.webbase.TargetStatMsg}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements ru.mail.go.webbase.TargetProto.TargetStatMsgOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetStatMsg_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetStatMsg_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.mail.go.webbase.TargetProto.TargetStatMsg.class, ru.mail.go.webbase.TargetProto.TargetStatMsg.Builder.class);
      }

      // Construct using ru.mail.go.webbase.TargetProto.TargetStatMsg.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTargetFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        evType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        flags_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        toplogVid_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        vid_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        banner_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        slot_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        group_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        version_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        age_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        sex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        geo_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        userId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000800);
        userIp_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        srcIpChain_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        timestamp_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        campaign_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        phrase_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        bannerUrl_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        sitezone_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        experimentId_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        cpm_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        siteId_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        origSlot_ = 0;
        bitField0_ = (bitField0_ & ~0x00400000);
        filter_ = 0;
        bitField0_ = (bitField0_ & ~0x00800000);
        cln_ = 0;
        bitField0_ = (bitField0_ & ~0x01000000);
        goal_ = 0;
        bitField0_ = (bitField0_ & ~0x02000000);
        userIpv6_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x04000000);
        userIpFromProxy_ = 0;
        bitField0_ = (bitField0_ & ~0x08000000);
        bannerEvent_ = 0;
        bitField0_ = (bitField0_ & ~0x10000000);
        deviceId_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x20000000);
        advertisingId_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x40000000);
        androidId_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x80000000);
        idfa_ = com.google.protobuf.ByteString.EMPTY;
        bitField1_ = (bitField1_ & ~0x00000001);
        waid_ = com.google.protobuf.ByteString.EMPTY;
        bitField1_ = (bitField1_ & ~0x00000002);
        matchedTargets_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00000004);
        if (targetBuilder_ == null) {
          target_ = ru.mail.go.webbase.TargetProto.TargetMsg.getDefaultInstance();
        } else {
          targetBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000008);
        targetWinNotice_ = com.google.protobuf.ByteString.EMPTY;
        bitField1_ = (bitField1_ & ~0x00000010);
        rutube_ = com.google.protobuf.ByteString.EMPTY;
        bitField1_ = (bitField1_ & ~0x00000020);
        sspId_ = 0;
        bitField1_ = (bitField1_ & ~0x00000040);
        requestId_ = com.google.protobuf.ByteString.EMPTY;
        bitField1_ = (bitField1_ & ~0x00000080);
        sitename_ = com.google.protobuf.ByteString.EMPTY;
        bitField1_ = (bitField1_ & ~0x00000100);
        okId_ = 0L;
        bitField1_ = (bitField1_ & ~0x00000200);
        random_ = 0;
        bitField1_ = (bitField1_ & ~0x00000400);
        mid_ = 0;
        bitField1_ = (bitField1_ & ~0x00000800);
        actionTimestamp_ = 0;
        bitField1_ = (bitField1_ & ~0x00001000);
        postbackVendor_ = 0;
        bitField1_ = (bitField1_ & ~0x00002000);
        vkId_ = 0L;
        bitField1_ = (bitField1_ & ~0x00004000);
        sha1Idfa_ = com.google.protobuf.ByteString.EMPTY;
        bitField1_ = (bitField1_ & ~0x00008000);
        sha1AdvertisingId_ = com.google.protobuf.ByteString.EMPTY;
        bitField1_ = (bitField1_ & ~0x00010000);
        sha1Dpid_ = com.google.protobuf.ByteString.EMPTY;
        bitField1_ = (bitField1_ & ~0x00020000);
        uid_ = 0L;
        bitField1_ = (bitField1_ & ~0x00040000);
        okViralChain_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00080000);
        winnerCpm_ = 0;
        bitField1_ = (bitField1_ & ~0x00100000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetStatMsg_descriptor;
      }

      public ru.mail.go.webbase.TargetProto.TargetStatMsg getDefaultInstanceForType() {
        return ru.mail.go.webbase.TargetProto.TargetStatMsg.getDefaultInstance();
      }

      public ru.mail.go.webbase.TargetProto.TargetStatMsg build() {
        ru.mail.go.webbase.TargetProto.TargetStatMsg result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public ru.mail.go.webbase.TargetProto.TargetStatMsg buildPartial() {
        ru.mail.go.webbase.TargetProto.TargetStatMsg result = new ru.mail.go.webbase.TargetProto.TargetStatMsg(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.evType_ = evType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.flags_ = flags_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.toplogVid_ = toplogVid_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.vid_ = vid_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.banner_ = banner_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.slot_ = slot_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.group_ = group_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.version_ = version_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.age_ = age_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.sex_ = sex_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.geo_ = geo_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.userId_ = userId_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.userIp_ = userIp_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          srcIpChain_ = java.util.Collections.unmodifiableList(srcIpChain_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.srcIpChain_ = srcIpChain_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.timestamp_ = timestamp_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.campaign_ = campaign_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.phrase_ = phrase_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.bannerUrl_ = bannerUrl_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.sitezone_ = sitezone_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.experimentId_ = experimentId_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.cpm_ = cpm_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.siteId_ = siteId_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.origSlot_ = origSlot_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.filter_ = filter_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.cln_ = cln_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.goal_ = goal_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.userIpv6_ = userIpv6_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.userIpFromProxy_ = userIpFromProxy_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.bannerEvent_ = bannerEvent_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.deviceId_ = deviceId_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x20000000;
        }
        result.advertisingId_ = advertisingId_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x40000000;
        }
        result.androidId_ = androidId_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x80000000;
        }
        result.idfa_ = idfa_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField1_ |= 0x00000001;
        }
        result.waid_ = waid_;
        if (((bitField1_ & 0x00000004) == 0x00000004)) {
          matchedTargets_ = java.util.Collections.unmodifiableList(matchedTargets_);
          bitField1_ = (bitField1_ & ~0x00000004);
        }
        result.matchedTargets_ = matchedTargets_;
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField1_ |= 0x00000002;
        }
        if (targetBuilder_ == null) {
          result.target_ = target_;
        } else {
          result.target_ = targetBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField1_ |= 0x00000004;
        }
        result.targetWinNotice_ = targetWinNotice_;
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField1_ |= 0x00000008;
        }
        result.rutube_ = rutube_;
        if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
          to_bitField1_ |= 0x00000010;
        }
        result.sspId_ = sspId_;
        if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
          to_bitField1_ |= 0x00000020;
        }
        result.requestId_ = requestId_;
        if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
          to_bitField1_ |= 0x00000040;
        }
        result.sitename_ = sitename_;
        if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
          to_bitField1_ |= 0x00000080;
        }
        result.okId_ = okId_;
        if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
          to_bitField1_ |= 0x00000100;
        }
        result.random_ = random_;
        if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
          to_bitField1_ |= 0x00000200;
        }
        result.mid_ = mid_;
        if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
          to_bitField1_ |= 0x00000400;
        }
        result.actionTimestamp_ = actionTimestamp_;
        if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
          to_bitField1_ |= 0x00000800;
        }
        result.postbackVendor_ = postbackVendor_;
        if (((from_bitField1_ & 0x00004000) == 0x00004000)) {
          to_bitField1_ |= 0x00001000;
        }
        result.vkId_ = vkId_;
        if (((from_bitField1_ & 0x00008000) == 0x00008000)) {
          to_bitField1_ |= 0x00002000;
        }
        result.sha1Idfa_ = sha1Idfa_;
        if (((from_bitField1_ & 0x00010000) == 0x00010000)) {
          to_bitField1_ |= 0x00004000;
        }
        result.sha1AdvertisingId_ = sha1AdvertisingId_;
        if (((from_bitField1_ & 0x00020000) == 0x00020000)) {
          to_bitField1_ |= 0x00008000;
        }
        result.sha1Dpid_ = sha1Dpid_;
        if (((from_bitField1_ & 0x00040000) == 0x00040000)) {
          to_bitField1_ |= 0x00010000;
        }
        result.uid_ = uid_;
        if (((bitField1_ & 0x00080000) == 0x00080000)) {
          okViralChain_ = java.util.Collections.unmodifiableList(okViralChain_);
          bitField1_ = (bitField1_ & ~0x00080000);
        }
        result.okViralChain_ = okViralChain_;
        if (((from_bitField1_ & 0x00100000) == 0x00100000)) {
          to_bitField1_ |= 0x00020000;
        }
        result.winnerCpm_ = winnerCpm_;
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ru.mail.go.webbase.TargetProto.TargetStatMsg) {
          return mergeFrom((ru.mail.go.webbase.TargetProto.TargetStatMsg)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ru.mail.go.webbase.TargetProto.TargetStatMsg other) {
        if (other == ru.mail.go.webbase.TargetProto.TargetStatMsg.getDefaultInstance()) return this;
        if (other.hasEvType()) {
          setEvType(other.getEvType());
        }
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (other.hasToplogVid()) {
          setToplogVid(other.getToplogVid());
        }
        if (other.hasVid()) {
          setVid(other.getVid());
        }
        if (other.hasBanner()) {
          setBanner(other.getBanner());
        }
        if (other.hasSlot()) {
          setSlot(other.getSlot());
        }
        if (other.hasGroup()) {
          setGroup(other.getGroup());
        }
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasAge()) {
          setAge(other.getAge());
        }
        if (other.hasSex()) {
          setSex(other.getSex());
        }
        if (other.hasGeo()) {
          setGeo(other.getGeo());
        }
        if (other.hasUserId()) {
          setUserId(other.getUserId());
        }
        if (other.hasUserIp()) {
          setUserIp(other.getUserIp());
        }
        if (!other.srcIpChain_.isEmpty()) {
          if (srcIpChain_.isEmpty()) {
            srcIpChain_ = other.srcIpChain_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureSrcIpChainIsMutable();
            srcIpChain_.addAll(other.srcIpChain_);
          }
          onChanged();
        }
        if (other.hasTimestamp()) {
          setTimestamp(other.getTimestamp());
        }
        if (other.hasCampaign()) {
          setCampaign(other.getCampaign());
        }
        if (other.hasPhrase()) {
          setPhrase(other.getPhrase());
        }
        if (other.hasBannerUrl()) {
          setBannerUrl(other.getBannerUrl());
        }
        if (other.hasSitezone()) {
          setSitezone(other.getSitezone());
        }
        if (other.hasExperimentId()) {
          setExperimentId(other.getExperimentId());
        }
        if (other.hasCpm()) {
          setCpm(other.getCpm());
        }
        if (other.hasSiteId()) {
          setSiteId(other.getSiteId());
        }
        if (other.hasOrigSlot()) {
          setOrigSlot(other.getOrigSlot());
        }
        if (other.hasFilter()) {
          setFilter(other.getFilter());
        }
        if (other.hasCln()) {
          setCln(other.getCln());
        }
        if (other.hasGoal()) {
          setGoal(other.getGoal());
        }
        if (other.hasUserIpv6()) {
          setUserIpv6(other.getUserIpv6());
        }
        if (other.hasUserIpFromProxy()) {
          setUserIpFromProxy(other.getUserIpFromProxy());
        }
        if (other.hasBannerEvent()) {
          setBannerEvent(other.getBannerEvent());
        }
        if (other.hasDeviceId()) {
          setDeviceId(other.getDeviceId());
        }
        if (other.hasAdvertisingId()) {
          setAdvertisingId(other.getAdvertisingId());
        }
        if (other.hasAndroidId()) {
          setAndroidId(other.getAndroidId());
        }
        if (other.hasIdfa()) {
          setIdfa(other.getIdfa());
        }
        if (other.hasWaid()) {
          setWaid(other.getWaid());
        }
        if (!other.matchedTargets_.isEmpty()) {
          if (matchedTargets_.isEmpty()) {
            matchedTargets_ = other.matchedTargets_;
            bitField1_ = (bitField1_ & ~0x00000004);
          } else {
            ensureMatchedTargetsIsMutable();
            matchedTargets_.addAll(other.matchedTargets_);
          }
          onChanged();
        }
        if (other.hasTarget()) {
          mergeTarget(other.getTarget());
        }
        if (other.hasTargetWinNotice()) {
          setTargetWinNotice(other.getTargetWinNotice());
        }
        if (other.hasRutube()) {
          setRutube(other.getRutube());
        }
        if (other.hasSspId()) {
          setSspId(other.getSspId());
        }
        if (other.hasRequestId()) {
          setRequestId(other.getRequestId());
        }
        if (other.hasSitename()) {
          setSitename(other.getSitename());
        }
        if (other.hasOkId()) {
          setOkId(other.getOkId());
        }
        if (other.hasRandom()) {
          setRandom(other.getRandom());
        }
        if (other.hasMid()) {
          setMid(other.getMid());
        }
        if (other.hasActionTimestamp()) {
          setActionTimestamp(other.getActionTimestamp());
        }
        if (other.hasPostbackVendor()) {
          setPostbackVendor(other.getPostbackVendor());
        }
        if (other.hasVkId()) {
          setVkId(other.getVkId());
        }
        if (other.hasSha1Idfa()) {
          setSha1Idfa(other.getSha1Idfa());
        }
        if (other.hasSha1AdvertisingId()) {
          setSha1AdvertisingId(other.getSha1AdvertisingId());
        }
        if (other.hasSha1Dpid()) {
          setSha1Dpid(other.getSha1Dpid());
        }
        if (other.hasUid()) {
          setUid(other.getUid());
        }
        if (!other.okViralChain_.isEmpty()) {
          if (okViralChain_.isEmpty()) {
            okViralChain_ = other.okViralChain_;
            bitField1_ = (bitField1_ & ~0x00080000);
          } else {
            ensureOkViralChainIsMutable();
            okViralChain_.addAll(other.okViralChain_);
          }
          onChanged();
        }
        if (other.hasWinnerCpm()) {
          setWinnerCpm(other.getWinnerCpm());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ru.mail.go.webbase.TargetProto.TargetStatMsg parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ru.mail.go.webbase.TargetProto.TargetStatMsg) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      // optional uint32 ev_type = 1;
      private int evType_ ;
      /**
       * <code>optional uint32 ev_type = 1;</code>
       */
      public boolean hasEvType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 ev_type = 1;</code>
       */
      public int getEvType() {
        return evType_;
      }
      /**
       * <code>optional uint32 ev_type = 1;</code>
       */
      public Builder setEvType(int value) {
        bitField0_ |= 0x00000001;
        evType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ev_type = 1;</code>
       */
      public Builder clearEvType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        evType_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 flags = 2;
      private int flags_ ;
      /**
       * <code>optional uint32 flags = 2;</code>
       *
       * <pre>
       *
       *тип события:
       *0 - показ
       *1 - клик
       *... другое
       * </pre>
       */
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 flags = 2;</code>
       *
       * <pre>
       *
       *тип события:
       *0 - показ
       *1 - клик
       *... другое
       * </pre>
       */
      public int getFlags() {
        return flags_;
      }
      /**
       * <code>optional uint32 flags = 2;</code>
       *
       * <pre>
       *
       *тип события:
       *0 - показ
       *1 - клик
       *... другое
       * </pre>
       */
      public Builder setFlags(int value) {
        bitField0_ |= 0x00000002;
        flags_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 flags = 2;</code>
       *
       * <pre>
       *
       *тип события:
       *0 - показ
       *1 - клик
       *... другое
       * </pre>
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000002);
        flags_ = 0;
        onChanged();
        return this;
      }

      // optional fixed32 toplog_vid = 3;
      private int toplogVid_ ;
      /**
       * <code>optional fixed32 toplog_vid = 3;</code>
       *
       * <pre>
       * parsed from VID cookie
       * </pre>
       */
      public boolean hasToplogVid() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional fixed32 toplog_vid = 3;</code>
       *
       * <pre>
       * parsed from VID cookie
       * </pre>
       */
      public int getToplogVid() {
        return toplogVid_;
      }
      /**
       * <code>optional fixed32 toplog_vid = 3;</code>
       *
       * <pre>
       * parsed from VID cookie
       * </pre>
       */
      public Builder setToplogVid(int value) {
        bitField0_ |= 0x00000004;
        toplogVid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 toplog_vid = 3;</code>
       *
       * <pre>
       * parsed from VID cookie
       * </pre>
       */
      public Builder clearToplogVid() {
        bitField0_ = (bitField0_ & ~0x00000004);
        toplogVid_ = 0;
        onChanged();
        return this;
      }

      // optional uint64 vid = 153;
      private long vid_ ;
      /**
       * <code>optional uint64 vid = 153;</code>
       */
      public boolean hasVid() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint64 vid = 153;</code>
       */
      public long getVid() {
        return vid_;
      }
      /**
       * <code>optional uint64 vid = 153;</code>
       */
      public Builder setVid(long value) {
        bitField0_ |= 0x00000008;
        vid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 vid = 153;</code>
       */
      public Builder clearVid() {
        bitField0_ = (bitField0_ & ~0x00000008);
        vid_ = 0L;
        onChanged();
        return this;
      }

      // optional uint32 banner = 4;
      private int banner_ ;
      /**
       * <code>optional uint32 banner = 4;</code>
       */
      public boolean hasBanner() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 banner = 4;</code>
       */
      public int getBanner() {
        return banner_;
      }
      /**
       * <code>optional uint32 banner = 4;</code>
       */
      public Builder setBanner(int value) {
        bitField0_ |= 0x00000010;
        banner_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 banner = 4;</code>
       */
      public Builder clearBanner() {
        bitField0_ = (bitField0_ & ~0x00000010);
        banner_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 slot = 5;
      private int slot_ ;
      /**
       * <code>optional uint32 slot = 5;</code>
       */
      public boolean hasSlot() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 slot = 5;</code>
       */
      public int getSlot() {
        return slot_;
      }
      /**
       * <code>optional uint32 slot = 5;</code>
       */
      public Builder setSlot(int value) {
        bitField0_ |= 0x00000020;
        slot_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 slot = 5;</code>
       */
      public Builder clearSlot() {
        bitField0_ = (bitField0_ & ~0x00000020);
        slot_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 group = 6;
      private int group_ ;
      /**
       * <code>optional uint32 group = 6;</code>
       */
      public boolean hasGroup() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 group = 6;</code>
       */
      public int getGroup() {
        return group_;
      }
      /**
       * <code>optional uint32 group = 6;</code>
       */
      public Builder setGroup(int value) {
        bitField0_ |= 0x00000040;
        group_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 group = 6;</code>
       */
      public Builder clearGroup() {
        bitField0_ = (bitField0_ & ~0x00000040);
        group_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 version = 7;
      private int version_ ;
      /**
       * <code>optional uint32 version = 7;</code>
       *
       * <pre>
       * RB client version, see rb2.master/include/protocol.h for rb_version_t
       * </pre>
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 version = 7;</code>
       *
       * <pre>
       * RB client version, see rb2.master/include/protocol.h for rb_version_t
       * </pre>
       */
      public int getVersion() {
        return version_;
      }
      /**
       * <code>optional uint32 version = 7;</code>
       *
       * <pre>
       * RB client version, see rb2.master/include/protocol.h for rb_version_t
       * </pre>
       */
      public Builder setVersion(int value) {
        bitField0_ |= 0x00000080;
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 version = 7;</code>
       *
       * <pre>
       * RB client version, see rb2.master/include/protocol.h for rb_version_t
       * </pre>
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000080);
        version_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 age = 9;
      private int age_ ;
      /**
       * <code>optional uint32 age = 9;</code>
       */
      public boolean hasAge() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 age = 9;</code>
       */
      public int getAge() {
        return age_;
      }
      /**
       * <code>optional uint32 age = 9;</code>
       */
      public Builder setAge(int value) {
        bitField0_ |= 0x00000100;
        age_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 age = 9;</code>
       */
      public Builder clearAge() {
        bitField0_ = (bitField0_ & ~0x00000100);
        age_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 sex = 10;
      private int sex_ ;
      /**
       * <code>optional uint32 sex = 10;</code>
       */
      public boolean hasSex() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 sex = 10;</code>
       */
      public int getSex() {
        return sex_;
      }
      /**
       * <code>optional uint32 sex = 10;</code>
       */
      public Builder setSex(int value) {
        bitField0_ |= 0x00000200;
        sex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 sex = 10;</code>
       */
      public Builder clearSex() {
        bitField0_ = (bitField0_ & ~0x00000200);
        sex_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 geo = 11;
      private int geo_ ;
      /**
       * <code>optional uint32 geo = 11;</code>
       */
      public boolean hasGeo() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint32 geo = 11;</code>
       */
      public int getGeo() {
        return geo_;
      }
      /**
       * <code>optional uint32 geo = 11;</code>
       */
      public Builder setGeo(int value) {
        bitField0_ |= 0x00000400;
        geo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 geo = 11;</code>
       */
      public Builder clearGeo() {
        bitField0_ = (bitField0_ & ~0x00000400);
        geo_ = 0;
        onChanged();
        return this;
      }

      // optional uint64 user_id = 12;
      private long userId_ ;
      /**
       * <code>optional uint64 user_id = 12;</code>
       *
       * <pre>
       * id пользователя из куки p 
       * </pre>
       */
      public boolean hasUserId() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint64 user_id = 12;</code>
       *
       * <pre>
       * id пользователя из куки p 
       * </pre>
       */
      public long getUserId() {
        return userId_;
      }
      /**
       * <code>optional uint64 user_id = 12;</code>
       *
       * <pre>
       * id пользователя из куки p 
       * </pre>
       */
      public Builder setUserId(long value) {
        bitField0_ |= 0x00000800;
        userId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 user_id = 12;</code>
       *
       * <pre>
       * id пользователя из куки p 
       * </pre>
       */
      public Builder clearUserId() {
        bitField0_ = (bitField0_ & ~0x00000800);
        userId_ = 0L;
        onChanged();
        return this;
      }

      // optional fixed32 user_ip = 13;
      private int userIp_ ;
      /**
       * <code>optional fixed32 user_ip = 13;</code>
       *
       * <pre>
       * client's address goes here
       * </pre>
       */
      public boolean hasUserIp() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional fixed32 user_ip = 13;</code>
       *
       * <pre>
       * client's address goes here
       * </pre>
       */
      public int getUserIp() {
        return userIp_;
      }
      /**
       * <code>optional fixed32 user_ip = 13;</code>
       *
       * <pre>
       * client's address goes here
       * </pre>
       */
      public Builder setUserIp(int value) {
        bitField0_ |= 0x00001000;
        userIp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 user_ip = 13;</code>
       *
       * <pre>
       * client's address goes here
       * </pre>
       */
      public Builder clearUserIp() {
        bitField0_ = (bitField0_ & ~0x00001000);
        userIp_ = 0;
        onChanged();
        return this;
      }

      // repeated fixed32 src_ip_chain = 14;
      private java.util.List<java.lang.Integer> srcIpChain_ = java.util.Collections.emptyList();
      private void ensureSrcIpChainIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          srcIpChain_ = new java.util.ArrayList<java.lang.Integer>(srcIpChain_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated fixed32 src_ip_chain = 14;</code>
       *
       * <pre>
       * ip address chain added by our daemons
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getSrcIpChainList() {
        return java.util.Collections.unmodifiableList(srcIpChain_);
      }
      /**
       * <code>repeated fixed32 src_ip_chain = 14;</code>
       *
       * <pre>
       * ip address chain added by our daemons
       * </pre>
       */
      public int getSrcIpChainCount() {
        return srcIpChain_.size();
      }
      /**
       * <code>repeated fixed32 src_ip_chain = 14;</code>
       *
       * <pre>
       * ip address chain added by our daemons
       * </pre>
       */
      public int getSrcIpChain(int index) {
        return srcIpChain_.get(index);
      }
      /**
       * <code>repeated fixed32 src_ip_chain = 14;</code>
       *
       * <pre>
       * ip address chain added by our daemons
       * </pre>
       */
      public Builder setSrcIpChain(
          int index, int value) {
        ensureSrcIpChainIsMutable();
        srcIpChain_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed32 src_ip_chain = 14;</code>
       *
       * <pre>
       * ip address chain added by our daemons
       * </pre>
       */
      public Builder addSrcIpChain(int value) {
        ensureSrcIpChainIsMutable();
        srcIpChain_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed32 src_ip_chain = 14;</code>
       *
       * <pre>
       * ip address chain added by our daemons
       * </pre>
       */
      public Builder addAllSrcIpChain(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSrcIpChainIsMutable();
        super.addAll(values, srcIpChain_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed32 src_ip_chain = 14;</code>
       *
       * <pre>
       * ip address chain added by our daemons
       * </pre>
       */
      public Builder clearSrcIpChain() {
        srcIpChain_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }

      // optional fixed32 timestamp = 15;
      private int timestamp_ ;
      /**
       * <code>optional fixed32 timestamp = 15;</code>
       *
       * <pre>
       * (???) я бы писал в районе rbstatd для уменьшения проблем со смещением дня 
       * </pre>
       */
      public boolean hasTimestamp() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional fixed32 timestamp = 15;</code>
       *
       * <pre>
       * (???) я бы писал в районе rbstatd для уменьшения проблем со смещением дня 
       * </pre>
       */
      public int getTimestamp() {
        return timestamp_;
      }
      /**
       * <code>optional fixed32 timestamp = 15;</code>
       *
       * <pre>
       * (???) я бы писал в районе rbstatd для уменьшения проблем со смещением дня 
       * </pre>
       */
      public Builder setTimestamp(int value) {
        bitField0_ |= 0x00004000;
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 timestamp = 15;</code>
       *
       * <pre>
       * (???) я бы писал в районе rbstatd для уменьшения проблем со смещением дня 
       * </pre>
       */
      public Builder clearTimestamp() {
        bitField0_ = (bitField0_ & ~0x00004000);
        timestamp_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 campaign = 17;
      private int campaign_ ;
      /**
       * <code>optional uint32 campaign = 17;</code>
       */
      public boolean hasCampaign() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional uint32 campaign = 17;</code>
       */
      public int getCampaign() {
        return campaign_;
      }
      /**
       * <code>optional uint32 campaign = 17;</code>
       */
      public Builder setCampaign(int value) {
        bitField0_ |= 0x00008000;
        campaign_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 campaign = 17;</code>
       */
      public Builder clearCampaign() {
        bitField0_ = (bitField0_ & ~0x00008000);
        campaign_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 phrase = 18;
      private int phrase_ ;
      /**
       * <code>optional uint32 phrase = 18;</code>
       *
       * <pre>
       * рекламная кампания 
       * </pre>
       */
      public boolean hasPhrase() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional uint32 phrase = 18;</code>
       *
       * <pre>
       * рекламная кампания 
       * </pre>
       */
      public int getPhrase() {
        return phrase_;
      }
      /**
       * <code>optional uint32 phrase = 18;</code>
       *
       * <pre>
       * рекламная кампания 
       * </pre>
       */
      public Builder setPhrase(int value) {
        bitField0_ |= 0x00010000;
        phrase_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 phrase = 18;</code>
       *
       * <pre>
       * рекламная кампания 
       * </pre>
       */
      public Builder clearPhrase() {
        bitField0_ = (bitField0_ & ~0x00010000);
        phrase_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 banner_url = 19;
      private int bannerUrl_ ;
      /**
       * <code>optional uint32 banner_url = 19;</code>
       *
       * <pre>
       * id фразы для контекстных баннеров 
       * </pre>
       */
      public boolean hasBannerUrl() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional uint32 banner_url = 19;</code>
       *
       * <pre>
       * id фразы для контекстных баннеров 
       * </pre>
       */
      public int getBannerUrl() {
        return bannerUrl_;
      }
      /**
       * <code>optional uint32 banner_url = 19;</code>
       *
       * <pre>
       * id фразы для контекстных баннеров 
       * </pre>
       */
      public Builder setBannerUrl(int value) {
        bitField0_ |= 0x00020000;
        bannerUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 banner_url = 19;</code>
       *
       * <pre>
       * id фразы для контекстных баннеров 
       * </pre>
       */
      public Builder clearBannerUrl() {
        bitField0_ = (bitField0_ & ~0x00020000);
        bannerUrl_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 sitezone = 27;
      private int sitezone_ ;
      /**
       * <code>optional uint32 sitezone = 27;</code>
       *
       * <pre>
       * сайтзона 
       * </pre>
       */
      public boolean hasSitezone() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional uint32 sitezone = 27;</code>
       *
       * <pre>
       * сайтзона 
       * </pre>
       */
      public int getSitezone() {
        return sitezone_;
      }
      /**
       * <code>optional uint32 sitezone = 27;</code>
       *
       * <pre>
       * сайтзона 
       * </pre>
       */
      public Builder setSitezone(int value) {
        bitField0_ |= 0x00040000;
        sitezone_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 sitezone = 27;</code>
       *
       * <pre>
       * сайтзона 
       * </pre>
       */
      public Builder clearSitezone() {
        bitField0_ = (bitField0_ & ~0x00040000);
        sitezone_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 experiment_id = 29;
      private int experimentId_ ;
      /**
       * <code>optional uint32 experiment_id = 29;</code>
       *
       * <pre>
       * id эксперимента из запроса
       * </pre>
       */
      public boolean hasExperimentId() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional uint32 experiment_id = 29;</code>
       *
       * <pre>
       * id эксперимента из запроса
       * </pre>
       */
      public int getExperimentId() {
        return experimentId_;
      }
      /**
       * <code>optional uint32 experiment_id = 29;</code>
       *
       * <pre>
       * id эксперимента из запроса
       * </pre>
       */
      public Builder setExperimentId(int value) {
        bitField0_ |= 0x00080000;
        experimentId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 experiment_id = 29;</code>
       *
       * <pre>
       * id эксперимента из запроса
       * </pre>
       */
      public Builder clearExperimentId() {
        bitField0_ = (bitField0_ & ~0x00080000);
        experimentId_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 cpm = 30;
      private int cpm_ ;
      /**
       * <code>optional uint32 cpm = 30;</code>
       */
      public boolean hasCpm() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional uint32 cpm = 30;</code>
       */
      public int getCpm() {
        return cpm_;
      }
      /**
       * <code>optional uint32 cpm = 30;</code>
       */
      public Builder setCpm(int value) {
        bitField0_ |= 0x00100000;
        cpm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 cpm = 30;</code>
       */
      public Builder clearCpm() {
        bitField0_ = (bitField0_ & ~0x00100000);
        cpm_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 site_id = 31;
      private int siteId_ ;
      /**
       * <code>optional uint32 site_id = 31;</code>
       */
      public boolean hasSiteId() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional uint32 site_id = 31;</code>
       */
      public int getSiteId() {
        return siteId_;
      }
      /**
       * <code>optional uint32 site_id = 31;</code>
       */
      public Builder setSiteId(int value) {
        bitField0_ |= 0x00200000;
        siteId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 site_id = 31;</code>
       */
      public Builder clearSiteId() {
        bitField0_ = (bitField0_ & ~0x00200000);
        siteId_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 orig_slot = 43;
      private int origSlot_ ;
      /**
       * <code>optional uint32 orig_slot = 43;</code>
       *
       * <pre>
       * original slot for merged slot scheme (RB-3867)
       * </pre>
       */
      public boolean hasOrigSlot() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional uint32 orig_slot = 43;</code>
       *
       * <pre>
       * original slot for merged slot scheme (RB-3867)
       * </pre>
       */
      public int getOrigSlot() {
        return origSlot_;
      }
      /**
       * <code>optional uint32 orig_slot = 43;</code>
       *
       * <pre>
       * original slot for merged slot scheme (RB-3867)
       * </pre>
       */
      public Builder setOrigSlot(int value) {
        bitField0_ |= 0x00400000;
        origSlot_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 orig_slot = 43;</code>
       *
       * <pre>
       * original slot for merged slot scheme (RB-3867)
       * </pre>
       */
      public Builder clearOrigSlot() {
        bitField0_ = (bitField0_ & ~0x00400000);
        origSlot_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 filter = 32;
      private int filter_ ;
      /**
       * <code>optional uint32 filter = 32;</code>
       *
       * <pre>
       * Filter ID, if it's set then the click or show was filtered and shouldn't be counted in statistics
       * </pre>
       */
      public boolean hasFilter() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional uint32 filter = 32;</code>
       *
       * <pre>
       * Filter ID, if it's set then the click or show was filtered and shouldn't be counted in statistics
       * </pre>
       */
      public int getFilter() {
        return filter_;
      }
      /**
       * <code>optional uint32 filter = 32;</code>
       *
       * <pre>
       * Filter ID, if it's set then the click or show was filtered and shouldn't be counted in statistics
       * </pre>
       */
      public Builder setFilter(int value) {
        bitField0_ |= 0x00800000;
        filter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 filter = 32;</code>
       *
       * <pre>
       * Filter ID, if it's set then the click or show was filtered and shouldn't be counted in statistics
       * </pre>
       */
      public Builder clearFilter() {
        bitField0_ = (bitField0_ & ~0x00800000);
        filter_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 cln = 40;
      private int cln_ ;
      /**
       * <code>optional uint32 cln = 40;</code>
       *
       * <pre>
       * ID of click-through counter
       * </pre>
       */
      public boolean hasCln() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional uint32 cln = 40;</code>
       *
       * <pre>
       * ID of click-through counter
       * </pre>
       */
      public int getCln() {
        return cln_;
      }
      /**
       * <code>optional uint32 cln = 40;</code>
       *
       * <pre>
       * ID of click-through counter
       * </pre>
       */
      public Builder setCln(int value) {
        bitField0_ |= 0x01000000;
        cln_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 cln = 40;</code>
       *
       * <pre>
       * ID of click-through counter
       * </pre>
       */
      public Builder clearCln() {
        bitField0_ = (bitField0_ & ~0x01000000);
        cln_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 goal = 42;
      private int goal_ ;
      /**
       * <code>optional uint32 goal = 42;</code>
       *
       * <pre>
       * Goal ID
       * </pre>
       */
      public boolean hasGoal() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional uint32 goal = 42;</code>
       *
       * <pre>
       * Goal ID
       * </pre>
       */
      public int getGoal() {
        return goal_;
      }
      /**
       * <code>optional uint32 goal = 42;</code>
       *
       * <pre>
       * Goal ID
       * </pre>
       */
      public Builder setGoal(int value) {
        bitField0_ |= 0x02000000;
        goal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 goal = 42;</code>
       *
       * <pre>
       * Goal ID
       * </pre>
       */
      public Builder clearGoal() {
        bitField0_ = (bitField0_ & ~0x02000000);
        goal_ = 0;
        onChanged();
        return this;
      }

      // optional bytes user_ipv6 = 48;
      private com.google.protobuf.ByteString userIpv6_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes user_ipv6 = 48;</code>
       *
       * <pre>
       * IPv6 address of client
       * </pre>
       */
      public boolean hasUserIpv6() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional bytes user_ipv6 = 48;</code>
       *
       * <pre>
       * IPv6 address of client
       * </pre>
       */
      public com.google.protobuf.ByteString getUserIpv6() {
        return userIpv6_;
      }
      /**
       * <code>optional bytes user_ipv6 = 48;</code>
       *
       * <pre>
       * IPv6 address of client
       * </pre>
       */
      public Builder setUserIpv6(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x04000000;
        userIpv6_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes user_ipv6 = 48;</code>
       *
       * <pre>
       * IPv6 address of client
       * </pre>
       */
      public Builder clearUserIpv6() {
        bitField0_ = (bitField0_ & ~0x04000000);
        userIpv6_ = getDefaultInstance().getUserIpv6();
        onChanged();
        return this;
      }

      // optional fixed32 user_ip_from_proxy = 50;
      private int userIpFromProxy_ ;
      /**
       * <code>optional fixed32 user_ip_from_proxy = 50;</code>
       *
       * <pre>
       * acquired from X-Forwarded-For and the like
       * </pre>
       */
      public boolean hasUserIpFromProxy() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional fixed32 user_ip_from_proxy = 50;</code>
       *
       * <pre>
       * acquired from X-Forwarded-For and the like
       * </pre>
       */
      public int getUserIpFromProxy() {
        return userIpFromProxy_;
      }
      /**
       * <code>optional fixed32 user_ip_from_proxy = 50;</code>
       *
       * <pre>
       * acquired from X-Forwarded-For and the like
       * </pre>
       */
      public Builder setUserIpFromProxy(int value) {
        bitField0_ |= 0x08000000;
        userIpFromProxy_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 user_ip_from_proxy = 50;</code>
       *
       * <pre>
       * acquired from X-Forwarded-For and the like
       * </pre>
       */
      public Builder clearUserIpFromProxy() {
        bitField0_ = (bitField0_ & ~0x08000000);
        userIpFromProxy_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 banner_event = 51;
      private int bannerEvent_ ;
      /**
       * <code>optional uint32 banner_event = 51;</code>
       *
       * <pre>
       * banner event for movies
       * </pre>
       */
      public boolean hasBannerEvent() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional uint32 banner_event = 51;</code>
       *
       * <pre>
       * banner event for movies
       * </pre>
       */
      public int getBannerEvent() {
        return bannerEvent_;
      }
      /**
       * <code>optional uint32 banner_event = 51;</code>
       *
       * <pre>
       * banner event for movies
       * </pre>
       */
      public Builder setBannerEvent(int value) {
        bitField0_ |= 0x10000000;
        bannerEvent_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 banner_event = 51;</code>
       *
       * <pre>
       * banner event for movies
       * </pre>
       */
      public Builder clearBannerEvent() {
        bitField0_ = (bitField0_ & ~0x10000000);
        bannerEvent_ = 0;
        onChanged();
        return this;
      }

      // optional bytes device_id = 55;
      private com.google.protobuf.ByteString deviceId_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes device_id = 55;</code>
       *
       * <pre>
       *android device id
       * </pre>
       */
      public boolean hasDeviceId() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional bytes device_id = 55;</code>
       *
       * <pre>
       *android device id
       * </pre>
       */
      public com.google.protobuf.ByteString getDeviceId() {
        return deviceId_;
      }
      /**
       * <code>optional bytes device_id = 55;</code>
       *
       * <pre>
       *android device id
       * </pre>
       */
      public Builder setDeviceId(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x20000000;
        deviceId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes device_id = 55;</code>
       *
       * <pre>
       *android device id
       * </pre>
       */
      public Builder clearDeviceId() {
        bitField0_ = (bitField0_ & ~0x20000000);
        deviceId_ = getDefaultInstance().getDeviceId();
        onChanged();
        return this;
      }

      // optional bytes advertising_id = 128;
      private com.google.protobuf.ByteString advertisingId_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes advertising_id = 128;</code>
       */
      public boolean hasAdvertisingId() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional bytes advertising_id = 128;</code>
       */
      public com.google.protobuf.ByteString getAdvertisingId() {
        return advertisingId_;
      }
      /**
       * <code>optional bytes advertising_id = 128;</code>
       */
      public Builder setAdvertisingId(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x40000000;
        advertisingId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes advertising_id = 128;</code>
       */
      public Builder clearAdvertisingId() {
        bitField0_ = (bitField0_ & ~0x40000000);
        advertisingId_ = getDefaultInstance().getAdvertisingId();
        onChanged();
        return this;
      }

      // optional bytes android_id = 56;
      private com.google.protobuf.ByteString androidId_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes android_id = 56;</code>
       */
      public boolean hasAndroidId() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional bytes android_id = 56;</code>
       */
      public com.google.protobuf.ByteString getAndroidId() {
        return androidId_;
      }
      /**
       * <code>optional bytes android_id = 56;</code>
       */
      public Builder setAndroidId(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x80000000;
        androidId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes android_id = 56;</code>
       */
      public Builder clearAndroidId() {
        bitField0_ = (bitField0_ & ~0x80000000);
        androidId_ = getDefaultInstance().getAndroidId();
        onChanged();
        return this;
      }

      // optional bytes idfa = 57;
      private com.google.protobuf.ByteString idfa_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes idfa = 57;</code>
       */
      public boolean hasIdfa() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bytes idfa = 57;</code>
       */
      public com.google.protobuf.ByteString getIdfa() {
        return idfa_;
      }
      /**
       * <code>optional bytes idfa = 57;</code>
       */
      public Builder setIdfa(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000001;
        idfa_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes idfa = 57;</code>
       */
      public Builder clearIdfa() {
        bitField1_ = (bitField1_ & ~0x00000001);
        idfa_ = getDefaultInstance().getIdfa();
        onChanged();
        return this;
      }

      // optional bytes waid = 152;
      private com.google.protobuf.ByteString waid_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes waid = 152;</code>
       */
      public boolean hasWaid() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bytes waid = 152;</code>
       */
      public com.google.protobuf.ByteString getWaid() {
        return waid_;
      }
      /**
       * <code>optional bytes waid = 152;</code>
       */
      public Builder setWaid(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000002;
        waid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes waid = 152;</code>
       */
      public Builder clearWaid() {
        bitField1_ = (bitField1_ & ~0x00000002);
        waid_ = getDefaultInstance().getWaid();
        onChanged();
        return this;
      }

      // repeated uint32 matched_targets = 70 [packed = true];
      private java.util.List<java.lang.Integer> matchedTargets_ = java.util.Collections.emptyList();
      private void ensureMatchedTargetsIsMutable() {
        if (!((bitField1_ & 0x00000004) == 0x00000004)) {
          matchedTargets_ = new java.util.ArrayList<java.lang.Integer>(matchedTargets_);
          bitField1_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated uint32 matched_targets = 70 [packed = true];</code>
       *
       * <pre>
       * matched targeting ids
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getMatchedTargetsList() {
        return java.util.Collections.unmodifiableList(matchedTargets_);
      }
      /**
       * <code>repeated uint32 matched_targets = 70 [packed = true];</code>
       *
       * <pre>
       * matched targeting ids
       * </pre>
       */
      public int getMatchedTargetsCount() {
        return matchedTargets_.size();
      }
      /**
       * <code>repeated uint32 matched_targets = 70 [packed = true];</code>
       *
       * <pre>
       * matched targeting ids
       * </pre>
       */
      public int getMatchedTargets(int index) {
        return matchedTargets_.get(index);
      }
      /**
       * <code>repeated uint32 matched_targets = 70 [packed = true];</code>
       *
       * <pre>
       * matched targeting ids
       * </pre>
       */
      public Builder setMatchedTargets(
          int index, int value) {
        ensureMatchedTargetsIsMutable();
        matchedTargets_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 matched_targets = 70 [packed = true];</code>
       *
       * <pre>
       * matched targeting ids
       * </pre>
       */
      public Builder addMatchedTargets(int value) {
        ensureMatchedTargetsIsMutable();
        matchedTargets_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 matched_targets = 70 [packed = true];</code>
       *
       * <pre>
       * matched targeting ids
       * </pre>
       */
      public Builder addAllMatchedTargets(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureMatchedTargetsIsMutable();
        super.addAll(values, matchedTargets_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 matched_targets = 70 [packed = true];</code>
       *
       * <pre>
       * matched targeting ids
       * </pre>
       */
      public Builder clearMatchedTargets() {
        matchedTargets_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional .ru.mail.go.webbase.TargetMsg target = 100;
      private ru.mail.go.webbase.TargetProto.TargetMsg target_ = ru.mail.go.webbase.TargetProto.TargetMsg.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          ru.mail.go.webbase.TargetProto.TargetMsg, ru.mail.go.webbase.TargetProto.TargetMsg.Builder, ru.mail.go.webbase.TargetProto.TargetMsgOrBuilder> targetBuilder_;
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg target = 100;</code>
       *
       * <pre>
       *
       *переменные таргета, может быть вложенным протобуф-сообщением,
       *в контексте РБ будет скипаться как одно значение
       * </pre>
       */
      public boolean hasTarget() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg target = 100;</code>
       *
       * <pre>
       *
       *переменные таргета, может быть вложенным протобуф-сообщением,
       *в контексте РБ будет скипаться как одно значение
       * </pre>
       */
      public ru.mail.go.webbase.TargetProto.TargetMsg getTarget() {
        if (targetBuilder_ == null) {
          return target_;
        } else {
          return targetBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg target = 100;</code>
       *
       * <pre>
       *
       *переменные таргета, может быть вложенным протобуф-сообщением,
       *в контексте РБ будет скипаться как одно значение
       * </pre>
       */
      public Builder setTarget(ru.mail.go.webbase.TargetProto.TargetMsg value) {
        if (targetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          targetBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg target = 100;</code>
       *
       * <pre>
       *
       *переменные таргета, может быть вложенным протобуф-сообщением,
       *в контексте РБ будет скипаться как одно значение
       * </pre>
       */
      public Builder setTarget(
          ru.mail.go.webbase.TargetProto.TargetMsg.Builder builderForValue) {
        if (targetBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          targetBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg target = 100;</code>
       *
       * <pre>
       *
       *переменные таргета, может быть вложенным протобуф-сообщением,
       *в контексте РБ будет скипаться как одно значение
       * </pre>
       */
      public Builder mergeTarget(ru.mail.go.webbase.TargetProto.TargetMsg value) {
        if (targetBuilder_ == null) {
          if (((bitField1_ & 0x00000008) == 0x00000008) &&
              target_ != ru.mail.go.webbase.TargetProto.TargetMsg.getDefaultInstance()) {
            target_ =
              ru.mail.go.webbase.TargetProto.TargetMsg.newBuilder(target_).mergeFrom(value).buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          targetBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg target = 100;</code>
       *
       * <pre>
       *
       *переменные таргета, может быть вложенным протобуф-сообщением,
       *в контексте РБ будет скипаться как одно значение
       * </pre>
       */
      public Builder clearTarget() {
        if (targetBuilder_ == null) {
          target_ = ru.mail.go.webbase.TargetProto.TargetMsg.getDefaultInstance();
          onChanged();
        } else {
          targetBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg target = 100;</code>
       *
       * <pre>
       *
       *переменные таргета, может быть вложенным протобуф-сообщением,
       *в контексте РБ будет скипаться как одно значение
       * </pre>
       */
      public ru.mail.go.webbase.TargetProto.TargetMsg.Builder getTargetBuilder() {
        bitField1_ |= 0x00000008;
        onChanged();
        return getTargetFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg target = 100;</code>
       *
       * <pre>
       *
       *переменные таргета, может быть вложенным протобуф-сообщением,
       *в контексте РБ будет скипаться как одно значение
       * </pre>
       */
      public ru.mail.go.webbase.TargetProto.TargetMsgOrBuilder getTargetOrBuilder() {
        if (targetBuilder_ != null) {
          return targetBuilder_.getMessageOrBuilder();
        } else {
          return target_;
        }
      }
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg target = 100;</code>
       *
       * <pre>
       *
       *переменные таргета, может быть вложенным протобуф-сообщением,
       *в контексте РБ будет скипаться как одно значение
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          ru.mail.go.webbase.TargetProto.TargetMsg, ru.mail.go.webbase.TargetProto.TargetMsg.Builder, ru.mail.go.webbase.TargetProto.TargetMsgOrBuilder> 
          getTargetFieldBuilder() {
        if (targetBuilder_ == null) {
          targetBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              ru.mail.go.webbase.TargetProto.TargetMsg, ru.mail.go.webbase.TargetProto.TargetMsg.Builder, ru.mail.go.webbase.TargetProto.TargetMsgOrBuilder>(
                  target_,
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        return targetBuilder_;
      }

      // optional bytes target_win_notice = 106;
      private com.google.protobuf.ByteString targetWinNotice_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes target_win_notice = 106;</code>
       */
      public boolean hasTargetWinNotice() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bytes target_win_notice = 106;</code>
       */
      public com.google.protobuf.ByteString getTargetWinNotice() {
        return targetWinNotice_;
      }
      /**
       * <code>optional bytes target_win_notice = 106;</code>
       */
      public Builder setTargetWinNotice(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000010;
        targetWinNotice_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes target_win_notice = 106;</code>
       */
      public Builder clearTargetWinNotice() {
        bitField1_ = (bitField1_ & ~0x00000010);
        targetWinNotice_ = getDefaultInstance().getTargetWinNotice();
        onChanged();
        return this;
      }

      // optional bytes rutube = 102;
      private com.google.protobuf.ByteString rutube_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes rutube = 102;</code>
       */
      public boolean hasRutube() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bytes rutube = 102;</code>
       */
      public com.google.protobuf.ByteString getRutube() {
        return rutube_;
      }
      /**
       * <code>optional bytes rutube = 102;</code>
       */
      public Builder setRutube(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000020;
        rutube_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes rutube = 102;</code>
       */
      public Builder clearRutube() {
        bitField1_ = (bitField1_ & ~0x00000020);
        rutube_ = getDefaultInstance().getRutube();
        onChanged();
        return this;
      }

      // optional uint32 ssp_id = 103;
      private int sspId_ ;
      /**
       * <code>optional uint32 ssp_id = 103;</code>
       *
       * <pre>
       * вложенное сообщение с данными по рутубу, работаем так же как и с target 
       * </pre>
       */
      public boolean hasSspId() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 ssp_id = 103;</code>
       *
       * <pre>
       * вложенное сообщение с данными по рутубу, работаем так же как и с target 
       * </pre>
       */
      public int getSspId() {
        return sspId_;
      }
      /**
       * <code>optional uint32 ssp_id = 103;</code>
       *
       * <pre>
       * вложенное сообщение с данными по рутубу, работаем так же как и с target 
       * </pre>
       */
      public Builder setSspId(int value) {
        bitField1_ |= 0x00000040;
        sspId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ssp_id = 103;</code>
       *
       * <pre>
       * вложенное сообщение с данными по рутубу, работаем так же как и с target 
       * </pre>
       */
      public Builder clearSspId() {
        bitField1_ = (bitField1_ & ~0x00000040);
        sspId_ = 0;
        onChanged();
        return this;
      }

      // optional bytes request_id = 104;
      private com.google.protobuf.ByteString requestId_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes request_id = 104;</code>
       */
      public boolean hasRequestId() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bytes request_id = 104;</code>
       */
      public com.google.protobuf.ByteString getRequestId() {
        return requestId_;
      }
      /**
       * <code>optional bytes request_id = 104;</code>
       */
      public Builder setRequestId(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000080;
        requestId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes request_id = 104;</code>
       */
      public Builder clearRequestId() {
        bitField1_ = (bitField1_ & ~0x00000080);
        requestId_ = getDefaultInstance().getRequestId();
        onChanged();
        return this;
      }

      // optional bytes sitename = 105;
      private com.google.protobuf.ByteString sitename_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes sitename = 105;</code>
       */
      public boolean hasSitename() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bytes sitename = 105;</code>
       */
      public com.google.protobuf.ByteString getSitename() {
        return sitename_;
      }
      /**
       * <code>optional bytes sitename = 105;</code>
       */
      public Builder setSitename(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000100;
        sitename_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes sitename = 105;</code>
       */
      public Builder clearSitename() {
        bitField1_ = (bitField1_ & ~0x00000100);
        sitename_ = getDefaultInstance().getSitename();
        onChanged();
        return this;
      }

      // optional uint64 ok_id = 107;
      private long okId_ ;
      /**
       * <code>optional uint64 ok_id = 107;</code>
       */
      public boolean hasOkId() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint64 ok_id = 107;</code>
       */
      public long getOkId() {
        return okId_;
      }
      /**
       * <code>optional uint64 ok_id = 107;</code>
       */
      public Builder setOkId(long value) {
        bitField1_ |= 0x00000200;
        okId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 ok_id = 107;</code>
       */
      public Builder clearOkId() {
        bitField1_ = (bitField1_ & ~0x00000200);
        okId_ = 0L;
        onChanged();
        return this;
      }

      // optional uint32 random = 111;
      private int random_ ;
      /**
       * <code>optional uint32 random = 111;</code>
       */
      public boolean hasRandom() {
        return ((bitField1_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint32 random = 111;</code>
       */
      public int getRandom() {
        return random_;
      }
      /**
       * <code>optional uint32 random = 111;</code>
       */
      public Builder setRandom(int value) {
        bitField1_ |= 0x00000400;
        random_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 random = 111;</code>
       */
      public Builder clearRandom() {
        bitField1_ = (bitField1_ & ~0x00000400);
        random_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 mid = 112;
      private int mid_ ;
      /**
       * <code>optional uint32 mid = 112;</code>
       */
      public boolean hasMid() {
        return ((bitField1_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint32 mid = 112;</code>
       */
      public int getMid() {
        return mid_;
      }
      /**
       * <code>optional uint32 mid = 112;</code>
       */
      public Builder setMid(int value) {
        bitField1_ |= 0x00000800;
        mid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 mid = 112;</code>
       */
      public Builder clearMid() {
        bitField1_ = (bitField1_ & ~0x00000800);
        mid_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 action_timestamp = 114;
      private int actionTimestamp_ ;
      /**
       * <code>optional uint32 action_timestamp = 114;</code>
       *
       * <pre>
       * таймстамп с фронта (который подставляли в ClickId). Только для ссылок с ClickId
       * </pre>
       */
      public boolean hasActionTimestamp() {
        return ((bitField1_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional uint32 action_timestamp = 114;</code>
       *
       * <pre>
       * таймстамп с фронта (который подставляли в ClickId). Только для ссылок с ClickId
       * </pre>
       */
      public int getActionTimestamp() {
        return actionTimestamp_;
      }
      /**
       * <code>optional uint32 action_timestamp = 114;</code>
       *
       * <pre>
       * таймстамп с фронта (который подставляли в ClickId). Только для ссылок с ClickId
       * </pre>
       */
      public Builder setActionTimestamp(int value) {
        bitField1_ |= 0x00001000;
        actionTimestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 action_timestamp = 114;</code>
       *
       * <pre>
       * таймстамп с фронта (который подставляли в ClickId). Только для ссылок с ClickId
       * </pre>
       */
      public Builder clearActionTimestamp() {
        bitField1_ = (bitField1_ & ~0x00001000);
        actionTimestamp_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 postback_vendor = 119;
      private int postbackVendor_ ;
      /**
       * <code>optional uint32 postback_vendor = 119;</code>
       *
       * <pre>
       *
       *1 - appsflyer
       *2 - MAT
       *3 - Ad-X
       *4 - tapstream
       *5 - adjust
       *6 - gameloft (RB-8027)
       *7 - kochava (RB-8443)
       *8 - Yandex.AppMetrika (RB-8440)
       *9 - Apsalar (RB-8936)
       * </pre>
       */
      public boolean hasPostbackVendor() {
        return ((bitField1_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional uint32 postback_vendor = 119;</code>
       *
       * <pre>
       *
       *1 - appsflyer
       *2 - MAT
       *3 - Ad-X
       *4 - tapstream
       *5 - adjust
       *6 - gameloft (RB-8027)
       *7 - kochava (RB-8443)
       *8 - Yandex.AppMetrika (RB-8440)
       *9 - Apsalar (RB-8936)
       * </pre>
       */
      public int getPostbackVendor() {
        return postbackVendor_;
      }
      /**
       * <code>optional uint32 postback_vendor = 119;</code>
       *
       * <pre>
       *
       *1 - appsflyer
       *2 - MAT
       *3 - Ad-X
       *4 - tapstream
       *5 - adjust
       *6 - gameloft (RB-8027)
       *7 - kochava (RB-8443)
       *8 - Yandex.AppMetrika (RB-8440)
       *9 - Apsalar (RB-8936)
       * </pre>
       */
      public Builder setPostbackVendor(int value) {
        bitField1_ |= 0x00002000;
        postbackVendor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 postback_vendor = 119;</code>
       *
       * <pre>
       *
       *1 - appsflyer
       *2 - MAT
       *3 - Ad-X
       *4 - tapstream
       *5 - adjust
       *6 - gameloft (RB-8027)
       *7 - kochava (RB-8443)
       *8 - Yandex.AppMetrika (RB-8440)
       *9 - Apsalar (RB-8936)
       * </pre>
       */
      public Builder clearPostbackVendor() {
        bitField1_ = (bitField1_ & ~0x00002000);
        postbackVendor_ = 0;
        onChanged();
        return this;
      }

      // optional uint64 vk_id = 130;
      private long vkId_ ;
      /**
       * <code>optional uint64 vk_id = 130;</code>
       */
      public boolean hasVkId() {
        return ((bitField1_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional uint64 vk_id = 130;</code>
       */
      public long getVkId() {
        return vkId_;
      }
      /**
       * <code>optional uint64 vk_id = 130;</code>
       */
      public Builder setVkId(long value) {
        bitField1_ |= 0x00004000;
        vkId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 vk_id = 130;</code>
       */
      public Builder clearVkId() {
        bitField1_ = (bitField1_ & ~0x00004000);
        vkId_ = 0L;
        onChanged();
        return this;
      }

      // optional bytes sha1_idfa = 131;
      private com.google.protobuf.ByteString sha1Idfa_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes sha1_idfa = 131;</code>
       */
      public boolean hasSha1Idfa() {
        return ((bitField1_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional bytes sha1_idfa = 131;</code>
       */
      public com.google.protobuf.ByteString getSha1Idfa() {
        return sha1Idfa_;
      }
      /**
       * <code>optional bytes sha1_idfa = 131;</code>
       */
      public Builder setSha1Idfa(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00008000;
        sha1Idfa_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes sha1_idfa = 131;</code>
       */
      public Builder clearSha1Idfa() {
        bitField1_ = (bitField1_ & ~0x00008000);
        sha1Idfa_ = getDefaultInstance().getSha1Idfa();
        onChanged();
        return this;
      }

      // optional bytes sha1_advertising_id = 132;
      private com.google.protobuf.ByteString sha1AdvertisingId_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes sha1_advertising_id = 132;</code>
       */
      public boolean hasSha1AdvertisingId() {
        return ((bitField1_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional bytes sha1_advertising_id = 132;</code>
       */
      public com.google.protobuf.ByteString getSha1AdvertisingId() {
        return sha1AdvertisingId_;
      }
      /**
       * <code>optional bytes sha1_advertising_id = 132;</code>
       */
      public Builder setSha1AdvertisingId(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00010000;
        sha1AdvertisingId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes sha1_advertising_id = 132;</code>
       */
      public Builder clearSha1AdvertisingId() {
        bitField1_ = (bitField1_ & ~0x00010000);
        sha1AdvertisingId_ = getDefaultInstance().getSha1AdvertisingId();
        onChanged();
        return this;
      }

      // optional bytes sha1_dpid = 133;
      private com.google.protobuf.ByteString sha1Dpid_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes sha1_dpid = 133;</code>
       */
      public boolean hasSha1Dpid() {
        return ((bitField1_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional bytes sha1_dpid = 133;</code>
       */
      public com.google.protobuf.ByteString getSha1Dpid() {
        return sha1Dpid_;
      }
      /**
       * <code>optional bytes sha1_dpid = 133;</code>
       */
      public Builder setSha1Dpid(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00020000;
        sha1Dpid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes sha1_dpid = 133;</code>
       */
      public Builder clearSha1Dpid() {
        bitField1_ = (bitField1_ & ~0x00020000);
        sha1Dpid_ = getDefaultInstance().getSha1Dpid();
        onChanged();
        return this;
      }

      // optional uint64 uid = 167;
      private long uid_ ;
      /**
       * <code>optional uint64 uid = 167;</code>
       */
      public boolean hasUid() {
        return ((bitField1_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional uint64 uid = 167;</code>
       */
      public long getUid() {
        return uid_;
      }
      /**
       * <code>optional uint64 uid = 167;</code>
       */
      public Builder setUid(long value) {
        bitField1_ |= 0x00040000;
        uid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 uid = 167;</code>
       */
      public Builder clearUid() {
        bitField1_ = (bitField1_ & ~0x00040000);
        uid_ = 0L;
        onChanged();
        return this;
      }

      // repeated uint64 ok_viral_chain = 171;
      private java.util.List<java.lang.Long> okViralChain_ = java.util.Collections.emptyList();
      private void ensureOkViralChainIsMutable() {
        if (!((bitField1_ & 0x00080000) == 0x00080000)) {
          okViralChain_ = new java.util.ArrayList<java.lang.Long>(okViralChain_);
          bitField1_ |= 0x00080000;
         }
      }
      /**
       * <code>repeated uint64 ok_viral_chain = 171;</code>
       *
       * <pre>
       * id пользователей вирального распространения топика (RB-10380)
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getOkViralChainList() {
        return java.util.Collections.unmodifiableList(okViralChain_);
      }
      /**
       * <code>repeated uint64 ok_viral_chain = 171;</code>
       *
       * <pre>
       * id пользователей вирального распространения топика (RB-10380)
       * </pre>
       */
      public int getOkViralChainCount() {
        return okViralChain_.size();
      }
      /**
       * <code>repeated uint64 ok_viral_chain = 171;</code>
       *
       * <pre>
       * id пользователей вирального распространения топика (RB-10380)
       * </pre>
       */
      public long getOkViralChain(int index) {
        return okViralChain_.get(index);
      }
      /**
       * <code>repeated uint64 ok_viral_chain = 171;</code>
       *
       * <pre>
       * id пользователей вирального распространения топика (RB-10380)
       * </pre>
       */
      public Builder setOkViralChain(
          int index, long value) {
        ensureOkViralChainIsMutable();
        okViralChain_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 ok_viral_chain = 171;</code>
       *
       * <pre>
       * id пользователей вирального распространения топика (RB-10380)
       * </pre>
       */
      public Builder addOkViralChain(long value) {
        ensureOkViralChainIsMutable();
        okViralChain_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 ok_viral_chain = 171;</code>
       *
       * <pre>
       * id пользователей вирального распространения топика (RB-10380)
       * </pre>
       */
      public Builder addAllOkViralChain(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureOkViralChainIsMutable();
        super.addAll(values, okViralChain_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 ok_viral_chain = 171;</code>
       *
       * <pre>
       * id пользователей вирального распространения топика (RB-10380)
       * </pre>
       */
      public Builder clearOkViralChain() {
        okViralChain_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00080000);
        onChanged();
        return this;
      }

      // optional uint32 winner_cpm = 185;
      private int winnerCpm_ ;
      /**
       * <code>optional uint32 winner_cpm = 185;</code>
       *
       * <pre>
       * цена, выигравшая RTB аукцион (заполняется для loose-notice)
       * </pre>
       */
      public boolean hasWinnerCpm() {
        return ((bitField1_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional uint32 winner_cpm = 185;</code>
       *
       * <pre>
       * цена, выигравшая RTB аукцион (заполняется для loose-notice)
       * </pre>
       */
      public int getWinnerCpm() {
        return winnerCpm_;
      }
      /**
       * <code>optional uint32 winner_cpm = 185;</code>
       *
       * <pre>
       * цена, выигравшая RTB аукцион (заполняется для loose-notice)
       * </pre>
       */
      public Builder setWinnerCpm(int value) {
        bitField1_ |= 0x00100000;
        winnerCpm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 winner_cpm = 185;</code>
       *
       * <pre>
       * цена, выигравшая RTB аукцион (заполняется для loose-notice)
       * </pre>
       */
      public Builder clearWinnerCpm() {
        bitField1_ = (bitField1_ & ~0x00100000);
        winnerCpm_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ru.mail.go.webbase.TargetStatMsg)
    }

    static {
      defaultInstance = new TargetStatMsg(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.TargetStatMsg)
  }

  public interface TargetMsgOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 repeat = 17;
    /**
     * <code>optional uint32 repeat = 17;</code>
     *
     * <pre>
     * вместо одного события имеем repeat+1 одинаковых событий (для непоказов)
     * </pre>
     */
    boolean hasRepeat();
    /**
     * <code>optional uint32 repeat = 17;</code>
     *
     * <pre>
     * вместо одного события имеем repeat+1 одинаковых событий (для непоказов)
     * </pre>
     */
    int getRepeat();

    // optional uint32 pad_id = 1;
    /**
     * <code>optional uint32 pad_id = 1;</code>
     *
     * <pre>
     * площадка
     * </pre>
     */
    boolean hasPadId();
    /**
     * <code>optional uint32 pad_id = 1;</code>
     *
     * <pre>
     * площадка
     * </pre>
     */
    int getPadId();

    // optional uint32 advertiser_id = 4;
    /**
     * <code>optional uint32 advertiser_id = 4;</code>
     *
     * <pre>
     * юзер-рекламодатель
     * </pre>
     */
    boolean hasAdvertiserId();
    /**
     * <code>optional uint32 advertiser_id = 4;</code>
     *
     * <pre>
     * юзер-рекламодатель
     * </pre>
     */
    int getAdvertiserId();

    // optional uint32 package_id = 5;
    /**
     * <code>optional uint32 package_id = 5;</code>
     *
     * <pre>
     * пакет
     * </pre>
     */
    boolean hasPackageId();
    /**
     * <code>optional uint32 package_id = 5;</code>
     *
     * <pre>
     * пакет
     * </pre>
     */
    int getPackageId();

    // optional uint32 misc_id = 6;
    /**
     * <code>optional uint32 misc_id = 6;</code>
     *
     * <pre>
     * misc_id (идентификатор "способа подбора" - kiwid там или что-то еще)
     * </pre>
     */
    boolean hasMiscId();
    /**
     * <code>optional uint32 misc_id = 6;</code>
     *
     * <pre>
     * misc_id (идентификатор "способа подбора" - kiwid там или что-то еще)
     * </pre>
     */
    int getMiscId();

    // optional uint32 campaign_id = 8;
    /**
     * <code>optional uint32 campaign_id = 8;</code>
     *
     * <pre>
     * кампания
     * </pre>
     */
    boolean hasCampaignId();
    /**
     * <code>optional uint32 campaign_id = 8;</code>
     *
     * <pre>
     * кампания
     * </pre>
     */
    int getCampaignId();

    // optional uint32 server_id = 9;
    /**
     * <code>optional uint32 server_id = 9;</code>
     *
     * <pre>
     * id баннерного демона
     * </pre>
     */
    boolean hasServerId();
    /**
     * <code>optional uint32 server_id = 9;</code>
     *
     * <pre>
     * id баннерного демона
     * </pre>
     */
    int getServerId();

    // optional uint32 order_number = 12;
    /**
     * <code>optional uint32 order_number = 12;</code>
     *
     * <pre>
     * порядковый номер в выдаче
     * </pre>
     */
    boolean hasOrderNumber();
    /**
     * <code>optional uint32 order_number = 12;</code>
     *
     * <pre>
     * порядковый номер в выдаче
     * </pre>
     */
    int getOrderNumber();

    // optional fixed32 campaign_version = 16;
    /**
     * <code>optional fixed32 campaign_version = 16;</code>
     *
     * <pre>
     * версия кампании в момент выполнения запроса
     * </pre>
     */
    boolean hasCampaignVersion();
    /**
     * <code>optional fixed32 campaign_version = 16;</code>
     *
     * <pre>
     * версия кампании в момент выполнения запроса
     * </pre>
     */
    int getCampaignVersion();

    // optional uint32 ctr_origin = 11;
    /**
     * <code>optional uint32 ctr_origin = 11;</code>
     *
     * <pre>
     * происхождение ctr
     * </pre>
     */
    boolean hasCtrOrigin();
    /**
     * <code>optional uint32 ctr_origin = 11;</code>
     *
     * <pre>
     * происхождение ctr
     * </pre>
     */
    int getCtrOrigin();

    // optional float model_ctr = 14;
    /**
     * <code>optional float model_ctr = 14;</code>
     *
     * <pre>
     * предсказанный моделью ctr.
     * </pre>
     */
    boolean hasModelCtr();
    /**
     * <code>optional float model_ctr = 14;</code>
     *
     * <pre>
     * предсказанный моделью ctr.
     * </pre>
     */
    float getModelCtr();

    // optional float expected_ctr = 15;
    /**
     * <code>optional float expected_ctr = 15;</code>
     *
     * <pre>
     * ожидаемый ctr (тот, что участвует в аукционе). Не равен model_ctr из-за различных коррекций
     * </pre>
     */
    boolean hasExpectedCtr();
    /**
     * <code>optional float expected_ctr = 15;</code>
     *
     * <pre>
     * ожидаемый ctr (тот, что участвует в аукционе). Не равен model_ctr из-за различных коррекций
     * </pre>
     */
    float getExpectedCtr();

    // optional float expected_clicks_cr = 85;
    /**
     * <code>optional float expected_clicks_cr = 85;</code>
     *
     * <pre>
     * ожидаемая доля конверсий для клика
     * </pre>
     */
    boolean hasExpectedClicksCr();
    /**
     * <code>optional float expected_clicks_cr = 85;</code>
     *
     * <pre>
     * ожидаемая доля конверсий для клика
     * </pre>
     */
    float getExpectedClicksCr();

    // optional uint32 expected_cpm = 7;
    /**
     * <code>optional uint32 expected_cpm = 7;</code>
     *
     * <pre>
     * ожидаемый cpm этого показа (cost * ctr * 1000) в рублях
     * </pre>
     */
    boolean hasExpectedCpm();
    /**
     * <code>optional uint32 expected_cpm = 7;</code>
     *
     * <pre>
     * ожидаемый cpm этого показа (cost * ctr * 1000) в рублях
     * </pre>
     */
    int getExpectedCpm();

    // optional uint32 cost = 3;
    /**
     * <code>optional uint32 cost = 3;</code>
     *
     * <pre>
     * цена за данное событие в копейках (в случае показа - цена за 1000 штук)
     * </pre>
     */
    boolean hasCost();
    /**
     * <code>optional uint32 cost = 3;</code>
     *
     * <pre>
     * цена за данное событие в копейках (в случае показа - цена за 1000 штук)
     * </pre>
     */
    int getCost();

    // optional uint32 currency_cost = 19;
    /**
     * <code>optional uint32 currency_cost = 19;</code>
     *
     * <pre>
     * цена за данное событие в 1/100 валюты (в случае показа - цена за 1000 штук)
     * </pre>
     */
    boolean hasCurrencyCost();
    /**
     * <code>optional uint32 currency_cost = 19;</code>
     *
     * <pre>
     * цена за данное событие в 1/100 валюты (в случае показа - цена за 1000 штук)
     * </pre>
     */
    int getCurrencyCost();

    // optional uint32 currency_id = 26;
    /**
     * <code>optional uint32 currency_id = 26;</code>
     *
     * <pre>
     * идентификатор валюты пользователя
     * </pre>
     */
    boolean hasCurrencyId();
    /**
     * <code>optional uint32 currency_id = 26;</code>
     *
     * <pre>
     * идентификатор валюты пользователя
     * </pre>
     */
    int getCurrencyId();

    // optional float currency_rate = 97 [default = 1];
    /**
     * <code>optional float currency_rate = 97 [default = 1];</code>
     *
     * <pre>
     * курс валюты на момент подбора
     * </pre>
     */
    boolean hasCurrencyRate();
    /**
     * <code>optional float currency_rate = 97 [default = 1];</code>
     *
     * <pre>
     * курс валюты на момент подбора
     * </pre>
     */
    float getCurrencyRate();

    // optional uint32 paid_ev_type = 96;
    /**
     * <code>optional uint32 paid_ev_type = 96;</code>
     *
     * <pre>
     * тип события, за которое снимают деньги в данном баннере
     * </pre>
     */
    boolean hasPaidEvType();
    /**
     * <code>optional uint32 paid_ev_type = 96;</code>
     *
     * <pre>
     * тип события, за которое снимают деньги в данном баннере
     * </pre>
     */
    int getPaidEvType();

    // optional uint32 paid_banner_event = 113;
    /**
     * <code>optional uint32 paid_banner_event = 113;</code>
     *
     * <pre>
     * тип кастомного события в случае paid_ev_type = 10
     * </pre>
     */
    boolean hasPaidBannerEvent();
    /**
     * <code>optional uint32 paid_banner_event = 113;</code>
     *
     * <pre>
     * тип кастомного события в случае paid_ev_type = 10
     * </pre>
     */
    int getPaidBannerEvent();

    // optional uint32 currency_cost_ppe = 99;
    /**
     * <code>optional uint32 currency_cost_ppe = 99;</code>
     *
     * <pre>
     * стоимость события типа paid_ev_type в 1/100 валюты
     * </pre>
     */
    boolean hasCurrencyCostPpe();
    /**
     * <code>optional uint32 currency_cost_ppe = 99;</code>
     *
     * <pre>
     * стоимость события типа paid_ev_type в 1/100 валюты
     * </pre>
     */
    int getCurrencyCostPpe();

    // optional uint32 currency_cost_per_goal_for_ocpm = 100 [deprecated = true];
    /**
     * <code>optional uint32 currency_cost_per_goal_for_ocpm = 100 [deprecated = true];</code>
     *
     * <pre>
     * стоимость конверсии для ocpm баннера
     * </pre>
     */
    @java.lang.Deprecated boolean hasCurrencyCostPerGoalForOcpm();
    /**
     * <code>optional uint32 currency_cost_per_goal_for_ocpm = 100 [deprecated = true];</code>
     *
     * <pre>
     * стоимость конверсии для ocpm баннера
     * </pre>
     */
    @java.lang.Deprecated int getCurrencyCostPerGoalForOcpm();

    // optional uint32 currency_base_ppe = 101;
    /**
     * <code>optional uint32 currency_base_ppe = 101;</code>
     *
     * <pre>
     * цена за событие из базы типа paid_ev_type в 1/100 валюты
     * </pre>
     */
    boolean hasCurrencyBasePpe();
    /**
     * <code>optional uint32 currency_base_ppe = 101;</code>
     *
     * <pre>
     * цена за событие из базы типа paid_ev_type в 1/100 валюты
     * </pre>
     */
    int getCurrencyBasePpe();

    // optional int32 priced_ev_type = 115 [default = -1];
    /**
     * <code>optional int32 priced_ev_type = 115 [default = -1];</code>
     */
    boolean hasPricedEvType();
    /**
     * <code>optional int32 priced_ev_type = 115 [default = -1];</code>
     */
    int getPricedEvType();

    // optional uint32 priced_banner_event = 116;
    /**
     * <code>optional uint32 priced_banner_event = 116;</code>
     *
     * <pre>
     * тип события, за которое выставляется цена в данном баннере
     * выставляется только если не равен paid_ev_type
     * сейчас это только в случае oCPM
     * !! Внимание !! Невыставленное это поле не означает 0!
     * Чтобы не путались, по-дефолту задается значение -1
     * Следующие три поля выставляются только при выставленном priced_ev_type
     * </pre>
     */
    boolean hasPricedBannerEvent();
    /**
     * <code>optional uint32 priced_banner_event = 116;</code>
     *
     * <pre>
     * тип события, за которое выставляется цена в данном баннере
     * выставляется только если не равен paid_ev_type
     * сейчас это только в случае oCPM
     * !! Внимание !! Невыставленное это поле не означает 0!
     * Чтобы не путались, по-дефолту задается значение -1
     * Следующие три поля выставляются только при выставленном priced_ev_type
     * </pre>
     */
    int getPricedBannerEvent();

    // optional uint32 currency_cost_ppre = 117;
    /**
     * <code>optional uint32 currency_cost_ppre = 117;</code>
     *
     * <pre>
     * стоимость события типа priced_ev_type в 1/100 валюты
     * </pre>
     */
    boolean hasCurrencyCostPpre();
    /**
     * <code>optional uint32 currency_cost_ppre = 117;</code>
     *
     * <pre>
     * стоимость события типа priced_ev_type в 1/100 валюты
     * </pre>
     */
    int getCurrencyCostPpre();

    // optional uint32 currency_base_ppre = 118;
    /**
     * <code>optional uint32 currency_base_ppre = 118;</code>
     *
     * <pre>
     * цена за событие из базы типа priced_ev_type в 1/100 валюты
     * </pre>
     */
    boolean hasCurrencyBasePpre();
    /**
     * <code>optional uint32 currency_base_ppre = 118;</code>
     *
     * <pre>
     * цена за событие из базы типа priced_ev_type в 1/100 валюты
     * </pre>
     */
    int getCurrencyBasePpre();

    // optional uint32 src_currency_cost = 109;
    /**
     * <code>optional uint32 src_currency_cost = 109;</code>
     *
     * <pre>
     * исходная цена вирального события или клика для события 1080
     * </pre>
     */
    boolean hasSrcCurrencyCost();
    /**
     * <code>optional uint32 src_currency_cost = 109;</code>
     *
     * <pre>
     * исходная цена вирального события или клика для события 1080
     * </pre>
     */
    int getSrcCurrencyCost();

    // optional uint32 src_event_type = 114;
    /**
     * <code>optional uint32 src_event_type = 114;</code>
     *
     * <pre>
     * исходный ev_type (или banner_event для ev_type=10) для событий 1070 и 1080
     * </pre>
     */
    boolean hasSrcEventType();
    /**
     * <code>optional uint32 src_event_type = 114;</code>
     *
     * <pre>
     * исходный ev_type (или banner_event для ev_type=10) для событий 1070 и 1080
     * </pre>
     */
    int getSrcEventType();

    // repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;
    /**
     * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
     *
     * <pre>
     * списания за услуги Third-Party services
     * </pre>
     */
    java.util.List<ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost> 
        getTpsCostsList();
    /**
     * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
     *
     * <pre>
     * списания за услуги Third-Party services
     * </pre>
     */
    ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost getTpsCosts(int index);
    /**
     * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
     *
     * <pre>
     * списания за услуги Third-Party services
     * </pre>
     */
    int getTpsCostsCount();
    /**
     * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
     *
     * <pre>
     * списания за услуги Third-Party services
     * </pre>
     */
    java.util.List<? extends ru.mail.go.webbase.TargetProto.TargetMsg.TPS_costOrBuilder> 
        getTpsCostsOrBuilderList();
    /**
     * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
     *
     * <pre>
     * списания за услуги Third-Party services
     * </pre>
     */
    ru.mail.go.webbase.TargetProto.TargetMsg.TPS_costOrBuilder getTpsCostsOrBuilder(
        int index);

    // optional uint32 geo = 20;
    /**
     * <code>optional uint32 geo = 20;</code>
     *
     * <pre>
     * geo полученной заменой региона на регион из пользователького профиля
     * </pre>
     */
    boolean hasGeo();
    /**
     * <code>optional uint32 geo = 20;</code>
     *
     * <pre>
     * geo полученной заменой региона на регион из пользователького профиля
     * </pre>
     */
    int getGeo();

    // optional uint32 req_geo = 81;
    /**
     * <code>optional uint32 req_geo = 81;</code>
     *
     * <pre>
     * geo пришедшее в запросе без каких-либо подмен
     * </pre>
     */
    boolean hasReqGeo();
    /**
     * <code>optional uint32 req_geo = 81;</code>
     *
     * <pre>
     * geo пришедшее в запросе без каких-либо подмен
     * </pre>
     */
    int getReqGeo();

    // optional fixed64 impression_id = 21;
    /**
     * <code>optional fixed64 impression_id = 21;</code>
     *
     * <pre>
     * идентификатор запроса
     * </pre>
     */
    boolean hasImpressionId();
    /**
     * <code>optional fixed64 impression_id = 21;</code>
     *
     * <pre>
     * идентификатор запроса
     * </pre>
     */
    long getImpressionId();

    // optional fixed64 original_impression_id = 77;
    /**
     * <code>optional fixed64 original_impression_id = 77;</code>
     *
     * <pre>
     * идентификатор оригинального запроса
     * </pre>
     */
    boolean hasOriginalImpressionId();
    /**
     * <code>optional fixed64 original_impression_id = 77;</code>
     *
     * <pre>
     * идентификатор оригинального запроса
     * </pre>
     */
    long getOriginalImpressionId();

    // optional fixed32 original_req_ts = 78;
    /**
     * <code>optional fixed32 original_req_ts = 78;</code>
     *
     * <pre>
     * время оригинального запроса
     * </pre>
     */
    boolean hasOriginalReqTs();
    /**
     * <code>optional fixed32 original_req_ts = 78;</code>
     *
     * <pre>
     * время оригинального запроса
     * </pre>
     */
    int getOriginalReqTs();

    // optional uint32 subrequest_id = 22;
    /**
     * <code>optional uint32 subrequest_id = 22;</code>
     *
     * <pre>
     * идентификатор подзапроса (для множественных запросов)
     * </pre>
     */
    boolean hasSubrequestId();
    /**
     * <code>optional uint32 subrequest_id = 22;</code>
     *
     * <pre>
     * идентификатор подзапроса (для множественных запросов)
     * </pre>
     */
    int getSubrequestId();

    // optional fixed32 req_ts = 2;
    /**
     * <code>optional fixed32 req_ts = 2;</code>
     *
     * <pre>
     * время запроса на показ рекламы
     * </pre>
     */
    boolean hasReqTs();
    /**
     * <code>optional fixed32 req_ts = 2;</code>
     *
     * <pre>
     * время запроса на показ рекламы
     * </pre>
     */
    int getReqTs();

    // optional fixed32 req_user_ip = 18;
    /**
     * <code>optional fixed32 req_user_ip = 18;</code>
     *
     * <pre>
     * ip юзера в момент запроса рекламы
     * </pre>
     */
    boolean hasReqUserIp();
    /**
     * <code>optional fixed32 req_user_ip = 18;</code>
     *
     * <pre>
     * ip юзера в момент запроса рекламы
     * </pre>
     */
    int getReqUserIp();

    // optional bytes req_user_ipv6 = 23;
    /**
     * <code>optional bytes req_user_ipv6 = 23;</code>
     *
     * <pre>
     * ipv6 юзера в момент запроса рекламы
     * </pre>
     */
    boolean hasReqUserIpv6();
    /**
     * <code>optional bytes req_user_ipv6 = 23;</code>
     *
     * <pre>
     * ipv6 юзера в момент запроса рекламы
     * </pre>
     */
    com.google.protobuf.ByteString getReqUserIpv6();

    // optional uint32 image_id = 24;
    /**
     * <code>optional uint32 image_id = 24;</code>
     *
     * <pre>
     * идентификатор картинки
     * </pre>
     */
    boolean hasImageId();
    /**
     * <code>optional uint32 image_id = 24;</code>
     *
     * <pre>
     * идентификатор картинки
     * </pre>
     */
    int getImageId();

    // optional uint32 audience_id = 25;
    /**
     * <code>optional uint32 audience_id = 25;</code>
     *
     * <pre>
     * флаг наличия аудитории в таргетинге: бит 0 - есть позитивная, бит 1 - есть негативная
     * </pre>
     */
    boolean hasAudienceId();
    /**
     * <code>optional uint32 audience_id = 25;</code>
     *
     * <pre>
     * флаг наличия аудитории в таргетинге: бит 0 - есть позитивная, бит 1 - есть негативная
     * </pre>
     */
    int getAudienceId();

    // optional uint32 bannerd_test_id = 30;
    /**
     * <code>optional uint32 bannerd_test_id = 30;</code>
     *
     * <pre>
     * test_id из конфига баннерного демона
     * </pre>
     */
    boolean hasBannerdTestId();
    /**
     * <code>optional uint32 bannerd_test_id = 30;</code>
     *
     * <pre>
     * test_id из конфига баннерного демона
     * </pre>
     */
    int getBannerdTestId();

    // optional int32 limited_bannerd_test_id = 31 [default = -1];
    /**
     * <code>optional int32 limited_bannerd_test_id = 31 [default = -1];</code>
     *
     * <pre>
     * test_id из конфига баннерного демона, если для него выделена доля лимитов
     * </pre>
     */
    boolean hasLimitedBannerdTestId();
    /**
     * <code>optional int32 limited_bannerd_test_id = 31 [default = -1];</code>
     *
     * <pre>
     * test_id из конфига баннерного демона, если для него выделена доля лимитов
     * </pre>
     */
    int getLimitedBannerdTestId();

    // optional float alive_money_ratio = 35;
    /**
     * <code>optional float alive_money_ratio = 35;</code>
     *
     * <pre>
     * доля живых денег пользователя на момент показа
     * </pre>
     */
    boolean hasAliveMoneyRatio();
    /**
     * <code>optional float alive_money_ratio = 35;</code>
     *
     * <pre>
     * доля живых денег пользователя на момент показа
     * </pre>
     */
    float getAliveMoneyRatio();

    // optional uint32 filter = 40;
    /**
     * <code>optional uint32 filter = 40;</code>
     *
     * <pre>
     * статус таргетовского антифрода
     * </pre>
     */
    boolean hasFilter();
    /**
     * <code>optional uint32 filter = 40;</code>
     *
     * <pre>
     * статус таргетовского антифрода
     * </pre>
     */
    int getFilter();

    // optional uint32 fake_filter = 41;
    /**
     * <code>optional uint32 fake_filter = 41;</code>
     *
     * <pre>
     * статус антифрода, когда правило сработало, но оно заблокированно для данной площадки
     * </pre>
     */
    boolean hasFakeFilter();
    /**
     * <code>optional uint32 fake_filter = 41;</code>
     *
     * <pre>
     * статус антифрода, когда правило сработало, но оно заблокированно для данной площадки
     * </pre>
     */
    int getFakeFilter();

    // optional fixed32 banner_text_hash = 57;
    /**
     * <code>optional fixed32 banner_text_hash = 57;</code>
     *
     * <pre>
     * хэш текста     баннера по алгоритму super_fast_hash
     * </pre>
     */
    boolean hasBannerTextHash();
    /**
     * <code>optional fixed32 banner_text_hash = 57;</code>
     *
     * <pre>
     * хэш текста     баннера по алгоритму super_fast_hash
     * </pre>
     */
    int getBannerTextHash();

    // optional fixed32 banner_title_hash = 58;
    /**
     * <code>optional fixed32 banner_title_hash = 58;</code>
     *
     * <pre>
     * хэш заголовка  баннера по алгоритму super_fast_hash
     * </pre>
     */
    boolean hasBannerTitleHash();
    /**
     * <code>optional fixed32 banner_title_hash = 58;</code>
     *
     * <pre>
     * хэш заголовка  баннера по алгоритму super_fast_hash
     * </pre>
     */
    int getBannerTitleHash();

    // optional fixed64 mm_user_id = 61;
    /**
     * <code>optional fixed64 mm_user_id = 61;</code>
     *
     * <pre>
     * id пользователя ММ
     * </pre>
     */
    boolean hasMmUserId();
    /**
     * <code>optional fixed64 mm_user_id = 61;</code>
     *
     * <pre>
     * id пользователя ММ
     * </pre>
     */
    long getMmUserId();

    // optional uint32 shows_count = 13;
    /**
     * <code>optional uint32 shows_count = 13;</code>
     *
     * <pre>
     * количество показов баннеров кампании для пользователя
     * </pre>
     */
    boolean hasShowsCount();
    /**
     * <code>optional uint32 shows_count = 13;</code>
     *
     * <pre>
     * количество показов баннеров кампании для пользователя
     * </pre>
     */
    int getShowsCount();

    // optional uint32 clicks_count = 82;
    /**
     * <code>optional uint32 clicks_count = 82;</code>
     *
     * <pre>
     * количество кликов пользователя по баннернам кампании
     * </pre>
     */
    boolean hasClicksCount();
    /**
     * <code>optional uint32 clicks_count = 82;</code>
     *
     * <pre>
     * количество кликов пользователя по баннернам кампании
     * </pre>
     */
    int getClicksCount();

    // optional uint32 banner_shown_times = 84;
    /**
     * <code>optional uint32 banner_shown_times = 84;</code>
     *
     * <pre>
     * номер показа баннера по куки
     * </pre>
     */
    boolean hasBannerShownTimes();
    /**
     * <code>optional uint32 banner_shown_times = 84;</code>
     *
     * <pre>
     * номер показа баннера по куки
     * </pre>
     */
    int getBannerShownTimes();

    // repeated uint32 apps = 79 [packed = true];
    /**
     * <code>repeated uint32 apps = 79 [packed = true];</code>
     *
     * <pre>
     * apps_installed
     * </pre>
     */
    java.util.List<java.lang.Integer> getAppsList();
    /**
     * <code>repeated uint32 apps = 79 [packed = true];</code>
     *
     * <pre>
     * apps_installed
     * </pre>
     */
    int getAppsCount();
    /**
     * <code>repeated uint32 apps = 79 [packed = true];</code>
     *
     * <pre>
     * apps_installed
     * </pre>
     */
    int getApps(int index);

    // optional uint32 mobile_osver = 80;
    /**
     * <code>optional uint32 mobile_osver = 80;</code>
     *
     * <pre>
     * хеш от строки с версией мобильной ос
     * </pre>
     */
    boolean hasMobileOsver();
    /**
     * <code>optional uint32 mobile_osver = 80;</code>
     *
     * <pre>
     * хеш от строки с версией мобильной ос
     * </pre>
     */
    int getMobileOsver();

    // optional uint32 mobile_region = 106;
    /**
     * <code>optional uint32 mobile_region = 106;</code>
     *
     * <pre>
     * BT_MOBILE_REGION
     * </pre>
     */
    boolean hasMobileRegion();
    /**
     * <code>optional uint32 mobile_region = 106;</code>
     *
     * <pre>
     * BT_MOBILE_REGION
     * </pre>
     */
    int getMobileRegion();

    // optional fixed32 conversion_ts = 83;
    /**
     * <code>optional fixed32 conversion_ts = 83;</code>
     *
     * <pre>
     * время конверсии
     * </pre>
     */
    boolean hasConversionTs();
    /**
     * <code>optional fixed32 conversion_ts = 83;</code>
     *
     * <pre>
     * время конверсии
     * </pre>
     */
    int getConversionTs();

    // optional fixed32 click_ts = 86;
    /**
     * <code>optional fixed32 click_ts = 86;</code>
     *
     * <pre>
     * время клика
     * </pre>
     */
    boolean hasClickTs();
    /**
     * <code>optional fixed32 click_ts = 86;</code>
     *
     * <pre>
     * время клика
     * </pre>
     */
    int getClickTs();

    // optional string top_goal = 89;
    /**
     * <code>optional string top_goal = 89;</code>
     *
     * <pre>
     * Достигнутая цель ТОПа
     * </pre>
     */
    boolean hasTopGoal();
    /**
     * <code>optional string top_goal = 89;</code>
     *
     * <pre>
     * Достигнутая цель ТОПа
     * </pre>
     */
    java.lang.String getTopGoal();
    /**
     * <code>optional string top_goal = 89;</code>
     *
     * <pre>
     * Достигнутая цель ТОПа
     * </pre>
     */
    com.google.protobuf.ByteString
        getTopGoalBytes();

    // optional fixed32 top_counter_id = 105;
    /**
     * <code>optional fixed32 top_counter_id = 105;</code>
     *
     * <pre>
     * ID счетчика ТОПа
     * </pre>
     */
    boolean hasTopCounterId();
    /**
     * <code>optional fixed32 top_counter_id = 105;</code>
     *
     * <pre>
     * ID счетчика ТОПа
     * </pre>
     */
    int getTopCounterId();

    // optional uint32 conversion_cost = 90;
    /**
     * <code>optional uint32 conversion_cost = 90;</code>
     *
     * <pre>
     * цена за конверсию в рублях (копейки)
     * </pre>
     */
    boolean hasConversionCost();
    /**
     * <code>optional uint32 conversion_cost = 90;</code>
     *
     * <pre>
     * цена за конверсию в рублях (копейки)
     * </pre>
     */
    int getConversionCost();

    // optional uint32 conversion_currency_cost = 91;
    /**
     * <code>optional uint32 conversion_currency_cost = 91;</code>
     *
     * <pre>
     * цена за конверсию в валюте (1/100 валюты)
     * </pre>
     */
    boolean hasConversionCurrencyCost();
    /**
     * <code>optional uint32 conversion_currency_cost = 91;</code>
     *
     * <pre>
     * цена за конверсию в валюте (1/100 валюты)
     * </pre>
     */
    int getConversionCurrencyCost();

    // optional .ru.mail.go.webbase.TargetMsg.RTB_Banner rtb_banner = 70;
    /**
     * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner rtb_banner = 70;</code>
     *
     * <pre>
     * rtb-инфо
     * </pre>
     */
    boolean hasRtbBanner();
    /**
     * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner rtb_banner = 70;</code>
     *
     * <pre>
     * rtb-инфо
     * </pre>
     */
    ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner getRtbBanner();
    /**
     * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner rtb_banner = 70;</code>
     *
     * <pre>
     * rtb-инфо
     * </pre>
     */
    ru.mail.go.webbase.TargetProto.TargetMsg.RTB_BannerOrBuilder getRtbBannerOrBuilder();

    // optional uint32 flags = 87;
    /**
     * <code>optional uint32 flags = 87;</code>
     *
     * <pre>
     * флаги. значения см. в include/target/stat_msg_flags.hpp
     * </pre>
     */
    boolean hasFlags();
    /**
     * <code>optional uint32 flags = 87;</code>
     *
     * <pre>
     * флаги. значения см. в include/target/stat_msg_flags.hpp
     * </pre>
     */
    int getFlags();

    // optional uint32 custom_event_flags = 103;
    /**
     * <code>optional uint32 custom_event_flags = 103;</code>
     *
     * <pre>
     * флаги кастомных событий, значения см. в include/target/stat_msg_flags.hpp
     * </pre>
     */
    boolean hasCustomEventFlags();
    /**
     * <code>optional uint32 custom_event_flags = 103;</code>
     *
     * <pre>
     * флаги кастомных событий, значения см. в include/target/stat_msg_flags.hpp
     * </pre>
     */
    int getCustomEventFlags();

    // optional uint32 max_cpm_limit = 88;
    /**
     * <code>optional uint32 max_cpm_limit = 88;</code>
     *
     * <pre>
     * самый большой cpm лимит для баннеров в этом запросе
     * </pre>
     */
    boolean hasMaxCpmLimit();
    /**
     * <code>optional uint32 max_cpm_limit = 88;</code>
     *
     * <pre>
     * самый большой cpm лимит для баннеров в этом запросе
     * </pre>
     */
    int getMaxCpmLimit();

    // repeated uint32 clicked_campaigns = 92 [packed = true];
    /**
     * <code>repeated uint32 clicked_campaigns = 92 [packed = true];</code>
     *
     * <pre>
     * история кликов пользователя по кампаниям
     * </pre>
     */
    java.util.List<java.lang.Integer> getClickedCampaignsList();
    /**
     * <code>repeated uint32 clicked_campaigns = 92 [packed = true];</code>
     *
     * <pre>
     * история кликов пользователя по кампаниям
     * </pre>
     */
    int getClickedCampaignsCount();
    /**
     * <code>repeated uint32 clicked_campaigns = 92 [packed = true];</code>
     *
     * <pre>
     * история кликов пользователя по кампаниям
     * </pre>
     */
    int getClickedCampaigns(int index);

    // optional int64 content_id = 94;
    /**
     * <code>optional int64 content_id = 94;</code>
     */
    boolean hasContentId();
    /**
     * <code>optional int64 content_id = 94;</code>
     */
    long getContentId();

    // optional int32 service_id = 95;
    /**
     * <code>optional int32 service_id = 95;</code>
     */
    boolean hasServiceId();
    /**
     * <code>optional int32 service_id = 95;</code>
     */
    int getServiceId();

    // optional uint32 url_id = 98;
    /**
     * <code>optional uint32 url_id = 98;</code>
     */
    boolean hasUrlId();
    /**
     * <code>optional uint32 url_id = 98;</code>
     */
    int getUrlId();

    // optional uint32 template_id = 102;
    /**
     * <code>optional uint32 template_id = 102;</code>
     *
     * <pre>
     * позволяет видеть правильный шаблон по расшифровке ссылки, если использовался шаблон из запроса
     * </pre>
     */
    boolean hasTemplateId();
    /**
     * <code>optional uint32 template_id = 102;</code>
     *
     * <pre>
     * позволяет видеть правильный шаблон по расшифровке ссылки, если использовался шаблон из запроса
     * </pre>
     */
    int getTemplateId();

    // repeated uint32 limited_pad_ids = 104 [packed = true];
    /**
     * <code>repeated uint32 limited_pad_ids = 104 [packed = true];</code>
     *
     * <pre>
     * площадки события, для которых задано ограничение доли трафика
     * </pre>
     */
    java.util.List<java.lang.Integer> getLimitedPadIdsList();
    /**
     * <code>repeated uint32 limited_pad_ids = 104 [packed = true];</code>
     *
     * <pre>
     * площадки события, для которых задано ограничение доли трафика
     * </pre>
     */
    int getLimitedPadIdsCount();
    /**
     * <code>repeated uint32 limited_pad_ids = 104 [packed = true];</code>
     *
     * <pre>
     * площадки события, для которых задано ограничение доли трафика
     * </pre>
     */
    int getLimitedPadIds(int index);

    // optional uint32 matched = 107;
    /**
     * <code>optional uint32 matched = 107;</code>
     *
     * <pre>
     * проставляется демоном matcherd, нашли или нет положительное событие для оригинального отрицательного
     * </pre>
     */
    boolean hasMatched();
    /**
     * <code>optional uint32 matched = 107;</code>
     *
     * <pre>
     * проставляется демоном matcherd, нашли или нет положительное событие для оригинального отрицательного
     * </pre>
     */
    int getMatched();

    // optional uint32 matched_ts = 108;
    /**
     * <code>optional uint32 matched_ts = 108;</code>
     *
     * <pre>
     * проставляется демоном matcherd, timestamp соответствующего положительного события
     * </pre>
     */
    boolean hasMatchedTs();
    /**
     * <code>optional uint32 matched_ts = 108;</code>
     *
     * <pre>
     * проставляется демоном matcherd, timestamp соответствующего положительного события
     * </pre>
     */
    int getMatchedTs();

    // repeated uint32 contents = 110 [packed = true];
    /**
     * <code>repeated uint32 contents = 110 [packed = true];</code>
     *
     * <pre>
     * контенты баннера
     * </pre>
     */
    java.util.List<java.lang.Integer> getContentsList();
    /**
     * <code>repeated uint32 contents = 110 [packed = true];</code>
     *
     * <pre>
     * контенты баннера
     * </pre>
     */
    int getContentsCount();
    /**
     * <code>repeated uint32 contents = 110 [packed = true];</code>
     *
     * <pre>
     * контенты баннера
     * </pre>
     */
    int getContents(int index);

    // optional float model_playback_rate = 111;
    /**
     * <code>optional float model_playback_rate = 111;</code>
     *
     * <pre>
     * предсказание модели playback
     * </pre>
     */
    boolean hasModelPlaybackRate();
    /**
     * <code>optional float model_playback_rate = 111;</code>
     *
     * <pre>
     * предсказание модели playback
     * </pre>
     */
    float getModelPlaybackRate();

    // optional float expected_cer = 112;
    /**
     * <code>optional float expected_cer = 112;</code>
     *
     * <pre>
     * используемая в аукционе оценка вероятности кастомного события
     * </pre>
     */
    boolean hasExpectedCer();
    /**
     * <code>optional float expected_cer = 112;</code>
     *
     * <pre>
     * используемая в аукционе оценка вероятности кастомного события
     * </pre>
     */
    float getExpectedCer();
  }
  /**
   * Protobuf type {@code ru.mail.go.webbase.TargetMsg}
   */
  public static final class TargetMsg extends
      com.google.protobuf.GeneratedMessage
      implements TargetMsgOrBuilder {
    // Use TargetMsg.newBuilder() to construct.
    private TargetMsg(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TargetMsg(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TargetMsg defaultInstance;
    public static TargetMsg getDefaultInstance() {
      return defaultInstance;
    }

    public TargetMsg getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TargetMsg(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      int mutable_bitField2_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000002;
              padId_ = input.readUInt32();
              break;
            }
            case 21: {
              bitField1_ |= 0x00000008;
              reqTs_ = input.readFixed32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00004000;
              cost_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              advertiserId_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              packageId_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              miscId_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00002000;
              expectedCpm_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000020;
              campaignId_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000040;
              serverId_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000200;
              ctrOrigin_ = input.readUInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000080;
              orderNumber_ = input.readUInt32();
              break;
            }
            case 104: {
              bitField1_ |= 0x00010000;
              showsCount_ = input.readUInt32();
              break;
            }
            case 117: {
              bitField0_ |= 0x00000400;
              modelCtr_ = input.readFloat();
              break;
            }
            case 125: {
              bitField0_ |= 0x00000800;
              expectedCtr_ = input.readFloat();
              break;
            }
            case 133: {
              bitField0_ |= 0x00000100;
              campaignVersion_ = input.readFixed32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00000001;
              repeat_ = input.readUInt32();
              break;
            }
            case 149: {
              bitField1_ |= 0x00000010;
              reqUserIp_ = input.readFixed32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00008000;
              currencyCost_ = input.readUInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x20000000;
              geo_ = input.readUInt32();
              break;
            }
            case 169: {
              bitField0_ |= 0x80000000;
              impressionId_ = input.readFixed64();
              break;
            }
            case 176: {
              bitField1_ |= 0x00000004;
              subrequestId_ = input.readUInt32();
              break;
            }
            case 186: {
              bitField1_ |= 0x00000020;
              reqUserIpv6_ = input.readBytes();
              break;
            }
            case 192: {
              bitField1_ |= 0x00000040;
              imageId_ = input.readUInt32();
              break;
            }
            case 200: {
              bitField1_ |= 0x00000080;
              audienceId_ = input.readUInt32();
              break;
            }
            case 208: {
              bitField0_ |= 0x00010000;
              currencyId_ = input.readUInt32();
              break;
            }
            case 218: {
              if (!((mutable_bitField0_ & 0x20000000) == 0x20000000)) {
                tpsCosts_ = new java.util.ArrayList<ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost>();
                mutable_bitField0_ |= 0x20000000;
              }
              tpsCosts_.add(input.readMessage(ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost.PARSER, extensionRegistry));
              break;
            }
            case 240: {
              bitField1_ |= 0x00000100;
              bannerdTestId_ = input.readUInt32();
              break;
            }
            case 248: {
              bitField1_ |= 0x00000200;
              limitedBannerdTestId_ = input.readInt32();
              break;
            }
            case 285: {
              bitField1_ |= 0x00000400;
              aliveMoneyRatio_ = input.readFloat();
              break;
            }
            case 320: {
              bitField1_ |= 0x00000800;
              filter_ = input.readUInt32();
              break;
            }
            case 328: {
              bitField1_ |= 0x00001000;
              fakeFilter_ = input.readUInt32();
              break;
            }
            case 461: {
              bitField1_ |= 0x00002000;
              bannerTextHash_ = input.readFixed32();
              break;
            }
            case 469: {
              bitField1_ |= 0x00004000;
              bannerTitleHash_ = input.readFixed32();
              break;
            }
            case 489: {
              bitField1_ |= 0x00008000;
              mmUserId_ = input.readFixed64();
              break;
            }
            case 562: {
              ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Builder subBuilder = null;
              if (((bitField1_ & 0x08000000) == 0x08000000)) {
                subBuilder = rtbBanner_.toBuilder();
              }
              rtbBanner_ = input.readMessage(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(rtbBanner_);
                rtbBanner_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x08000000;
              break;
            }
            case 617: {
              bitField1_ |= 0x00000001;
              originalImpressionId_ = input.readFixed64();
              break;
            }
            case 629: {
              bitField1_ |= 0x00000002;
              originalReqTs_ = input.readFixed32();
              break;
            }
            case 632: {
              if (!((mutable_bitField1_ & 0x00100000) == 0x00100000)) {
                apps_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField1_ |= 0x00100000;
              }
              apps_.add(input.readUInt32());
              break;
            }
            case 634: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField1_ & 0x00100000) == 0x00100000) && input.getBytesUntilLimit() > 0) {
                apps_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField1_ |= 0x00100000;
              }
              while (input.getBytesUntilLimit() > 0) {
                apps_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 640: {
              bitField1_ |= 0x00080000;
              mobileOsver_ = input.readUInt32();
              break;
            }
            case 648: {
              bitField0_ |= 0x40000000;
              reqGeo_ = input.readUInt32();
              break;
            }
            case 656: {
              bitField1_ |= 0x00020000;
              clicksCount_ = input.readUInt32();
              break;
            }
            case 669: {
              bitField1_ |= 0x00200000;
              conversionTs_ = input.readFixed32();
              break;
            }
            case 672: {
              bitField1_ |= 0x00040000;
              bannerShownTimes_ = input.readUInt32();
              break;
            }
            case 685: {
              bitField0_ |= 0x00001000;
              expectedClicksCr_ = input.readFloat();
              break;
            }
            case 693: {
              bitField1_ |= 0x00400000;
              clickTs_ = input.readFixed32();
              break;
            }
            case 696: {
              bitField1_ |= 0x10000000;
              flags_ = input.readUInt32();
              break;
            }
            case 704: {
              bitField1_ |= 0x40000000;
              maxCpmLimit_ = input.readUInt32();
              break;
            }
            case 714: {
              bitField1_ |= 0x00800000;
              topGoal_ = input.readBytes();
              break;
            }
            case 720: {
              bitField1_ |= 0x02000000;
              conversionCost_ = input.readUInt32();
              break;
            }
            case 728: {
              bitField1_ |= 0x04000000;
              conversionCurrencyCost_ = input.readUInt32();
              break;
            }
            case 736: {
              if (!((mutable_bitField2_ & 0x00000002) == 0x00000002)) {
                clickedCampaigns_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField2_ |= 0x00000002;
              }
              clickedCampaigns_.add(input.readUInt32());
              break;
            }
            case 738: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField2_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                clickedCampaigns_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField2_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                clickedCampaigns_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 752: {
              bitField1_ |= 0x80000000;
              contentId_ = input.readInt64();
              break;
            }
            case 760: {
              bitField2_ |= 0x00000001;
              serviceId_ = input.readInt32();
              break;
            }
            case 768: {
              bitField0_ |= 0x00040000;
              paidEvType_ = input.readUInt32();
              break;
            }
            case 781: {
              bitField0_ |= 0x00020000;
              currencyRate_ = input.readFloat();
              break;
            }
            case 784: {
              bitField2_ |= 0x00000002;
              urlId_ = input.readUInt32();
              break;
            }
            case 792: {
              bitField0_ |= 0x00100000;
              currencyCostPpe_ = input.readUInt32();
              break;
            }
            case 800: {
              bitField0_ |= 0x00200000;
              currencyCostPerGoalForOcpm_ = input.readUInt32();
              break;
            }
            case 808: {
              bitField0_ |= 0x00400000;
              currencyBasePpe_ = input.readUInt32();
              break;
            }
            case 816: {
              bitField2_ |= 0x00000004;
              templateId_ = input.readUInt32();
              break;
            }
            case 824: {
              bitField1_ |= 0x20000000;
              customEventFlags_ = input.readUInt32();
              break;
            }
            case 832: {
              if (!((mutable_bitField2_ & 0x00000040) == 0x00000040)) {
                limitedPadIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField2_ |= 0x00000040;
              }
              limitedPadIds_.add(input.readUInt32());
              break;
            }
            case 834: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField2_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                limitedPadIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField2_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                limitedPadIds_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 845: {
              bitField1_ |= 0x01000000;
              topCounterId_ = input.readFixed32();
              break;
            }
            case 848: {
              bitField1_ |= 0x00100000;
              mobileRegion_ = input.readUInt32();
              break;
            }
            case 856: {
              bitField2_ |= 0x00000008;
              matched_ = input.readUInt32();
              break;
            }
            case 864: {
              bitField2_ |= 0x00000010;
              matchedTs_ = input.readUInt32();
              break;
            }
            case 872: {
              bitField0_ |= 0x08000000;
              srcCurrencyCost_ = input.readUInt32();
              break;
            }
            case 880: {
              if (!((mutable_bitField2_ & 0x00000200) == 0x00000200)) {
                contents_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField2_ |= 0x00000200;
              }
              contents_.add(input.readUInt32());
              break;
            }
            case 882: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField2_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                contents_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField2_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                contents_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 893: {
              bitField2_ |= 0x00000020;
              modelPlaybackRate_ = input.readFloat();
              break;
            }
            case 901: {
              bitField2_ |= 0x00000040;
              expectedCer_ = input.readFloat();
              break;
            }
            case 904: {
              bitField0_ |= 0x00080000;
              paidBannerEvent_ = input.readUInt32();
              break;
            }
            case 912: {
              bitField0_ |= 0x10000000;
              srcEventType_ = input.readUInt32();
              break;
            }
            case 920: {
              bitField0_ |= 0x00800000;
              pricedEvType_ = input.readInt32();
              break;
            }
            case 928: {
              bitField0_ |= 0x01000000;
              pricedBannerEvent_ = input.readUInt32();
              break;
            }
            case 936: {
              bitField0_ |= 0x02000000;
              currencyCostPpre_ = input.readUInt32();
              break;
            }
            case 944: {
              bitField0_ |= 0x04000000;
              currencyBasePpre_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x20000000) == 0x20000000)) {
          tpsCosts_ = java.util.Collections.unmodifiableList(tpsCosts_);
        }
        if (((mutable_bitField1_ & 0x00100000) == 0x00100000)) {
          apps_ = java.util.Collections.unmodifiableList(apps_);
        }
        if (((mutable_bitField2_ & 0x00000002) == 0x00000002)) {
          clickedCampaigns_ = java.util.Collections.unmodifiableList(clickedCampaigns_);
        }
        if (((mutable_bitField2_ & 0x00000040) == 0x00000040)) {
          limitedPadIds_ = java.util.Collections.unmodifiableList(limitedPadIds_);
        }
        if (((mutable_bitField2_ & 0x00000200) == 0x00000200)) {
          contents_ = java.util.Collections.unmodifiableList(contents_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ru.mail.go.webbase.TargetProto.TargetMsg.class, ru.mail.go.webbase.TargetProto.TargetMsg.Builder.class);
    }

    public static com.google.protobuf.Parser<TargetMsg> PARSER =
        new com.google.protobuf.AbstractParser<TargetMsg>() {
      public TargetMsg parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TargetMsg(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TargetMsg> getParserForType() {
      return PARSER;
    }

    public interface TPS_costOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 tps_id = 1;
      /**
       * <code>optional uint32 tps_id = 1;</code>
       *
       * <pre>
       * id стороннего сервиса
       * </pre>
       */
      boolean hasTpsId();
      /**
       * <code>optional uint32 tps_id = 1;</code>
       *
       * <pre>
       * id стороннего сервиса
       * </pre>
       */
      int getTpsId();

      // optional uint32 currency_cost = 2;
      /**
       * <code>optional uint32 currency_cost = 2;</code>
       *
       * <pre>
       * списание за услугу стороннего сервиса в валюте рекламодателя
       * </pre>
       */
      boolean hasCurrencyCost();
      /**
       * <code>optional uint32 currency_cost = 2;</code>
       *
       * <pre>
       * списание за услугу стороннего сервиса в валюте рекламодателя
       * </pre>
       */
      int getCurrencyCost();

      // optional uint32 cost = 3;
      /**
       * <code>optional uint32 cost = 3;</code>
       *
       * <pre>
       * списание за услугу стороннего сервиса в рублях
       * </pre>
       */
      boolean hasCost();
      /**
       * <code>optional uint32 cost = 3;</code>
       *
       * <pre>
       * списание за услугу стороннего сервиса в рублях
       * </pre>
       */
      int getCost();
    }
    /**
     * Protobuf type {@code ru.mail.go.webbase.TargetMsg.TPS_cost}
     */
    public static final class TPS_cost extends
        com.google.protobuf.GeneratedMessage
        implements TPS_costOrBuilder {
      // Use TPS_cost.newBuilder() to construct.
      private TPS_cost(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private TPS_cost(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final TPS_cost defaultInstance;
      public static TPS_cost getDefaultInstance() {
        return defaultInstance;
      }

      public TPS_cost getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private TPS_cost(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                tpsId_ = input.readUInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                currencyCost_ = input.readUInt32();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                cost_ = input.readUInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_TPS_cost_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_TPS_cost_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost.class, ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost.Builder.class);
      }

      public static com.google.protobuf.Parser<TPS_cost> PARSER =
          new com.google.protobuf.AbstractParser<TPS_cost>() {
        public TPS_cost parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new TPS_cost(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<TPS_cost> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 tps_id = 1;
      public static final int TPS_ID_FIELD_NUMBER = 1;
      private int tpsId_;
      /**
       * <code>optional uint32 tps_id = 1;</code>
       *
       * <pre>
       * id стороннего сервиса
       * </pre>
       */
      public boolean hasTpsId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 tps_id = 1;</code>
       *
       * <pre>
       * id стороннего сервиса
       * </pre>
       */
      public int getTpsId() {
        return tpsId_;
      }

      // optional uint32 currency_cost = 2;
      public static final int CURRENCY_COST_FIELD_NUMBER = 2;
      private int currencyCost_;
      /**
       * <code>optional uint32 currency_cost = 2;</code>
       *
       * <pre>
       * списание за услугу стороннего сервиса в валюте рекламодателя
       * </pre>
       */
      public boolean hasCurrencyCost() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 currency_cost = 2;</code>
       *
       * <pre>
       * списание за услугу стороннего сервиса в валюте рекламодателя
       * </pre>
       */
      public int getCurrencyCost() {
        return currencyCost_;
      }

      // optional uint32 cost = 3;
      public static final int COST_FIELD_NUMBER = 3;
      private int cost_;
      /**
       * <code>optional uint32 cost = 3;</code>
       *
       * <pre>
       * списание за услугу стороннего сервиса в рублях
       * </pre>
       */
      public boolean hasCost() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 cost = 3;</code>
       *
       * <pre>
       * списание за услугу стороннего сервиса в рублях
       * </pre>
       */
      public int getCost() {
        return cost_;
      }

      private void initFields() {
        tpsId_ = 0;
        currencyCost_ = 0;
        cost_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, tpsId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeUInt32(2, currencyCost_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeUInt32(3, cost_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, tpsId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, currencyCost_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(3, cost_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code ru.mail.go.webbase.TargetMsg.TPS_cost}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.mail.go.webbase.TargetProto.TargetMsg.TPS_costOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_TPS_cost_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_TPS_cost_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost.class, ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost.Builder.class);
        }

        // Construct using ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          tpsId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          currencyCost_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          cost_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_TPS_cost_descriptor;
        }

        public ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost getDefaultInstanceForType() {
          return ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost.getDefaultInstance();
        }

        public ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost build() {
          ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost buildPartial() {
          ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost result = new ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.tpsId_ = tpsId_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.currencyCost_ = currencyCost_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.cost_ = cost_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost) {
            return mergeFrom((ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost other) {
          if (other == ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost.getDefaultInstance()) return this;
          if (other.hasTpsId()) {
            setTpsId(other.getTpsId());
          }
          if (other.hasCurrencyCost()) {
            setCurrencyCost(other.getCurrencyCost());
          }
          if (other.hasCost()) {
            setCost(other.getCost());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 tps_id = 1;
        private int tpsId_ ;
        /**
         * <code>optional uint32 tps_id = 1;</code>
         *
         * <pre>
         * id стороннего сервиса
         * </pre>
         */
        public boolean hasTpsId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 tps_id = 1;</code>
         *
         * <pre>
         * id стороннего сервиса
         * </pre>
         */
        public int getTpsId() {
          return tpsId_;
        }
        /**
         * <code>optional uint32 tps_id = 1;</code>
         *
         * <pre>
         * id стороннего сервиса
         * </pre>
         */
        public Builder setTpsId(int value) {
          bitField0_ |= 0x00000001;
          tpsId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 tps_id = 1;</code>
         *
         * <pre>
         * id стороннего сервиса
         * </pre>
         */
        public Builder clearTpsId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          tpsId_ = 0;
          onChanged();
          return this;
        }

        // optional uint32 currency_cost = 2;
        private int currencyCost_ ;
        /**
         * <code>optional uint32 currency_cost = 2;</code>
         *
         * <pre>
         * списание за услугу стороннего сервиса в валюте рекламодателя
         * </pre>
         */
        public boolean hasCurrencyCost() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional uint32 currency_cost = 2;</code>
         *
         * <pre>
         * списание за услугу стороннего сервиса в валюте рекламодателя
         * </pre>
         */
        public int getCurrencyCost() {
          return currencyCost_;
        }
        /**
         * <code>optional uint32 currency_cost = 2;</code>
         *
         * <pre>
         * списание за услугу стороннего сервиса в валюте рекламодателя
         * </pre>
         */
        public Builder setCurrencyCost(int value) {
          bitField0_ |= 0x00000002;
          currencyCost_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 currency_cost = 2;</code>
         *
         * <pre>
         * списание за услугу стороннего сервиса в валюте рекламодателя
         * </pre>
         */
        public Builder clearCurrencyCost() {
          bitField0_ = (bitField0_ & ~0x00000002);
          currencyCost_ = 0;
          onChanged();
          return this;
        }

        // optional uint32 cost = 3;
        private int cost_ ;
        /**
         * <code>optional uint32 cost = 3;</code>
         *
         * <pre>
         * списание за услугу стороннего сервиса в рублях
         * </pre>
         */
        public boolean hasCost() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional uint32 cost = 3;</code>
         *
         * <pre>
         * списание за услугу стороннего сервиса в рублях
         * </pre>
         */
        public int getCost() {
          return cost_;
        }
        /**
         * <code>optional uint32 cost = 3;</code>
         *
         * <pre>
         * списание за услугу стороннего сервиса в рублях
         * </pre>
         */
        public Builder setCost(int value) {
          bitField0_ |= 0x00000004;
          cost_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 cost = 3;</code>
         *
         * <pre>
         * списание за услугу стороннего сервиса в рублях
         * </pre>
         */
        public Builder clearCost() {
          bitField0_ = (bitField0_ & ~0x00000004);
          cost_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:ru.mail.go.webbase.TargetMsg.TPS_cost)
      }

      static {
        defaultInstance = new TPS_cost(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.TargetMsg.TPS_cost)
    }

    public interface RTB_BannerOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 cpm_limit = 1;
      /**
       * <code>optional uint32 cpm_limit = 1;</code>
       *
       * <pre>
       * лимит cpm объявления для автоторгов (в рублях) (проставляет bannerd)
       * </pre>
       */
      boolean hasCpmLimit();
      /**
       * <code>optional uint32 cpm_limit = 1;</code>
       *
       * <pre>
       * лимит cpm объявления для автоторгов (в рублях) (проставляет bannerd)
       * </pre>
       */
      int getCpmLimit();

      // optional uint32 site_place_id = 4;
      /**
       * <code>optional uint32 site_place_id = 4;</code>
       *
       * <pre>
       * нужно только для k*-режимов, но пока проставляем для всех
       * </pre>
       */
      boolean hasSitePlaceId();
      /**
       * <code>optional uint32 site_place_id = 4;</code>
       *
       * <pre>
       * нужно только для k*-режимов, но пока проставляем для всех
       * </pre>
       */
      int getSitePlaceId();

      // optional uint32 trg_cpm = 2;
      /**
       * <code>optional uint32 trg_cpm = 2;</code>
       *
       * <pre>
       * ставка за блок, которая торгуется в RTB        (проставляет bannerd)
       * </pre>
       */
      boolean hasTrgCpm();
      /**
       * <code>optional uint32 trg_cpm = 2;</code>
       *
       * <pre>
       * ставка за блок, которая торгуется в RTB        (проставляет bannerd)
       * </pre>
       */
      int getTrgCpm();

      // optional uint32 ssp_cpm = 3;
      /**
       * <code>optional uint32 ssp_cpm = 3;</code>
       *
       * <pre>
       * равна rtb_block.a_block_cpm_trg, проставляется для целей дебага
       * </pre>
       */
      boolean hasSspCpm();
      /**
       * <code>optional uint32 ssp_cpm = 3;</code>
       *
       * <pre>
       * равна rtb_block.a_block_cpm_trg, проставляется для целей дебага
       * </pre>
       */
      int getSspCpm();

      // optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.History history = 6;
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.History history = 6;</code>
       *
       * <pre>
       * история правки цен в антифроде               (проставляет antifraud)
       * </pre>
       */
      boolean hasHistory();
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.History history = 6;</code>
       *
       * <pre>
       * история правки цен в антифроде               (проставляет antifraud)
       * </pre>
       */
      ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History getHistory();
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.History history = 6;</code>
       *
       * <pre>
       * история правки цен в антифроде               (проставляет antifraud)
       * </pre>
       */
      ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.HistoryOrBuilder getHistoryOrBuilder();

      // optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.SecondPriceInfo second_price_info = 9;
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.SecondPriceInfo second_price_info = 9;</code>
       *
       * <pre>
       * информация для применения
       * </pre>
       */
      boolean hasSecondPriceInfo();
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.SecondPriceInfo second_price_info = 9;</code>
       *
       * <pre>
       * информация для применения
       * </pre>
       */
      ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo getSecondPriceInfo();
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.SecondPriceInfo second_price_info = 9;</code>
       *
       * <pre>
       * информация для применения
       * </pre>
       */
      ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfoOrBuilder getSecondPriceInfoOrBuilder();
    }
    /**
     * Protobuf type {@code ru.mail.go.webbase.TargetMsg.RTB_Banner}
     */
    public static final class RTB_Banner extends
        com.google.protobuf.GeneratedMessage
        implements RTB_BannerOrBuilder {
      // Use RTB_Banner.newBuilder() to construct.
      private RTB_Banner(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private RTB_Banner(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final RTB_Banner defaultInstance;
      public static RTB_Banner getDefaultInstance() {
        return defaultInstance;
      }

      public RTB_Banner getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private RTB_Banner(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                cpmLimit_ = input.readUInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000004;
                trgCpm_ = input.readUInt32();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000008;
                sspCpm_ = input.readUInt32();
                break;
              }
              case 32: {
                bitField0_ |= 0x00000002;
                sitePlaceId_ = input.readUInt32();
                break;
              }
              case 50: {
                ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History.Builder subBuilder = null;
                if (((bitField0_ & 0x00000010) == 0x00000010)) {
                  subBuilder = history_.toBuilder();
                }
                history_ = input.readMessage(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(history_);
                  history_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000010;
                break;
              }
              case 74: {
                ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo.Builder subBuilder = null;
                if (((bitField0_ & 0x00000020) == 0x00000020)) {
                  subBuilder = secondPriceInfo_.toBuilder();
                }
                secondPriceInfo_ = input.readMessage(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(secondPriceInfo_);
                  secondPriceInfo_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000020;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.class, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Builder.class);
      }

      public static com.google.protobuf.Parser<RTB_Banner> PARSER =
          new com.google.protobuf.AbstractParser<RTB_Banner>() {
        public RTB_Banner parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new RTB_Banner(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<RTB_Banner> getParserForType() {
        return PARSER;
      }

      public interface FiguresOrBuilder
          extends com.google.protobuf.MessageOrBuilder {

        // optional uint32 expected_cpm = 1;
        /**
         * <code>optional uint32 expected_cpm = 1;</code>
         *
         * <pre>
         * ожидаемый CPM от показа
         * </pre>
         */
        boolean hasExpectedCpm();
        /**
         * <code>optional uint32 expected_cpm = 1;</code>
         *
         * <pre>
         * ожидаемый CPM от показа
         * </pre>
         */
        int getExpectedCpm();

        // optional uint32 cost = 2;
        /**
         * <code>optional uint32 cost = 2;</code>
         *
         * <pre>
         * цена за данный тип события в копейках
         * </pre>
         */
        boolean hasCost();
        /**
         * <code>optional uint32 cost = 2;</code>
         *
         * <pre>
         * цена за данный тип события в копейках
         * </pre>
         */
        int getCost();

        // optional uint32 currency_cost = 3;
        /**
         * <code>optional uint32 currency_cost = 3;</code>
         *
         * <pre>
         * цена за данный тип события в 1/100 валюты
         * </pre>
         */
        boolean hasCurrencyCost();
        /**
         * <code>optional uint32 currency_cost = 3;</code>
         *
         * <pre>
         * цена за данный тип события в 1/100 валюты
         * </pre>
         */
        int getCurrencyCost();

        // optional uint32 currency_cost_ppe = 99;
        /**
         * <code>optional uint32 currency_cost_ppe = 99;</code>
         *
         * <pre>
         * стоимость платного события данного баннера в 1/100 валюты
         * </pre>
         */
        boolean hasCurrencyCostPpe();
        /**
         * <code>optional uint32 currency_cost_ppe = 99;</code>
         *
         * <pre>
         * стоимость платного события данного баннера в 1/100 валюты
         * </pre>
         */
        int getCurrencyCostPpe();

        // optional uint32 conversion_cost = 90;
        /**
         * <code>optional uint32 conversion_cost = 90;</code>
         *
         * <pre>
         * цена за конверсию в рублях (копейки)
         * </pre>
         */
        boolean hasConversionCost();
        /**
         * <code>optional uint32 conversion_cost = 90;</code>
         *
         * <pre>
         * цена за конверсию в рублях (копейки)
         * </pre>
         */
        int getConversionCost();

        // optional uint32 conversion_currency_cost = 91;
        /**
         * <code>optional uint32 conversion_currency_cost = 91;</code>
         *
         * <pre>
         * цена за конверсию в валюте (1/100 валюты)
         * </pre>
         */
        boolean hasConversionCurrencyCost();
        /**
         * <code>optional uint32 conversion_currency_cost = 91;</code>
         *
         * <pre>
         * цена за конверсию в валюте (1/100 валюты)
         * </pre>
         */
        int getConversionCurrencyCost();
      }
      /**
       * Protobuf type {@code ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures}
       */
      public static final class Figures extends
          com.google.protobuf.GeneratedMessage
          implements FiguresOrBuilder {
        // Use Figures.newBuilder() to construct.
        private Figures(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
          super(builder);
          this.unknownFields = builder.getUnknownFields();
        }
        private Figures(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

        private static final Figures defaultInstance;
        public static Figures getDefaultInstance() {
          return defaultInstance;
        }

        public Figures getDefaultInstanceForType() {
          return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;
        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
            getUnknownFields() {
          return this.unknownFields;
        }
        private Figures(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          initFields();
          int mutable_bitField0_ = 0;
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(input, unknownFields,
                                         extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  bitField0_ |= 0x00000001;
                  expectedCpm_ = input.readUInt32();
                  break;
                }
                case 16: {
                  bitField0_ |= 0x00000002;
                  cost_ = input.readUInt32();
                  break;
                }
                case 24: {
                  bitField0_ |= 0x00000004;
                  currencyCost_ = input.readUInt32();
                  break;
                }
                case 720: {
                  bitField0_ |= 0x00000010;
                  conversionCost_ = input.readUInt32();
                  break;
                }
                case 728: {
                  bitField0_ |= 0x00000020;
                  conversionCurrencyCost_ = input.readUInt32();
                  break;
                }
                case 792: {
                  bitField0_ |= 0x00000008;
                  currencyCostPpe_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this);
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_Figures_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_Figures_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.class, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.Builder.class);
        }

        public static com.google.protobuf.Parser<Figures> PARSER =
            new com.google.protobuf.AbstractParser<Figures>() {
          public Figures parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new Figures(input, extensionRegistry);
          }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<Figures> getParserForType() {
          return PARSER;
        }

        private int bitField0_;
        // optional uint32 expected_cpm = 1;
        public static final int EXPECTED_CPM_FIELD_NUMBER = 1;
        private int expectedCpm_;
        /**
         * <code>optional uint32 expected_cpm = 1;</code>
         *
         * <pre>
         * ожидаемый CPM от показа
         * </pre>
         */
        public boolean hasExpectedCpm() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 expected_cpm = 1;</code>
         *
         * <pre>
         * ожидаемый CPM от показа
         * </pre>
         */
        public int getExpectedCpm() {
          return expectedCpm_;
        }

        // optional uint32 cost = 2;
        public static final int COST_FIELD_NUMBER = 2;
        private int cost_;
        /**
         * <code>optional uint32 cost = 2;</code>
         *
         * <pre>
         * цена за данный тип события в копейках
         * </pre>
         */
        public boolean hasCost() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional uint32 cost = 2;</code>
         *
         * <pre>
         * цена за данный тип события в копейках
         * </pre>
         */
        public int getCost() {
          return cost_;
        }

        // optional uint32 currency_cost = 3;
        public static final int CURRENCY_COST_FIELD_NUMBER = 3;
        private int currencyCost_;
        /**
         * <code>optional uint32 currency_cost = 3;</code>
         *
         * <pre>
         * цена за данный тип события в 1/100 валюты
         * </pre>
         */
        public boolean hasCurrencyCost() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional uint32 currency_cost = 3;</code>
         *
         * <pre>
         * цена за данный тип события в 1/100 валюты
         * </pre>
         */
        public int getCurrencyCost() {
          return currencyCost_;
        }

        // optional uint32 currency_cost_ppe = 99;
        public static final int CURRENCY_COST_PPE_FIELD_NUMBER = 99;
        private int currencyCostPpe_;
        /**
         * <code>optional uint32 currency_cost_ppe = 99;</code>
         *
         * <pre>
         * стоимость платного события данного баннера в 1/100 валюты
         * </pre>
         */
        public boolean hasCurrencyCostPpe() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional uint32 currency_cost_ppe = 99;</code>
         *
         * <pre>
         * стоимость платного события данного баннера в 1/100 валюты
         * </pre>
         */
        public int getCurrencyCostPpe() {
          return currencyCostPpe_;
        }

        // optional uint32 conversion_cost = 90;
        public static final int CONVERSION_COST_FIELD_NUMBER = 90;
        private int conversionCost_;
        /**
         * <code>optional uint32 conversion_cost = 90;</code>
         *
         * <pre>
         * цена за конверсию в рублях (копейки)
         * </pre>
         */
        public boolean hasConversionCost() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional uint32 conversion_cost = 90;</code>
         *
         * <pre>
         * цена за конверсию в рублях (копейки)
         * </pre>
         */
        public int getConversionCost() {
          return conversionCost_;
        }

        // optional uint32 conversion_currency_cost = 91;
        public static final int CONVERSION_CURRENCY_COST_FIELD_NUMBER = 91;
        private int conversionCurrencyCost_;
        /**
         * <code>optional uint32 conversion_currency_cost = 91;</code>
         *
         * <pre>
         * цена за конверсию в валюте (1/100 валюты)
         * </pre>
         */
        public boolean hasConversionCurrencyCost() {
          return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>optional uint32 conversion_currency_cost = 91;</code>
         *
         * <pre>
         * цена за конверсию в валюте (1/100 валюты)
         * </pre>
         */
        public int getConversionCurrencyCost() {
          return conversionCurrencyCost_;
        }

        private void initFields() {
          expectedCpm_ = 0;
          cost_ = 0;
          currencyCost_ = 0;
          currencyCostPpe_ = 0;
          conversionCost_ = 0;
          conversionCurrencyCost_ = 0;
        }
        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized != -1) return isInitialized == 1;

          memoizedIsInitialized = 1;
          return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          getSerializedSize();
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeUInt32(1, expectedCpm_);
          }
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeUInt32(2, cost_);
          }
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            output.writeUInt32(3, currencyCost_);
          }
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            output.writeUInt32(90, conversionCost_);
          }
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            output.writeUInt32(91, conversionCurrencyCost_);
          }
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            output.writeUInt32(99, currencyCostPpe_);
          }
          getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;
        public int getSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(1, expectedCpm_);
          }
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(2, cost_);
          }
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(3, currencyCost_);
          }
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(90, conversionCost_);
          }
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(91, conversionCurrencyCost_);
          }
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(99, currencyCostPpe_);
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSerializedSize = size;
          return size;
        }

        private static final long serialVersionUID = 0L;
        @java.lang.Override
        protected java.lang.Object writeReplace()
            throws java.io.ObjectStreamException {
          return super.writeReplace();
        }

        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return PARSER.parseFrom(input);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseFrom(input, extensionRegistry);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return PARSER.parseDelimitedFrom(input);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return PARSER.parseFrom(input);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() { return Builder.create(); }
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures prototype) {
          return newBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() { return newBuilder(this); }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessage.Builder<Builder>
           implements ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.FiguresOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_Figures_descriptor;
          }

          protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_Figures_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.class, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.Builder.class);
          }

          // Construct using ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            }
          }
          private static Builder create() {
            return new Builder();
          }

          public Builder clear() {
            super.clear();
            expectedCpm_ = 0;
            bitField0_ = (bitField0_ & ~0x00000001);
            cost_ = 0;
            bitField0_ = (bitField0_ & ~0x00000002);
            currencyCost_ = 0;
            bitField0_ = (bitField0_ & ~0x00000004);
            currencyCostPpe_ = 0;
            bitField0_ = (bitField0_ & ~0x00000008);
            conversionCost_ = 0;
            bitField0_ = (bitField0_ & ~0x00000010);
            conversionCurrencyCost_ = 0;
            bitField0_ = (bitField0_ & ~0x00000020);
            return this;
          }

          public Builder clone() {
            return create().mergeFrom(buildPartial());
          }

          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_Figures_descriptor;
          }

          public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures getDefaultInstanceForType() {
            return ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.getDefaultInstance();
          }

          public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures build() {
            ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures buildPartial() {
            ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures result = new ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
              to_bitField0_ |= 0x00000001;
            }
            result.expectedCpm_ = expectedCpm_;
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
              to_bitField0_ |= 0x00000002;
            }
            result.cost_ = cost_;
            if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
              to_bitField0_ |= 0x00000004;
            }
            result.currencyCost_ = currencyCost_;
            if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
              to_bitField0_ |= 0x00000008;
            }
            result.currencyCostPpe_ = currencyCostPpe_;
            if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
              to_bitField0_ |= 0x00000010;
            }
            result.conversionCost_ = conversionCost_;
            if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
              to_bitField0_ |= 0x00000020;
            }
            result.conversionCurrencyCost_ = conversionCurrencyCost_;
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
          }

          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures) {
              return mergeFrom((ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures other) {
            if (other == ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.getDefaultInstance()) return this;
            if (other.hasExpectedCpm()) {
              setExpectedCpm(other.getExpectedCpm());
            }
            if (other.hasCost()) {
              setCost(other.getCost());
            }
            if (other.hasCurrencyCost()) {
              setCurrencyCost(other.getCurrencyCost());
            }
            if (other.hasCurrencyCostPpe()) {
              setCurrencyCostPpe(other.getCurrencyCostPpe());
            }
            if (other.hasConversionCost()) {
              setConversionCost(other.getConversionCost());
            }
            if (other.hasConversionCurrencyCost()) {
              setConversionCurrencyCost(other.getConversionCurrencyCost());
            }
            this.mergeUnknownFields(other.getUnknownFields());
            return this;
          }

          public final boolean isInitialized() {
            return true;
          }

          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures) e.getUnfinishedMessage();
              throw e;
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }
          private int bitField0_;

          // optional uint32 expected_cpm = 1;
          private int expectedCpm_ ;
          /**
           * <code>optional uint32 expected_cpm = 1;</code>
           *
           * <pre>
           * ожидаемый CPM от показа
           * </pre>
           */
          public boolean hasExpectedCpm() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
          }
          /**
           * <code>optional uint32 expected_cpm = 1;</code>
           *
           * <pre>
           * ожидаемый CPM от показа
           * </pre>
           */
          public int getExpectedCpm() {
            return expectedCpm_;
          }
          /**
           * <code>optional uint32 expected_cpm = 1;</code>
           *
           * <pre>
           * ожидаемый CPM от показа
           * </pre>
           */
          public Builder setExpectedCpm(int value) {
            bitField0_ |= 0x00000001;
            expectedCpm_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional uint32 expected_cpm = 1;</code>
           *
           * <pre>
           * ожидаемый CPM от показа
           * </pre>
           */
          public Builder clearExpectedCpm() {
            bitField0_ = (bitField0_ & ~0x00000001);
            expectedCpm_ = 0;
            onChanged();
            return this;
          }

          // optional uint32 cost = 2;
          private int cost_ ;
          /**
           * <code>optional uint32 cost = 2;</code>
           *
           * <pre>
           * цена за данный тип события в копейках
           * </pre>
           */
          public boolean hasCost() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
          }
          /**
           * <code>optional uint32 cost = 2;</code>
           *
           * <pre>
           * цена за данный тип события в копейках
           * </pre>
           */
          public int getCost() {
            return cost_;
          }
          /**
           * <code>optional uint32 cost = 2;</code>
           *
           * <pre>
           * цена за данный тип события в копейках
           * </pre>
           */
          public Builder setCost(int value) {
            bitField0_ |= 0x00000002;
            cost_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional uint32 cost = 2;</code>
           *
           * <pre>
           * цена за данный тип события в копейках
           * </pre>
           */
          public Builder clearCost() {
            bitField0_ = (bitField0_ & ~0x00000002);
            cost_ = 0;
            onChanged();
            return this;
          }

          // optional uint32 currency_cost = 3;
          private int currencyCost_ ;
          /**
           * <code>optional uint32 currency_cost = 3;</code>
           *
           * <pre>
           * цена за данный тип события в 1/100 валюты
           * </pre>
           */
          public boolean hasCurrencyCost() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
          }
          /**
           * <code>optional uint32 currency_cost = 3;</code>
           *
           * <pre>
           * цена за данный тип события в 1/100 валюты
           * </pre>
           */
          public int getCurrencyCost() {
            return currencyCost_;
          }
          /**
           * <code>optional uint32 currency_cost = 3;</code>
           *
           * <pre>
           * цена за данный тип события в 1/100 валюты
           * </pre>
           */
          public Builder setCurrencyCost(int value) {
            bitField0_ |= 0x00000004;
            currencyCost_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional uint32 currency_cost = 3;</code>
           *
           * <pre>
           * цена за данный тип события в 1/100 валюты
           * </pre>
           */
          public Builder clearCurrencyCost() {
            bitField0_ = (bitField0_ & ~0x00000004);
            currencyCost_ = 0;
            onChanged();
            return this;
          }

          // optional uint32 currency_cost_ppe = 99;
          private int currencyCostPpe_ ;
          /**
           * <code>optional uint32 currency_cost_ppe = 99;</code>
           *
           * <pre>
           * стоимость платного события данного баннера в 1/100 валюты
           * </pre>
           */
          public boolean hasCurrencyCostPpe() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
          }
          /**
           * <code>optional uint32 currency_cost_ppe = 99;</code>
           *
           * <pre>
           * стоимость платного события данного баннера в 1/100 валюты
           * </pre>
           */
          public int getCurrencyCostPpe() {
            return currencyCostPpe_;
          }
          /**
           * <code>optional uint32 currency_cost_ppe = 99;</code>
           *
           * <pre>
           * стоимость платного события данного баннера в 1/100 валюты
           * </pre>
           */
          public Builder setCurrencyCostPpe(int value) {
            bitField0_ |= 0x00000008;
            currencyCostPpe_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional uint32 currency_cost_ppe = 99;</code>
           *
           * <pre>
           * стоимость платного события данного баннера в 1/100 валюты
           * </pre>
           */
          public Builder clearCurrencyCostPpe() {
            bitField0_ = (bitField0_ & ~0x00000008);
            currencyCostPpe_ = 0;
            onChanged();
            return this;
          }

          // optional uint32 conversion_cost = 90;
          private int conversionCost_ ;
          /**
           * <code>optional uint32 conversion_cost = 90;</code>
           *
           * <pre>
           * цена за конверсию в рублях (копейки)
           * </pre>
           */
          public boolean hasConversionCost() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
          }
          /**
           * <code>optional uint32 conversion_cost = 90;</code>
           *
           * <pre>
           * цена за конверсию в рублях (копейки)
           * </pre>
           */
          public int getConversionCost() {
            return conversionCost_;
          }
          /**
           * <code>optional uint32 conversion_cost = 90;</code>
           *
           * <pre>
           * цена за конверсию в рублях (копейки)
           * </pre>
           */
          public Builder setConversionCost(int value) {
            bitField0_ |= 0x00000010;
            conversionCost_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional uint32 conversion_cost = 90;</code>
           *
           * <pre>
           * цена за конверсию в рублях (копейки)
           * </pre>
           */
          public Builder clearConversionCost() {
            bitField0_ = (bitField0_ & ~0x00000010);
            conversionCost_ = 0;
            onChanged();
            return this;
          }

          // optional uint32 conversion_currency_cost = 91;
          private int conversionCurrencyCost_ ;
          /**
           * <code>optional uint32 conversion_currency_cost = 91;</code>
           *
           * <pre>
           * цена за конверсию в валюте (1/100 валюты)
           * </pre>
           */
          public boolean hasConversionCurrencyCost() {
            return ((bitField0_ & 0x00000020) == 0x00000020);
          }
          /**
           * <code>optional uint32 conversion_currency_cost = 91;</code>
           *
           * <pre>
           * цена за конверсию в валюте (1/100 валюты)
           * </pre>
           */
          public int getConversionCurrencyCost() {
            return conversionCurrencyCost_;
          }
          /**
           * <code>optional uint32 conversion_currency_cost = 91;</code>
           *
           * <pre>
           * цена за конверсию в валюте (1/100 валюты)
           * </pre>
           */
          public Builder setConversionCurrencyCost(int value) {
            bitField0_ |= 0x00000020;
            conversionCurrencyCost_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional uint32 conversion_currency_cost = 91;</code>
           *
           * <pre>
           * цена за конверсию в валюте (1/100 валюты)
           * </pre>
           */
          public Builder clearConversionCurrencyCost() {
            bitField0_ = (bitField0_ & ~0x00000020);
            conversionCurrencyCost_ = 0;
            onChanged();
            return this;
          }

          // @@protoc_insertion_point(builder_scope:ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures)
        }

        static {
          defaultInstance = new Figures(true);
          defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures)
      }

      public interface HistoryOrBuilder
          extends com.google.protobuf.MessageOrBuilder {

        // optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures src_figures = 1;
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures src_figures = 1;</code>
         *
         * <pre>
         * исходные цены до автоторгов                  (проставляет antifraud)
         * </pre>
         */
        boolean hasSrcFigures();
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures src_figures = 1;</code>
         *
         * <pre>
         * исходные цены до автоторгов                  (проставляет antifraud)
         * </pre>
         */
        ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures getSrcFigures();
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures src_figures = 1;</code>
         *
         * <pre>
         * исходные цены до автоторгов                  (проставляет antifraud)
         * </pre>
         */
        ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.FiguresOrBuilder getSrcFiguresOrBuilder();
      }
      /**
       * Protobuf type {@code ru.mail.go.webbase.TargetMsg.RTB_Banner.History}
       */
      public static final class History extends
          com.google.protobuf.GeneratedMessage
          implements HistoryOrBuilder {
        // Use History.newBuilder() to construct.
        private History(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
          super(builder);
          this.unknownFields = builder.getUnknownFields();
        }
        private History(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

        private static final History defaultInstance;
        public static History getDefaultInstance() {
          return defaultInstance;
        }

        public History getDefaultInstanceForType() {
          return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;
        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
            getUnknownFields() {
          return this.unknownFields;
        }
        private History(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          initFields();
          int mutable_bitField0_ = 0;
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(input, unknownFields,
                                         extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000001) == 0x00000001)) {
                    subBuilder = srcFigures_.toBuilder();
                  }
                  srcFigures_ = input.readMessage(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.PARSER, extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(srcFigures_);
                    srcFigures_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000001;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this);
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_History_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_History_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History.class, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History.Builder.class);
        }

        public static com.google.protobuf.Parser<History> PARSER =
            new com.google.protobuf.AbstractParser<History>() {
          public History parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new History(input, extensionRegistry);
          }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<History> getParserForType() {
          return PARSER;
        }

        private int bitField0_;
        // optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures src_figures = 1;
        public static final int SRC_FIGURES_FIELD_NUMBER = 1;
        private ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures srcFigures_;
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures src_figures = 1;</code>
         *
         * <pre>
         * исходные цены до автоторгов                  (проставляет antifraud)
         * </pre>
         */
        public boolean hasSrcFigures() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures src_figures = 1;</code>
         *
         * <pre>
         * исходные цены до автоторгов                  (проставляет antifraud)
         * </pre>
         */
        public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures getSrcFigures() {
          return srcFigures_;
        }
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures src_figures = 1;</code>
         *
         * <pre>
         * исходные цены до автоторгов                  (проставляет antifraud)
         * </pre>
         */
        public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.FiguresOrBuilder getSrcFiguresOrBuilder() {
          return srcFigures_;
        }

        private void initFields() {
          srcFigures_ = ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.getDefaultInstance();
        }
        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized != -1) return isInitialized == 1;

          memoizedIsInitialized = 1;
          return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          getSerializedSize();
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeMessage(1, srcFigures_);
          }
          getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;
        public int getSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(1, srcFigures_);
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSerializedSize = size;
          return size;
        }

        private static final long serialVersionUID = 0L;
        @java.lang.Override
        protected java.lang.Object writeReplace()
            throws java.io.ObjectStreamException {
          return super.writeReplace();
        }

        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return PARSER.parseFrom(input);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseFrom(input, extensionRegistry);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return PARSER.parseDelimitedFrom(input);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return PARSER.parseFrom(input);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() { return Builder.create(); }
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History prototype) {
          return newBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() { return newBuilder(this); }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code ru.mail.go.webbase.TargetMsg.RTB_Banner.History}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessage.Builder<Builder>
           implements ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.HistoryOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_History_descriptor;
          }

          protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_History_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History.class, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History.Builder.class);
          }

          // Construct using ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
              getSrcFiguresFieldBuilder();
            }
          }
          private static Builder create() {
            return new Builder();
          }

          public Builder clear() {
            super.clear();
            if (srcFiguresBuilder_ == null) {
              srcFigures_ = ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.getDefaultInstance();
            } else {
              srcFiguresBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000001);
            return this;
          }

          public Builder clone() {
            return create().mergeFrom(buildPartial());
          }

          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_History_descriptor;
          }

          public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History getDefaultInstanceForType() {
            return ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History.getDefaultInstance();
          }

          public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History build() {
            ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History buildPartial() {
            ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History result = new ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
              to_bitField0_ |= 0x00000001;
            }
            if (srcFiguresBuilder_ == null) {
              result.srcFigures_ = srcFigures_;
            } else {
              result.srcFigures_ = srcFiguresBuilder_.build();
            }
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
          }

          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History) {
              return mergeFrom((ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History other) {
            if (other == ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History.getDefaultInstance()) return this;
            if (other.hasSrcFigures()) {
              mergeSrcFigures(other.getSrcFigures());
            }
            this.mergeUnknownFields(other.getUnknownFields());
            return this;
          }

          public final boolean isInitialized() {
            return true;
          }

          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History) e.getUnfinishedMessage();
              throw e;
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }
          private int bitField0_;

          // optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures src_figures = 1;
          private ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures srcFigures_ = ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.getDefaultInstance();
          private com.google.protobuf.SingleFieldBuilder<
              ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.Builder, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.FiguresOrBuilder> srcFiguresBuilder_;
          /**
           * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures src_figures = 1;</code>
           *
           * <pre>
           * исходные цены до автоторгов                  (проставляет antifraud)
           * </pre>
           */
          public boolean hasSrcFigures() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
          }
          /**
           * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures src_figures = 1;</code>
           *
           * <pre>
           * исходные цены до автоторгов                  (проставляет antifraud)
           * </pre>
           */
          public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures getSrcFigures() {
            if (srcFiguresBuilder_ == null) {
              return srcFigures_;
            } else {
              return srcFiguresBuilder_.getMessage();
            }
          }
          /**
           * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures src_figures = 1;</code>
           *
           * <pre>
           * исходные цены до автоторгов                  (проставляет antifraud)
           * </pre>
           */
          public Builder setSrcFigures(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures value) {
            if (srcFiguresBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              srcFigures_ = value;
              onChanged();
            } else {
              srcFiguresBuilder_.setMessage(value);
            }
            bitField0_ |= 0x00000001;
            return this;
          }
          /**
           * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures src_figures = 1;</code>
           *
           * <pre>
           * исходные цены до автоторгов                  (проставляет antifraud)
           * </pre>
           */
          public Builder setSrcFigures(
              ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.Builder builderForValue) {
            if (srcFiguresBuilder_ == null) {
              srcFigures_ = builderForValue.build();
              onChanged();
            } else {
              srcFiguresBuilder_.setMessage(builderForValue.build());
            }
            bitField0_ |= 0x00000001;
            return this;
          }
          /**
           * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures src_figures = 1;</code>
           *
           * <pre>
           * исходные цены до автоторгов                  (проставляет antifraud)
           * </pre>
           */
          public Builder mergeSrcFigures(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures value) {
            if (srcFiguresBuilder_ == null) {
              if (((bitField0_ & 0x00000001) == 0x00000001) &&
                  srcFigures_ != ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.getDefaultInstance()) {
                srcFigures_ =
                  ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.newBuilder(srcFigures_).mergeFrom(value).buildPartial();
              } else {
                srcFigures_ = value;
              }
              onChanged();
            } else {
              srcFiguresBuilder_.mergeFrom(value);
            }
            bitField0_ |= 0x00000001;
            return this;
          }
          /**
           * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures src_figures = 1;</code>
           *
           * <pre>
           * исходные цены до автоторгов                  (проставляет antifraud)
           * </pre>
           */
          public Builder clearSrcFigures() {
            if (srcFiguresBuilder_ == null) {
              srcFigures_ = ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.getDefaultInstance();
              onChanged();
            } else {
              srcFiguresBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000001);
            return this;
          }
          /**
           * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures src_figures = 1;</code>
           *
           * <pre>
           * исходные цены до автоторгов                  (проставляет antifraud)
           * </pre>
           */
          public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.Builder getSrcFiguresBuilder() {
            bitField0_ |= 0x00000001;
            onChanged();
            return getSrcFiguresFieldBuilder().getBuilder();
          }
          /**
           * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures src_figures = 1;</code>
           *
           * <pre>
           * исходные цены до автоторгов                  (проставляет antifraud)
           * </pre>
           */
          public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.FiguresOrBuilder getSrcFiguresOrBuilder() {
            if (srcFiguresBuilder_ != null) {
              return srcFiguresBuilder_.getMessageOrBuilder();
            } else {
              return srcFigures_;
            }
          }
          /**
           * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures src_figures = 1;</code>
           *
           * <pre>
           * исходные цены до автоторгов                  (проставляет antifraud)
           * </pre>
           */
          private com.google.protobuf.SingleFieldBuilder<
              ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.Builder, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.FiguresOrBuilder> 
              getSrcFiguresFieldBuilder() {
            if (srcFiguresBuilder_ == null) {
              srcFiguresBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                  ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.Builder, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.FiguresOrBuilder>(
                      srcFigures_,
                      getParentForChildren(),
                      isClean());
              srcFigures_ = null;
            }
            return srcFiguresBuilder_;
          }

          // @@protoc_insertion_point(builder_scope:ru.mail.go.webbase.TargetMsg.RTB_Banner.History)
        }

        static {
          defaultInstance = new History(true);
          defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.TargetMsg.RTB_Banner.History)
      }

      public interface SecondPriceInfoOrBuilder
          extends com.google.protobuf.MessageOrBuilder {

        // optional uint32 a_block_cpm = 1;
        /**
         * <code>optional uint32 a_block_cpm = 1;</code>
         *
         * <pre>
         * суммарный a_block_cpm после автоторгов
         * </pre>
         */
        boolean hasABlockCpm();
        /**
         * <code>optional uint32 a_block_cpm = 1;</code>
         *
         * <pre>
         * суммарный a_block_cpm после автоторгов
         * </pre>
         */
        int getABlockCpm();

        // optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures figures = 2;
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures figures = 2;</code>
         *
         * <pre>
         * может быть как настоящим, так и пересчитанным
         * из общих денег через коэффициент живых денег
         * на площадке (зависит от настроек площадки)
         * </pre>
         */
        boolean hasFigures();
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures figures = 2;</code>
         *
         * <pre>
         * может быть как настоящим, так и пересчитанным
         * из общих денег через коэффициент живых денег
         * на площадке (зависит от настроек площадки)
         * </pre>
         */
        ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures getFigures();
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures figures = 2;</code>
         *
         * <pre>
         * может быть как настоящим, так и пересчитанным
         * из общих денег через коэффициент живых денег
         * на площадке (зависит от настроек площадки)
         * </pre>
         */
        ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.FiguresOrBuilder getFiguresOrBuilder();
      }
      /**
       * Protobuf type {@code ru.mail.go.webbase.TargetMsg.RTB_Banner.SecondPriceInfo}
       */
      public static final class SecondPriceInfo extends
          com.google.protobuf.GeneratedMessage
          implements SecondPriceInfoOrBuilder {
        // Use SecondPriceInfo.newBuilder() to construct.
        private SecondPriceInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
          super(builder);
          this.unknownFields = builder.getUnknownFields();
        }
        private SecondPriceInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

        private static final SecondPriceInfo defaultInstance;
        public static SecondPriceInfo getDefaultInstance() {
          return defaultInstance;
        }

        public SecondPriceInfo getDefaultInstanceForType() {
          return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;
        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
            getUnknownFields() {
          return this.unknownFields;
        }
        private SecondPriceInfo(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          initFields();
          int mutable_bitField0_ = 0;
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(input, unknownFields,
                                         extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  bitField0_ |= 0x00000001;
                  aBlockCpm_ = input.readUInt32();
                  break;
                }
                case 18: {
                  ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    subBuilder = figures_.toBuilder();
                  }
                  figures_ = input.readMessage(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.PARSER, extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(figures_);
                    figures_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000002;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this);
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_SecondPriceInfo_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_SecondPriceInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo.class, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo.Builder.class);
        }

        public static com.google.protobuf.Parser<SecondPriceInfo> PARSER =
            new com.google.protobuf.AbstractParser<SecondPriceInfo>() {
          public SecondPriceInfo parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new SecondPriceInfo(input, extensionRegistry);
          }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<SecondPriceInfo> getParserForType() {
          return PARSER;
        }

        private int bitField0_;
        // optional uint32 a_block_cpm = 1;
        public static final int A_BLOCK_CPM_FIELD_NUMBER = 1;
        private int aBlockCpm_;
        /**
         * <code>optional uint32 a_block_cpm = 1;</code>
         *
         * <pre>
         * суммарный a_block_cpm после автоторгов
         * </pre>
         */
        public boolean hasABlockCpm() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 a_block_cpm = 1;</code>
         *
         * <pre>
         * суммарный a_block_cpm после автоторгов
         * </pre>
         */
        public int getABlockCpm() {
          return aBlockCpm_;
        }

        // optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures figures = 2;
        public static final int FIGURES_FIELD_NUMBER = 2;
        private ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures figures_;
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures figures = 2;</code>
         *
         * <pre>
         * может быть как настоящим, так и пересчитанным
         * из общих денег через коэффициент живых денег
         * на площадке (зависит от настроек площадки)
         * </pre>
         */
        public boolean hasFigures() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures figures = 2;</code>
         *
         * <pre>
         * может быть как настоящим, так и пересчитанным
         * из общих денег через коэффициент живых денег
         * на площадке (зависит от настроек площадки)
         * </pre>
         */
        public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures getFigures() {
          return figures_;
        }
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures figures = 2;</code>
         *
         * <pre>
         * может быть как настоящим, так и пересчитанным
         * из общих денег через коэффициент живых денег
         * на площадке (зависит от настроек площадки)
         * </pre>
         */
        public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.FiguresOrBuilder getFiguresOrBuilder() {
          return figures_;
        }

        private void initFields() {
          aBlockCpm_ = 0;
          figures_ = ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.getDefaultInstance();
        }
        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized != -1) return isInitialized == 1;

          memoizedIsInitialized = 1;
          return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          getSerializedSize();
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeUInt32(1, aBlockCpm_);
          }
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeMessage(2, figures_);
          }
          getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;
        public int getSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(1, aBlockCpm_);
          }
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(2, figures_);
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSerializedSize = size;
          return size;
        }

        private static final long serialVersionUID = 0L;
        @java.lang.Override
        protected java.lang.Object writeReplace()
            throws java.io.ObjectStreamException {
          return super.writeReplace();
        }

        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return PARSER.parseFrom(input);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseFrom(input, extensionRegistry);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return PARSER.parseDelimitedFrom(input);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return PARSER.parseFrom(input);
        }
        public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() { return Builder.create(); }
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo prototype) {
          return newBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() { return newBuilder(this); }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code ru.mail.go.webbase.TargetMsg.RTB_Banner.SecondPriceInfo}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessage.Builder<Builder>
           implements ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfoOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_SecondPriceInfo_descriptor;
          }

          protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_SecondPriceInfo_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo.class, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo.Builder.class);
          }

          // Construct using ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
              getFiguresFieldBuilder();
            }
          }
          private static Builder create() {
            return new Builder();
          }

          public Builder clear() {
            super.clear();
            aBlockCpm_ = 0;
            bitField0_ = (bitField0_ & ~0x00000001);
            if (figuresBuilder_ == null) {
              figures_ = ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.getDefaultInstance();
            } else {
              figuresBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000002);
            return this;
          }

          public Builder clone() {
            return create().mergeFrom(buildPartial());
          }

          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_SecondPriceInfo_descriptor;
          }

          public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo getDefaultInstanceForType() {
            return ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo.getDefaultInstance();
          }

          public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo build() {
            ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo buildPartial() {
            ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo result = new ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
              to_bitField0_ |= 0x00000001;
            }
            result.aBlockCpm_ = aBlockCpm_;
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
              to_bitField0_ |= 0x00000002;
            }
            if (figuresBuilder_ == null) {
              result.figures_ = figures_;
            } else {
              result.figures_ = figuresBuilder_.build();
            }
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
          }

          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo) {
              return mergeFrom((ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo other) {
            if (other == ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo.getDefaultInstance()) return this;
            if (other.hasABlockCpm()) {
              setABlockCpm(other.getABlockCpm());
            }
            if (other.hasFigures()) {
              mergeFigures(other.getFigures());
            }
            this.mergeUnknownFields(other.getUnknownFields());
            return this;
          }

          public final boolean isInitialized() {
            return true;
          }

          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo) e.getUnfinishedMessage();
              throw e;
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }
          private int bitField0_;

          // optional uint32 a_block_cpm = 1;
          private int aBlockCpm_ ;
          /**
           * <code>optional uint32 a_block_cpm = 1;</code>
           *
           * <pre>
           * суммарный a_block_cpm после автоторгов
           * </pre>
           */
          public boolean hasABlockCpm() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
          }
          /**
           * <code>optional uint32 a_block_cpm = 1;</code>
           *
           * <pre>
           * суммарный a_block_cpm после автоторгов
           * </pre>
           */
          public int getABlockCpm() {
            return aBlockCpm_;
          }
          /**
           * <code>optional uint32 a_block_cpm = 1;</code>
           *
           * <pre>
           * суммарный a_block_cpm после автоторгов
           * </pre>
           */
          public Builder setABlockCpm(int value) {
            bitField0_ |= 0x00000001;
            aBlockCpm_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional uint32 a_block_cpm = 1;</code>
           *
           * <pre>
           * суммарный a_block_cpm после автоторгов
           * </pre>
           */
          public Builder clearABlockCpm() {
            bitField0_ = (bitField0_ & ~0x00000001);
            aBlockCpm_ = 0;
            onChanged();
            return this;
          }

          // optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures figures = 2;
          private ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures figures_ = ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.getDefaultInstance();
          private com.google.protobuf.SingleFieldBuilder<
              ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.Builder, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.FiguresOrBuilder> figuresBuilder_;
          /**
           * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures figures = 2;</code>
           *
           * <pre>
           * может быть как настоящим, так и пересчитанным
           * из общих денег через коэффициент живых денег
           * на площадке (зависит от настроек площадки)
           * </pre>
           */
          public boolean hasFigures() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
          }
          /**
           * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures figures = 2;</code>
           *
           * <pre>
           * может быть как настоящим, так и пересчитанным
           * из общих денег через коэффициент живых денег
           * на площадке (зависит от настроек площадки)
           * </pre>
           */
          public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures getFigures() {
            if (figuresBuilder_ == null) {
              return figures_;
            } else {
              return figuresBuilder_.getMessage();
            }
          }
          /**
           * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures figures = 2;</code>
           *
           * <pre>
           * может быть как настоящим, так и пересчитанным
           * из общих денег через коэффициент живых денег
           * на площадке (зависит от настроек площадки)
           * </pre>
           */
          public Builder setFigures(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures value) {
            if (figuresBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              figures_ = value;
              onChanged();
            } else {
              figuresBuilder_.setMessage(value);
            }
            bitField0_ |= 0x00000002;
            return this;
          }
          /**
           * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures figures = 2;</code>
           *
           * <pre>
           * может быть как настоящим, так и пересчитанным
           * из общих денег через коэффициент живых денег
           * на площадке (зависит от настроек площадки)
           * </pre>
           */
          public Builder setFigures(
              ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.Builder builderForValue) {
            if (figuresBuilder_ == null) {
              figures_ = builderForValue.build();
              onChanged();
            } else {
              figuresBuilder_.setMessage(builderForValue.build());
            }
            bitField0_ |= 0x00000002;
            return this;
          }
          /**
           * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures figures = 2;</code>
           *
           * <pre>
           * может быть как настоящим, так и пересчитанным
           * из общих денег через коэффициент живых денег
           * на площадке (зависит от настроек площадки)
           * </pre>
           */
          public Builder mergeFigures(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures value) {
            if (figuresBuilder_ == null) {
              if (((bitField0_ & 0x00000002) == 0x00000002) &&
                  figures_ != ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.getDefaultInstance()) {
                figures_ =
                  ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.newBuilder(figures_).mergeFrom(value).buildPartial();
              } else {
                figures_ = value;
              }
              onChanged();
            } else {
              figuresBuilder_.mergeFrom(value);
            }
            bitField0_ |= 0x00000002;
            return this;
          }
          /**
           * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures figures = 2;</code>
           *
           * <pre>
           * может быть как настоящим, так и пересчитанным
           * из общих денег через коэффициент живых денег
           * на площадке (зависит от настроек площадки)
           * </pre>
           */
          public Builder clearFigures() {
            if (figuresBuilder_ == null) {
              figures_ = ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.getDefaultInstance();
              onChanged();
            } else {
              figuresBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000002);
            return this;
          }
          /**
           * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures figures = 2;</code>
           *
           * <pre>
           * может быть как настоящим, так и пересчитанным
           * из общих денег через коэффициент живых денег
           * на площадке (зависит от настроек площадки)
           * </pre>
           */
          public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.Builder getFiguresBuilder() {
            bitField0_ |= 0x00000002;
            onChanged();
            return getFiguresFieldBuilder().getBuilder();
          }
          /**
           * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures figures = 2;</code>
           *
           * <pre>
           * может быть как настоящим, так и пересчитанным
           * из общих денег через коэффициент живых денег
           * на площадке (зависит от настроек площадки)
           * </pre>
           */
          public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.FiguresOrBuilder getFiguresOrBuilder() {
            if (figuresBuilder_ != null) {
              return figuresBuilder_.getMessageOrBuilder();
            } else {
              return figures_;
            }
          }
          /**
           * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.Figures figures = 2;</code>
           *
           * <pre>
           * может быть как настоящим, так и пересчитанным
           * из общих денег через коэффициент живых денег
           * на площадке (зависит от настроек площадки)
           * </pre>
           */
          private com.google.protobuf.SingleFieldBuilder<
              ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.Builder, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.FiguresOrBuilder> 
              getFiguresFieldBuilder() {
            if (figuresBuilder_ == null) {
              figuresBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                  ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Figures.Builder, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.FiguresOrBuilder>(
                      figures_,
                      getParentForChildren(),
                      isClean());
              figures_ = null;
            }
            return figuresBuilder_;
          }

          // @@protoc_insertion_point(builder_scope:ru.mail.go.webbase.TargetMsg.RTB_Banner.SecondPriceInfo)
        }

        static {
          defaultInstance = new SecondPriceInfo(true);
          defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.TargetMsg.RTB_Banner.SecondPriceInfo)
      }

      private int bitField0_;
      // optional uint32 cpm_limit = 1;
      public static final int CPM_LIMIT_FIELD_NUMBER = 1;
      private int cpmLimit_;
      /**
       * <code>optional uint32 cpm_limit = 1;</code>
       *
       * <pre>
       * лимит cpm объявления для автоторгов (в рублях) (проставляет bannerd)
       * </pre>
       */
      public boolean hasCpmLimit() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 cpm_limit = 1;</code>
       *
       * <pre>
       * лимит cpm объявления для автоторгов (в рублях) (проставляет bannerd)
       * </pre>
       */
      public int getCpmLimit() {
        return cpmLimit_;
      }

      // optional uint32 site_place_id = 4;
      public static final int SITE_PLACE_ID_FIELD_NUMBER = 4;
      private int sitePlaceId_;
      /**
       * <code>optional uint32 site_place_id = 4;</code>
       *
       * <pre>
       * нужно только для k*-режимов, но пока проставляем для всех
       * </pre>
       */
      public boolean hasSitePlaceId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 site_place_id = 4;</code>
       *
       * <pre>
       * нужно только для k*-режимов, но пока проставляем для всех
       * </pre>
       */
      public int getSitePlaceId() {
        return sitePlaceId_;
      }

      // optional uint32 trg_cpm = 2;
      public static final int TRG_CPM_FIELD_NUMBER = 2;
      private int trgCpm_;
      /**
       * <code>optional uint32 trg_cpm = 2;</code>
       *
       * <pre>
       * ставка за блок, которая торгуется в RTB        (проставляет bannerd)
       * </pre>
       */
      public boolean hasTrgCpm() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 trg_cpm = 2;</code>
       *
       * <pre>
       * ставка за блок, которая торгуется в RTB        (проставляет bannerd)
       * </pre>
       */
      public int getTrgCpm() {
        return trgCpm_;
      }

      // optional uint32 ssp_cpm = 3;
      public static final int SSP_CPM_FIELD_NUMBER = 3;
      private int sspCpm_;
      /**
       * <code>optional uint32 ssp_cpm = 3;</code>
       *
       * <pre>
       * равна rtb_block.a_block_cpm_trg, проставляется для целей дебага
       * </pre>
       */
      public boolean hasSspCpm() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 ssp_cpm = 3;</code>
       *
       * <pre>
       * равна rtb_block.a_block_cpm_trg, проставляется для целей дебага
       * </pre>
       */
      public int getSspCpm() {
        return sspCpm_;
      }

      // optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.History history = 6;
      public static final int HISTORY_FIELD_NUMBER = 6;
      private ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History history_;
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.History history = 6;</code>
       *
       * <pre>
       * история правки цен в антифроде               (проставляет antifraud)
       * </pre>
       */
      public boolean hasHistory() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.History history = 6;</code>
       *
       * <pre>
       * история правки цен в антифроде               (проставляет antifraud)
       * </pre>
       */
      public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History getHistory() {
        return history_;
      }
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.History history = 6;</code>
       *
       * <pre>
       * история правки цен в антифроде               (проставляет antifraud)
       * </pre>
       */
      public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.HistoryOrBuilder getHistoryOrBuilder() {
        return history_;
      }

      // optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.SecondPriceInfo second_price_info = 9;
      public static final int SECOND_PRICE_INFO_FIELD_NUMBER = 9;
      private ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo secondPriceInfo_;
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.SecondPriceInfo second_price_info = 9;</code>
       *
       * <pre>
       * информация для применения
       * </pre>
       */
      public boolean hasSecondPriceInfo() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.SecondPriceInfo second_price_info = 9;</code>
       *
       * <pre>
       * информация для применения
       * </pre>
       */
      public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo getSecondPriceInfo() {
        return secondPriceInfo_;
      }
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.SecondPriceInfo second_price_info = 9;</code>
       *
       * <pre>
       * информация для применения
       * </pre>
       */
      public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfoOrBuilder getSecondPriceInfoOrBuilder() {
        return secondPriceInfo_;
      }

      private void initFields() {
        cpmLimit_ = 0;
        sitePlaceId_ = 0;
        trgCpm_ = 0;
        sspCpm_ = 0;
        history_ = ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History.getDefaultInstance();
        secondPriceInfo_ = ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, cpmLimit_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeUInt32(2, trgCpm_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeUInt32(3, sspCpm_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeUInt32(4, sitePlaceId_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeMessage(6, history_);
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          output.writeMessage(9, secondPriceInfo_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, cpmLimit_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, trgCpm_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(3, sspCpm_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(4, sitePlaceId_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, history_);
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(9, secondPriceInfo_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code ru.mail.go.webbase.TargetMsg.RTB_Banner}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.mail.go.webbase.TargetProto.TargetMsg.RTB_BannerOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.class, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Builder.class);
        }

        // Construct using ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getHistoryFieldBuilder();
            getSecondPriceInfoFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          cpmLimit_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          sitePlaceId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          trgCpm_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          sspCpm_ = 0;
          bitField0_ = (bitField0_ & ~0x00000008);
          if (historyBuilder_ == null) {
            history_ = ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History.getDefaultInstance();
          } else {
            historyBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000010);
          if (secondPriceInfoBuilder_ == null) {
            secondPriceInfo_ = ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo.getDefaultInstance();
          } else {
            secondPriceInfoBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000020);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_descriptor;
        }

        public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner getDefaultInstanceForType() {
          return ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.getDefaultInstance();
        }

        public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner build() {
          ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner buildPartial() {
          ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner result = new ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.cpmLimit_ = cpmLimit_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.sitePlaceId_ = sitePlaceId_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.trgCpm_ = trgCpm_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.sspCpm_ = sspCpm_;
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          if (historyBuilder_ == null) {
            result.history_ = history_;
          } else {
            result.history_ = historyBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
            to_bitField0_ |= 0x00000020;
          }
          if (secondPriceInfoBuilder_ == null) {
            result.secondPriceInfo_ = secondPriceInfo_;
          } else {
            result.secondPriceInfo_ = secondPriceInfoBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner) {
            return mergeFrom((ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner other) {
          if (other == ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.getDefaultInstance()) return this;
          if (other.hasCpmLimit()) {
            setCpmLimit(other.getCpmLimit());
          }
          if (other.hasSitePlaceId()) {
            setSitePlaceId(other.getSitePlaceId());
          }
          if (other.hasTrgCpm()) {
            setTrgCpm(other.getTrgCpm());
          }
          if (other.hasSspCpm()) {
            setSspCpm(other.getSspCpm());
          }
          if (other.hasHistory()) {
            mergeHistory(other.getHistory());
          }
          if (other.hasSecondPriceInfo()) {
            mergeSecondPriceInfo(other.getSecondPriceInfo());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 cpm_limit = 1;
        private int cpmLimit_ ;
        /**
         * <code>optional uint32 cpm_limit = 1;</code>
         *
         * <pre>
         * лимит cpm объявления для автоторгов (в рублях) (проставляет bannerd)
         * </pre>
         */
        public boolean hasCpmLimit() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 cpm_limit = 1;</code>
         *
         * <pre>
         * лимит cpm объявления для автоторгов (в рублях) (проставляет bannerd)
         * </pre>
         */
        public int getCpmLimit() {
          return cpmLimit_;
        }
        /**
         * <code>optional uint32 cpm_limit = 1;</code>
         *
         * <pre>
         * лимит cpm объявления для автоторгов (в рублях) (проставляет bannerd)
         * </pre>
         */
        public Builder setCpmLimit(int value) {
          bitField0_ |= 0x00000001;
          cpmLimit_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 cpm_limit = 1;</code>
         *
         * <pre>
         * лимит cpm объявления для автоторгов (в рублях) (проставляет bannerd)
         * </pre>
         */
        public Builder clearCpmLimit() {
          bitField0_ = (bitField0_ & ~0x00000001);
          cpmLimit_ = 0;
          onChanged();
          return this;
        }

        // optional uint32 site_place_id = 4;
        private int sitePlaceId_ ;
        /**
         * <code>optional uint32 site_place_id = 4;</code>
         *
         * <pre>
         * нужно только для k*-режимов, но пока проставляем для всех
         * </pre>
         */
        public boolean hasSitePlaceId() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional uint32 site_place_id = 4;</code>
         *
         * <pre>
         * нужно только для k*-режимов, но пока проставляем для всех
         * </pre>
         */
        public int getSitePlaceId() {
          return sitePlaceId_;
        }
        /**
         * <code>optional uint32 site_place_id = 4;</code>
         *
         * <pre>
         * нужно только для k*-режимов, но пока проставляем для всех
         * </pre>
         */
        public Builder setSitePlaceId(int value) {
          bitField0_ |= 0x00000002;
          sitePlaceId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 site_place_id = 4;</code>
         *
         * <pre>
         * нужно только для k*-режимов, но пока проставляем для всех
         * </pre>
         */
        public Builder clearSitePlaceId() {
          bitField0_ = (bitField0_ & ~0x00000002);
          sitePlaceId_ = 0;
          onChanged();
          return this;
        }

        // optional uint32 trg_cpm = 2;
        private int trgCpm_ ;
        /**
         * <code>optional uint32 trg_cpm = 2;</code>
         *
         * <pre>
         * ставка за блок, которая торгуется в RTB        (проставляет bannerd)
         * </pre>
         */
        public boolean hasTrgCpm() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional uint32 trg_cpm = 2;</code>
         *
         * <pre>
         * ставка за блок, которая торгуется в RTB        (проставляет bannerd)
         * </pre>
         */
        public int getTrgCpm() {
          return trgCpm_;
        }
        /**
         * <code>optional uint32 trg_cpm = 2;</code>
         *
         * <pre>
         * ставка за блок, которая торгуется в RTB        (проставляет bannerd)
         * </pre>
         */
        public Builder setTrgCpm(int value) {
          bitField0_ |= 0x00000004;
          trgCpm_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 trg_cpm = 2;</code>
         *
         * <pre>
         * ставка за блок, которая торгуется в RTB        (проставляет bannerd)
         * </pre>
         */
        public Builder clearTrgCpm() {
          bitField0_ = (bitField0_ & ~0x00000004);
          trgCpm_ = 0;
          onChanged();
          return this;
        }

        // optional uint32 ssp_cpm = 3;
        private int sspCpm_ ;
        /**
         * <code>optional uint32 ssp_cpm = 3;</code>
         *
         * <pre>
         * равна rtb_block.a_block_cpm_trg, проставляется для целей дебага
         * </pre>
         */
        public boolean hasSspCpm() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional uint32 ssp_cpm = 3;</code>
         *
         * <pre>
         * равна rtb_block.a_block_cpm_trg, проставляется для целей дебага
         * </pre>
         */
        public int getSspCpm() {
          return sspCpm_;
        }
        /**
         * <code>optional uint32 ssp_cpm = 3;</code>
         *
         * <pre>
         * равна rtb_block.a_block_cpm_trg, проставляется для целей дебага
         * </pre>
         */
        public Builder setSspCpm(int value) {
          bitField0_ |= 0x00000008;
          sspCpm_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 ssp_cpm = 3;</code>
         *
         * <pre>
         * равна rtb_block.a_block_cpm_trg, проставляется для целей дебага
         * </pre>
         */
        public Builder clearSspCpm() {
          bitField0_ = (bitField0_ & ~0x00000008);
          sspCpm_ = 0;
          onChanged();
          return this;
        }

        // optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.History history = 6;
        private ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History history_ = ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History.Builder, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.HistoryOrBuilder> historyBuilder_;
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.History history = 6;</code>
         *
         * <pre>
         * история правки цен в антифроде               (проставляет antifraud)
         * </pre>
         */
        public boolean hasHistory() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.History history = 6;</code>
         *
         * <pre>
         * история правки цен в антифроде               (проставляет antifraud)
         * </pre>
         */
        public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History getHistory() {
          if (historyBuilder_ == null) {
            return history_;
          } else {
            return historyBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.History history = 6;</code>
         *
         * <pre>
         * история правки цен в антифроде               (проставляет antifraud)
         * </pre>
         */
        public Builder setHistory(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History value) {
          if (historyBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            history_ = value;
            onChanged();
          } else {
            historyBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.History history = 6;</code>
         *
         * <pre>
         * история правки цен в антифроде               (проставляет antifraud)
         * </pre>
         */
        public Builder setHistory(
            ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History.Builder builderForValue) {
          if (historyBuilder_ == null) {
            history_ = builderForValue.build();
            onChanged();
          } else {
            historyBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.History history = 6;</code>
         *
         * <pre>
         * история правки цен в антифроде               (проставляет antifraud)
         * </pre>
         */
        public Builder mergeHistory(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History value) {
          if (historyBuilder_ == null) {
            if (((bitField0_ & 0x00000010) == 0x00000010) &&
                history_ != ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History.getDefaultInstance()) {
              history_ =
                ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History.newBuilder(history_).mergeFrom(value).buildPartial();
            } else {
              history_ = value;
            }
            onChanged();
          } else {
            historyBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.History history = 6;</code>
         *
         * <pre>
         * история правки цен в антифроде               (проставляет antifraud)
         * </pre>
         */
        public Builder clearHistory() {
          if (historyBuilder_ == null) {
            history_ = ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History.getDefaultInstance();
            onChanged();
          } else {
            historyBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.History history = 6;</code>
         *
         * <pre>
         * история правки цен в антифроде               (проставляет antifraud)
         * </pre>
         */
        public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History.Builder getHistoryBuilder() {
          bitField0_ |= 0x00000010;
          onChanged();
          return getHistoryFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.History history = 6;</code>
         *
         * <pre>
         * история правки цен в антифроде               (проставляет antifraud)
         * </pre>
         */
        public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.HistoryOrBuilder getHistoryOrBuilder() {
          if (historyBuilder_ != null) {
            return historyBuilder_.getMessageOrBuilder();
          } else {
            return history_;
          }
        }
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.History history = 6;</code>
         *
         * <pre>
         * история правки цен в антифроде               (проставляет antifraud)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History.Builder, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.HistoryOrBuilder> 
            getHistoryFieldBuilder() {
          if (historyBuilder_ == null) {
            historyBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.History.Builder, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.HistoryOrBuilder>(
                    history_,
                    getParentForChildren(),
                    isClean());
            history_ = null;
          }
          return historyBuilder_;
        }

        // optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.SecondPriceInfo second_price_info = 9;
        private ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo secondPriceInfo_ = ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo.Builder, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfoOrBuilder> secondPriceInfoBuilder_;
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.SecondPriceInfo second_price_info = 9;</code>
         *
         * <pre>
         * информация для применения
         * </pre>
         */
        public boolean hasSecondPriceInfo() {
          return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.SecondPriceInfo second_price_info = 9;</code>
         *
         * <pre>
         * информация для применения
         * </pre>
         */
        public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo getSecondPriceInfo() {
          if (secondPriceInfoBuilder_ == null) {
            return secondPriceInfo_;
          } else {
            return secondPriceInfoBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.SecondPriceInfo second_price_info = 9;</code>
         *
         * <pre>
         * информация для применения
         * </pre>
         */
        public Builder setSecondPriceInfo(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo value) {
          if (secondPriceInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            secondPriceInfo_ = value;
            onChanged();
          } else {
            secondPriceInfoBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.SecondPriceInfo second_price_info = 9;</code>
         *
         * <pre>
         * информация для применения
         * </pre>
         */
        public Builder setSecondPriceInfo(
            ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo.Builder builderForValue) {
          if (secondPriceInfoBuilder_ == null) {
            secondPriceInfo_ = builderForValue.build();
            onChanged();
          } else {
            secondPriceInfoBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.SecondPriceInfo second_price_info = 9;</code>
         *
         * <pre>
         * информация для применения
         * </pre>
         */
        public Builder mergeSecondPriceInfo(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo value) {
          if (secondPriceInfoBuilder_ == null) {
            if (((bitField0_ & 0x00000020) == 0x00000020) &&
                secondPriceInfo_ != ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo.getDefaultInstance()) {
              secondPriceInfo_ =
                ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo.newBuilder(secondPriceInfo_).mergeFrom(value).buildPartial();
            } else {
              secondPriceInfo_ = value;
            }
            onChanged();
          } else {
            secondPriceInfoBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.SecondPriceInfo second_price_info = 9;</code>
         *
         * <pre>
         * информация для применения
         * </pre>
         */
        public Builder clearSecondPriceInfo() {
          if (secondPriceInfoBuilder_ == null) {
            secondPriceInfo_ = ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo.getDefaultInstance();
            onChanged();
          } else {
            secondPriceInfoBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000020);
          return this;
        }
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.SecondPriceInfo second_price_info = 9;</code>
         *
         * <pre>
         * информация для применения
         * </pre>
         */
        public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo.Builder getSecondPriceInfoBuilder() {
          bitField0_ |= 0x00000020;
          onChanged();
          return getSecondPriceInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.SecondPriceInfo second_price_info = 9;</code>
         *
         * <pre>
         * информация для применения
         * </pre>
         */
        public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfoOrBuilder getSecondPriceInfoOrBuilder() {
          if (secondPriceInfoBuilder_ != null) {
            return secondPriceInfoBuilder_.getMessageOrBuilder();
          } else {
            return secondPriceInfo_;
          }
        }
        /**
         * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner.SecondPriceInfo second_price_info = 9;</code>
         *
         * <pre>
         * информация для применения
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo.Builder, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfoOrBuilder> 
            getSecondPriceInfoFieldBuilder() {
          if (secondPriceInfoBuilder_ == null) {
            secondPriceInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfo.Builder, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.SecondPriceInfoOrBuilder>(
                    secondPriceInfo_,
                    getParentForChildren(),
                    isClean());
            secondPriceInfo_ = null;
          }
          return secondPriceInfoBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:ru.mail.go.webbase.TargetMsg.RTB_Banner)
      }

      static {
        defaultInstance = new RTB_Banner(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.TargetMsg.RTB_Banner)
    }

    private int bitField0_;
    private int bitField1_;
    private int bitField2_;
    // optional uint32 repeat = 17;
    public static final int REPEAT_FIELD_NUMBER = 17;
    private int repeat_;
    /**
     * <code>optional uint32 repeat = 17;</code>
     *
     * <pre>
     * вместо одного события имеем repeat+1 одинаковых событий (для непоказов)
     * </pre>
     */
    public boolean hasRepeat() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 repeat = 17;</code>
     *
     * <pre>
     * вместо одного события имеем repeat+1 одинаковых событий (для непоказов)
     * </pre>
     */
    public int getRepeat() {
      return repeat_;
    }

    // optional uint32 pad_id = 1;
    public static final int PAD_ID_FIELD_NUMBER = 1;
    private int padId_;
    /**
     * <code>optional uint32 pad_id = 1;</code>
     *
     * <pre>
     * площадка
     * </pre>
     */
    public boolean hasPadId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 pad_id = 1;</code>
     *
     * <pre>
     * площадка
     * </pre>
     */
    public int getPadId() {
      return padId_;
    }

    // optional uint32 advertiser_id = 4;
    public static final int ADVERTISER_ID_FIELD_NUMBER = 4;
    private int advertiserId_;
    /**
     * <code>optional uint32 advertiser_id = 4;</code>
     *
     * <pre>
     * юзер-рекламодатель
     * </pre>
     */
    public boolean hasAdvertiserId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 advertiser_id = 4;</code>
     *
     * <pre>
     * юзер-рекламодатель
     * </pre>
     */
    public int getAdvertiserId() {
      return advertiserId_;
    }

    // optional uint32 package_id = 5;
    public static final int PACKAGE_ID_FIELD_NUMBER = 5;
    private int packageId_;
    /**
     * <code>optional uint32 package_id = 5;</code>
     *
     * <pre>
     * пакет
     * </pre>
     */
    public boolean hasPackageId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 package_id = 5;</code>
     *
     * <pre>
     * пакет
     * </pre>
     */
    public int getPackageId() {
      return packageId_;
    }

    // optional uint32 misc_id = 6;
    public static final int MISC_ID_FIELD_NUMBER = 6;
    private int miscId_;
    /**
     * <code>optional uint32 misc_id = 6;</code>
     *
     * <pre>
     * misc_id (идентификатор "способа подбора" - kiwid там или что-то еще)
     * </pre>
     */
    public boolean hasMiscId() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 misc_id = 6;</code>
     *
     * <pre>
     * misc_id (идентификатор "способа подбора" - kiwid там или что-то еще)
     * </pre>
     */
    public int getMiscId() {
      return miscId_;
    }

    // optional uint32 campaign_id = 8;
    public static final int CAMPAIGN_ID_FIELD_NUMBER = 8;
    private int campaignId_;
    /**
     * <code>optional uint32 campaign_id = 8;</code>
     *
     * <pre>
     * кампания
     * </pre>
     */
    public boolean hasCampaignId() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 campaign_id = 8;</code>
     *
     * <pre>
     * кампания
     * </pre>
     */
    public int getCampaignId() {
      return campaignId_;
    }

    // optional uint32 server_id = 9;
    public static final int SERVER_ID_FIELD_NUMBER = 9;
    private int serverId_;
    /**
     * <code>optional uint32 server_id = 9;</code>
     *
     * <pre>
     * id баннерного демона
     * </pre>
     */
    public boolean hasServerId() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 server_id = 9;</code>
     *
     * <pre>
     * id баннерного демона
     * </pre>
     */
    public int getServerId() {
      return serverId_;
    }

    // optional uint32 order_number = 12;
    public static final int ORDER_NUMBER_FIELD_NUMBER = 12;
    private int orderNumber_;
    /**
     * <code>optional uint32 order_number = 12;</code>
     *
     * <pre>
     * порядковый номер в выдаче
     * </pre>
     */
    public boolean hasOrderNumber() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 order_number = 12;</code>
     *
     * <pre>
     * порядковый номер в выдаче
     * </pre>
     */
    public int getOrderNumber() {
      return orderNumber_;
    }

    // optional fixed32 campaign_version = 16;
    public static final int CAMPAIGN_VERSION_FIELD_NUMBER = 16;
    private int campaignVersion_;
    /**
     * <code>optional fixed32 campaign_version = 16;</code>
     *
     * <pre>
     * версия кампании в момент выполнения запроса
     * </pre>
     */
    public boolean hasCampaignVersion() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional fixed32 campaign_version = 16;</code>
     *
     * <pre>
     * версия кампании в момент выполнения запроса
     * </pre>
     */
    public int getCampaignVersion() {
      return campaignVersion_;
    }

    // optional uint32 ctr_origin = 11;
    public static final int CTR_ORIGIN_FIELD_NUMBER = 11;
    private int ctrOrigin_;
    /**
     * <code>optional uint32 ctr_origin = 11;</code>
     *
     * <pre>
     * происхождение ctr
     * </pre>
     */
    public boolean hasCtrOrigin() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 ctr_origin = 11;</code>
     *
     * <pre>
     * происхождение ctr
     * </pre>
     */
    public int getCtrOrigin() {
      return ctrOrigin_;
    }

    // optional float model_ctr = 14;
    public static final int MODEL_CTR_FIELD_NUMBER = 14;
    private float modelCtr_;
    /**
     * <code>optional float model_ctr = 14;</code>
     *
     * <pre>
     * предсказанный моделью ctr.
     * </pre>
     */
    public boolean hasModelCtr() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional float model_ctr = 14;</code>
     *
     * <pre>
     * предсказанный моделью ctr.
     * </pre>
     */
    public float getModelCtr() {
      return modelCtr_;
    }

    // optional float expected_ctr = 15;
    public static final int EXPECTED_CTR_FIELD_NUMBER = 15;
    private float expectedCtr_;
    /**
     * <code>optional float expected_ctr = 15;</code>
     *
     * <pre>
     * ожидаемый ctr (тот, что участвует в аукционе). Не равен model_ctr из-за различных коррекций
     * </pre>
     */
    public boolean hasExpectedCtr() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional float expected_ctr = 15;</code>
     *
     * <pre>
     * ожидаемый ctr (тот, что участвует в аукционе). Не равен model_ctr из-за различных коррекций
     * </pre>
     */
    public float getExpectedCtr() {
      return expectedCtr_;
    }

    // optional float expected_clicks_cr = 85;
    public static final int EXPECTED_CLICKS_CR_FIELD_NUMBER = 85;
    private float expectedClicksCr_;
    /**
     * <code>optional float expected_clicks_cr = 85;</code>
     *
     * <pre>
     * ожидаемая доля конверсий для клика
     * </pre>
     */
    public boolean hasExpectedClicksCr() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional float expected_clicks_cr = 85;</code>
     *
     * <pre>
     * ожидаемая доля конверсий для клика
     * </pre>
     */
    public float getExpectedClicksCr() {
      return expectedClicksCr_;
    }

    // optional uint32 expected_cpm = 7;
    public static final int EXPECTED_CPM_FIELD_NUMBER = 7;
    private int expectedCpm_;
    /**
     * <code>optional uint32 expected_cpm = 7;</code>
     *
     * <pre>
     * ожидаемый cpm этого показа (cost * ctr * 1000) в рублях
     * </pre>
     */
    public boolean hasExpectedCpm() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional uint32 expected_cpm = 7;</code>
     *
     * <pre>
     * ожидаемый cpm этого показа (cost * ctr * 1000) в рублях
     * </pre>
     */
    public int getExpectedCpm() {
      return expectedCpm_;
    }

    // optional uint32 cost = 3;
    public static final int COST_FIELD_NUMBER = 3;
    private int cost_;
    /**
     * <code>optional uint32 cost = 3;</code>
     *
     * <pre>
     * цена за данное событие в копейках (в случае показа - цена за 1000 штук)
     * </pre>
     */
    public boolean hasCost() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional uint32 cost = 3;</code>
     *
     * <pre>
     * цена за данное событие в копейках (в случае показа - цена за 1000 штук)
     * </pre>
     */
    public int getCost() {
      return cost_;
    }

    // optional uint32 currency_cost = 19;
    public static final int CURRENCY_COST_FIELD_NUMBER = 19;
    private int currencyCost_;
    /**
     * <code>optional uint32 currency_cost = 19;</code>
     *
     * <pre>
     * цена за данное событие в 1/100 валюты (в случае показа - цена за 1000 штук)
     * </pre>
     */
    public boolean hasCurrencyCost() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional uint32 currency_cost = 19;</code>
     *
     * <pre>
     * цена за данное событие в 1/100 валюты (в случае показа - цена за 1000 штук)
     * </pre>
     */
    public int getCurrencyCost() {
      return currencyCost_;
    }

    // optional uint32 currency_id = 26;
    public static final int CURRENCY_ID_FIELD_NUMBER = 26;
    private int currencyId_;
    /**
     * <code>optional uint32 currency_id = 26;</code>
     *
     * <pre>
     * идентификатор валюты пользователя
     * </pre>
     */
    public boolean hasCurrencyId() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional uint32 currency_id = 26;</code>
     *
     * <pre>
     * идентификатор валюты пользователя
     * </pre>
     */
    public int getCurrencyId() {
      return currencyId_;
    }

    // optional float currency_rate = 97 [default = 1];
    public static final int CURRENCY_RATE_FIELD_NUMBER = 97;
    private float currencyRate_;
    /**
     * <code>optional float currency_rate = 97 [default = 1];</code>
     *
     * <pre>
     * курс валюты на момент подбора
     * </pre>
     */
    public boolean hasCurrencyRate() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional float currency_rate = 97 [default = 1];</code>
     *
     * <pre>
     * курс валюты на момент подбора
     * </pre>
     */
    public float getCurrencyRate() {
      return currencyRate_;
    }

    // optional uint32 paid_ev_type = 96;
    public static final int PAID_EV_TYPE_FIELD_NUMBER = 96;
    private int paidEvType_;
    /**
     * <code>optional uint32 paid_ev_type = 96;</code>
     *
     * <pre>
     * тип события, за которое снимают деньги в данном баннере
     * </pre>
     */
    public boolean hasPaidEvType() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional uint32 paid_ev_type = 96;</code>
     *
     * <pre>
     * тип события, за которое снимают деньги в данном баннере
     * </pre>
     */
    public int getPaidEvType() {
      return paidEvType_;
    }

    // optional uint32 paid_banner_event = 113;
    public static final int PAID_BANNER_EVENT_FIELD_NUMBER = 113;
    private int paidBannerEvent_;
    /**
     * <code>optional uint32 paid_banner_event = 113;</code>
     *
     * <pre>
     * тип кастомного события в случае paid_ev_type = 10
     * </pre>
     */
    public boolean hasPaidBannerEvent() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional uint32 paid_banner_event = 113;</code>
     *
     * <pre>
     * тип кастомного события в случае paid_ev_type = 10
     * </pre>
     */
    public int getPaidBannerEvent() {
      return paidBannerEvent_;
    }

    // optional uint32 currency_cost_ppe = 99;
    public static final int CURRENCY_COST_PPE_FIELD_NUMBER = 99;
    private int currencyCostPpe_;
    /**
     * <code>optional uint32 currency_cost_ppe = 99;</code>
     *
     * <pre>
     * стоимость события типа paid_ev_type в 1/100 валюты
     * </pre>
     */
    public boolean hasCurrencyCostPpe() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional uint32 currency_cost_ppe = 99;</code>
     *
     * <pre>
     * стоимость события типа paid_ev_type в 1/100 валюты
     * </pre>
     */
    public int getCurrencyCostPpe() {
      return currencyCostPpe_;
    }

    // optional uint32 currency_cost_per_goal_for_ocpm = 100 [deprecated = true];
    public static final int CURRENCY_COST_PER_GOAL_FOR_OCPM_FIELD_NUMBER = 100;
    private int currencyCostPerGoalForOcpm_;
    /**
     * <code>optional uint32 currency_cost_per_goal_for_ocpm = 100 [deprecated = true];</code>
     *
     * <pre>
     * стоимость конверсии для ocpm баннера
     * </pre>
     */
    @java.lang.Deprecated public boolean hasCurrencyCostPerGoalForOcpm() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional uint32 currency_cost_per_goal_for_ocpm = 100 [deprecated = true];</code>
     *
     * <pre>
     * стоимость конверсии для ocpm баннера
     * </pre>
     */
    @java.lang.Deprecated public int getCurrencyCostPerGoalForOcpm() {
      return currencyCostPerGoalForOcpm_;
    }

    // optional uint32 currency_base_ppe = 101;
    public static final int CURRENCY_BASE_PPE_FIELD_NUMBER = 101;
    private int currencyBasePpe_;
    /**
     * <code>optional uint32 currency_base_ppe = 101;</code>
     *
     * <pre>
     * цена за событие из базы типа paid_ev_type в 1/100 валюты
     * </pre>
     */
    public boolean hasCurrencyBasePpe() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional uint32 currency_base_ppe = 101;</code>
     *
     * <pre>
     * цена за событие из базы типа paid_ev_type в 1/100 валюты
     * </pre>
     */
    public int getCurrencyBasePpe() {
      return currencyBasePpe_;
    }

    // optional int32 priced_ev_type = 115 [default = -1];
    public static final int PRICED_EV_TYPE_FIELD_NUMBER = 115;
    private int pricedEvType_;
    /**
     * <code>optional int32 priced_ev_type = 115 [default = -1];</code>
     */
    public boolean hasPricedEvType() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional int32 priced_ev_type = 115 [default = -1];</code>
     */
    public int getPricedEvType() {
      return pricedEvType_;
    }

    // optional uint32 priced_banner_event = 116;
    public static final int PRICED_BANNER_EVENT_FIELD_NUMBER = 116;
    private int pricedBannerEvent_;
    /**
     * <code>optional uint32 priced_banner_event = 116;</code>
     *
     * <pre>
     * тип события, за которое выставляется цена в данном баннере
     * выставляется только если не равен paid_ev_type
     * сейчас это только в случае oCPM
     * !! Внимание !! Невыставленное это поле не означает 0!
     * Чтобы не путались, по-дефолту задается значение -1
     * Следующие три поля выставляются только при выставленном priced_ev_type
     * </pre>
     */
    public boolean hasPricedBannerEvent() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional uint32 priced_banner_event = 116;</code>
     *
     * <pre>
     * тип события, за которое выставляется цена в данном баннере
     * выставляется только если не равен paid_ev_type
     * сейчас это только в случае oCPM
     * !! Внимание !! Невыставленное это поле не означает 0!
     * Чтобы не путались, по-дефолту задается значение -1
     * Следующие три поля выставляются только при выставленном priced_ev_type
     * </pre>
     */
    public int getPricedBannerEvent() {
      return pricedBannerEvent_;
    }

    // optional uint32 currency_cost_ppre = 117;
    public static final int CURRENCY_COST_PPRE_FIELD_NUMBER = 117;
    private int currencyCostPpre_;
    /**
     * <code>optional uint32 currency_cost_ppre = 117;</code>
     *
     * <pre>
     * стоимость события типа priced_ev_type в 1/100 валюты
     * </pre>
     */
    public boolean hasCurrencyCostPpre() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional uint32 currency_cost_ppre = 117;</code>
     *
     * <pre>
     * стоимость события типа priced_ev_type в 1/100 валюты
     * </pre>
     */
    public int getCurrencyCostPpre() {
      return currencyCostPpre_;
    }

    // optional uint32 currency_base_ppre = 118;
    public static final int CURRENCY_BASE_PPRE_FIELD_NUMBER = 118;
    private int currencyBasePpre_;
    /**
     * <code>optional uint32 currency_base_ppre = 118;</code>
     *
     * <pre>
     * цена за событие из базы типа priced_ev_type в 1/100 валюты
     * </pre>
     */
    public boolean hasCurrencyBasePpre() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional uint32 currency_base_ppre = 118;</code>
     *
     * <pre>
     * цена за событие из базы типа priced_ev_type в 1/100 валюты
     * </pre>
     */
    public int getCurrencyBasePpre() {
      return currencyBasePpre_;
    }

    // optional uint32 src_currency_cost = 109;
    public static final int SRC_CURRENCY_COST_FIELD_NUMBER = 109;
    private int srcCurrencyCost_;
    /**
     * <code>optional uint32 src_currency_cost = 109;</code>
     *
     * <pre>
     * исходная цена вирального события или клика для события 1080
     * </pre>
     */
    public boolean hasSrcCurrencyCost() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional uint32 src_currency_cost = 109;</code>
     *
     * <pre>
     * исходная цена вирального события или клика для события 1080
     * </pre>
     */
    public int getSrcCurrencyCost() {
      return srcCurrencyCost_;
    }

    // optional uint32 src_event_type = 114;
    public static final int SRC_EVENT_TYPE_FIELD_NUMBER = 114;
    private int srcEventType_;
    /**
     * <code>optional uint32 src_event_type = 114;</code>
     *
     * <pre>
     * исходный ev_type (или banner_event для ev_type=10) для событий 1070 и 1080
     * </pre>
     */
    public boolean hasSrcEventType() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional uint32 src_event_type = 114;</code>
     *
     * <pre>
     * исходный ev_type (или banner_event для ev_type=10) для событий 1070 и 1080
     * </pre>
     */
    public int getSrcEventType() {
      return srcEventType_;
    }

    // repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;
    public static final int TPS_COSTS_FIELD_NUMBER = 27;
    private java.util.List<ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost> tpsCosts_;
    /**
     * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
     *
     * <pre>
     * списания за услуги Third-Party services
     * </pre>
     */
    public java.util.List<ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost> getTpsCostsList() {
      return tpsCosts_;
    }
    /**
     * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
     *
     * <pre>
     * списания за услуги Third-Party services
     * </pre>
     */
    public java.util.List<? extends ru.mail.go.webbase.TargetProto.TargetMsg.TPS_costOrBuilder> 
        getTpsCostsOrBuilderList() {
      return tpsCosts_;
    }
    /**
     * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
     *
     * <pre>
     * списания за услуги Third-Party services
     * </pre>
     */
    public int getTpsCostsCount() {
      return tpsCosts_.size();
    }
    /**
     * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
     *
     * <pre>
     * списания за услуги Third-Party services
     * </pre>
     */
    public ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost getTpsCosts(int index) {
      return tpsCosts_.get(index);
    }
    /**
     * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
     *
     * <pre>
     * списания за услуги Third-Party services
     * </pre>
     */
    public ru.mail.go.webbase.TargetProto.TargetMsg.TPS_costOrBuilder getTpsCostsOrBuilder(
        int index) {
      return tpsCosts_.get(index);
    }

    // optional uint32 geo = 20;
    public static final int GEO_FIELD_NUMBER = 20;
    private int geo_;
    /**
     * <code>optional uint32 geo = 20;</code>
     *
     * <pre>
     * geo полученной заменой региона на регион из пользователького профиля
     * </pre>
     */
    public boolean hasGeo() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional uint32 geo = 20;</code>
     *
     * <pre>
     * geo полученной заменой региона на регион из пользователького профиля
     * </pre>
     */
    public int getGeo() {
      return geo_;
    }

    // optional uint32 req_geo = 81;
    public static final int REQ_GEO_FIELD_NUMBER = 81;
    private int reqGeo_;
    /**
     * <code>optional uint32 req_geo = 81;</code>
     *
     * <pre>
     * geo пришедшее в запросе без каких-либо подмен
     * </pre>
     */
    public boolean hasReqGeo() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional uint32 req_geo = 81;</code>
     *
     * <pre>
     * geo пришедшее в запросе без каких-либо подмен
     * </pre>
     */
    public int getReqGeo() {
      return reqGeo_;
    }

    // optional fixed64 impression_id = 21;
    public static final int IMPRESSION_ID_FIELD_NUMBER = 21;
    private long impressionId_;
    /**
     * <code>optional fixed64 impression_id = 21;</code>
     *
     * <pre>
     * идентификатор запроса
     * </pre>
     */
    public boolean hasImpressionId() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional fixed64 impression_id = 21;</code>
     *
     * <pre>
     * идентификатор запроса
     * </pre>
     */
    public long getImpressionId() {
      return impressionId_;
    }

    // optional fixed64 original_impression_id = 77;
    public static final int ORIGINAL_IMPRESSION_ID_FIELD_NUMBER = 77;
    private long originalImpressionId_;
    /**
     * <code>optional fixed64 original_impression_id = 77;</code>
     *
     * <pre>
     * идентификатор оригинального запроса
     * </pre>
     */
    public boolean hasOriginalImpressionId() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional fixed64 original_impression_id = 77;</code>
     *
     * <pre>
     * идентификатор оригинального запроса
     * </pre>
     */
    public long getOriginalImpressionId() {
      return originalImpressionId_;
    }

    // optional fixed32 original_req_ts = 78;
    public static final int ORIGINAL_REQ_TS_FIELD_NUMBER = 78;
    private int originalReqTs_;
    /**
     * <code>optional fixed32 original_req_ts = 78;</code>
     *
     * <pre>
     * время оригинального запроса
     * </pre>
     */
    public boolean hasOriginalReqTs() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional fixed32 original_req_ts = 78;</code>
     *
     * <pre>
     * время оригинального запроса
     * </pre>
     */
    public int getOriginalReqTs() {
      return originalReqTs_;
    }

    // optional uint32 subrequest_id = 22;
    public static final int SUBREQUEST_ID_FIELD_NUMBER = 22;
    private int subrequestId_;
    /**
     * <code>optional uint32 subrequest_id = 22;</code>
     *
     * <pre>
     * идентификатор подзапроса (для множественных запросов)
     * </pre>
     */
    public boolean hasSubrequestId() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 subrequest_id = 22;</code>
     *
     * <pre>
     * идентификатор подзапроса (для множественных запросов)
     * </pre>
     */
    public int getSubrequestId() {
      return subrequestId_;
    }

    // optional fixed32 req_ts = 2;
    public static final int REQ_TS_FIELD_NUMBER = 2;
    private int reqTs_;
    /**
     * <code>optional fixed32 req_ts = 2;</code>
     *
     * <pre>
     * время запроса на показ рекламы
     * </pre>
     */
    public boolean hasReqTs() {
      return ((bitField1_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional fixed32 req_ts = 2;</code>
     *
     * <pre>
     * время запроса на показ рекламы
     * </pre>
     */
    public int getReqTs() {
      return reqTs_;
    }

    // optional fixed32 req_user_ip = 18;
    public static final int REQ_USER_IP_FIELD_NUMBER = 18;
    private int reqUserIp_;
    /**
     * <code>optional fixed32 req_user_ip = 18;</code>
     *
     * <pre>
     * ip юзера в момент запроса рекламы
     * </pre>
     */
    public boolean hasReqUserIp() {
      return ((bitField1_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional fixed32 req_user_ip = 18;</code>
     *
     * <pre>
     * ip юзера в момент запроса рекламы
     * </pre>
     */
    public int getReqUserIp() {
      return reqUserIp_;
    }

    // optional bytes req_user_ipv6 = 23;
    public static final int REQ_USER_IPV6_FIELD_NUMBER = 23;
    private com.google.protobuf.ByteString reqUserIpv6_;
    /**
     * <code>optional bytes req_user_ipv6 = 23;</code>
     *
     * <pre>
     * ipv6 юзера в момент запроса рекламы
     * </pre>
     */
    public boolean hasReqUserIpv6() {
      return ((bitField1_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bytes req_user_ipv6 = 23;</code>
     *
     * <pre>
     * ipv6 юзера в момент запроса рекламы
     * </pre>
     */
    public com.google.protobuf.ByteString getReqUserIpv6() {
      return reqUserIpv6_;
    }

    // optional uint32 image_id = 24;
    public static final int IMAGE_ID_FIELD_NUMBER = 24;
    private int imageId_;
    /**
     * <code>optional uint32 image_id = 24;</code>
     *
     * <pre>
     * идентификатор картинки
     * </pre>
     */
    public boolean hasImageId() {
      return ((bitField1_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 image_id = 24;</code>
     *
     * <pre>
     * идентификатор картинки
     * </pre>
     */
    public int getImageId() {
      return imageId_;
    }

    // optional uint32 audience_id = 25;
    public static final int AUDIENCE_ID_FIELD_NUMBER = 25;
    private int audienceId_;
    /**
     * <code>optional uint32 audience_id = 25;</code>
     *
     * <pre>
     * флаг наличия аудитории в таргетинге: бит 0 - есть позитивная, бит 1 - есть негативная
     * </pre>
     */
    public boolean hasAudienceId() {
      return ((bitField1_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 audience_id = 25;</code>
     *
     * <pre>
     * флаг наличия аудитории в таргетинге: бит 0 - есть позитивная, бит 1 - есть негативная
     * </pre>
     */
    public int getAudienceId() {
      return audienceId_;
    }

    // optional uint32 bannerd_test_id = 30;
    public static final int BANNERD_TEST_ID_FIELD_NUMBER = 30;
    private int bannerdTestId_;
    /**
     * <code>optional uint32 bannerd_test_id = 30;</code>
     *
     * <pre>
     * test_id из конфига баннерного демона
     * </pre>
     */
    public boolean hasBannerdTestId() {
      return ((bitField1_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 bannerd_test_id = 30;</code>
     *
     * <pre>
     * test_id из конфига баннерного демона
     * </pre>
     */
    public int getBannerdTestId() {
      return bannerdTestId_;
    }

    // optional int32 limited_bannerd_test_id = 31 [default = -1];
    public static final int LIMITED_BANNERD_TEST_ID_FIELD_NUMBER = 31;
    private int limitedBannerdTestId_;
    /**
     * <code>optional int32 limited_bannerd_test_id = 31 [default = -1];</code>
     *
     * <pre>
     * test_id из конфига баннерного демона, если для него выделена доля лимитов
     * </pre>
     */
    public boolean hasLimitedBannerdTestId() {
      return ((bitField1_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 limited_bannerd_test_id = 31 [default = -1];</code>
     *
     * <pre>
     * test_id из конфига баннерного демона, если для него выделена доля лимитов
     * </pre>
     */
    public int getLimitedBannerdTestId() {
      return limitedBannerdTestId_;
    }

    // optional float alive_money_ratio = 35;
    public static final int ALIVE_MONEY_RATIO_FIELD_NUMBER = 35;
    private float aliveMoneyRatio_;
    /**
     * <code>optional float alive_money_ratio = 35;</code>
     *
     * <pre>
     * доля живых денег пользователя на момент показа
     * </pre>
     */
    public boolean hasAliveMoneyRatio() {
      return ((bitField1_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional float alive_money_ratio = 35;</code>
     *
     * <pre>
     * доля живых денег пользователя на момент показа
     * </pre>
     */
    public float getAliveMoneyRatio() {
      return aliveMoneyRatio_;
    }

    // optional uint32 filter = 40;
    public static final int FILTER_FIELD_NUMBER = 40;
    private int filter_;
    /**
     * <code>optional uint32 filter = 40;</code>
     *
     * <pre>
     * статус таргетовского антифрода
     * </pre>
     */
    public boolean hasFilter() {
      return ((bitField1_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint32 filter = 40;</code>
     *
     * <pre>
     * статус таргетовского антифрода
     * </pre>
     */
    public int getFilter() {
      return filter_;
    }

    // optional uint32 fake_filter = 41;
    public static final int FAKE_FILTER_FIELD_NUMBER = 41;
    private int fakeFilter_;
    /**
     * <code>optional uint32 fake_filter = 41;</code>
     *
     * <pre>
     * статус антифрода, когда правило сработало, но оно заблокированно для данной площадки
     * </pre>
     */
    public boolean hasFakeFilter() {
      return ((bitField1_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional uint32 fake_filter = 41;</code>
     *
     * <pre>
     * статус антифрода, когда правило сработало, но оно заблокированно для данной площадки
     * </pre>
     */
    public int getFakeFilter() {
      return fakeFilter_;
    }

    // optional fixed32 banner_text_hash = 57;
    public static final int BANNER_TEXT_HASH_FIELD_NUMBER = 57;
    private int bannerTextHash_;
    /**
     * <code>optional fixed32 banner_text_hash = 57;</code>
     *
     * <pre>
     * хэш текста     баннера по алгоритму super_fast_hash
     * </pre>
     */
    public boolean hasBannerTextHash() {
      return ((bitField1_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional fixed32 banner_text_hash = 57;</code>
     *
     * <pre>
     * хэш текста     баннера по алгоритму super_fast_hash
     * </pre>
     */
    public int getBannerTextHash() {
      return bannerTextHash_;
    }

    // optional fixed32 banner_title_hash = 58;
    public static final int BANNER_TITLE_HASH_FIELD_NUMBER = 58;
    private int bannerTitleHash_;
    /**
     * <code>optional fixed32 banner_title_hash = 58;</code>
     *
     * <pre>
     * хэш заголовка  баннера по алгоритму super_fast_hash
     * </pre>
     */
    public boolean hasBannerTitleHash() {
      return ((bitField1_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional fixed32 banner_title_hash = 58;</code>
     *
     * <pre>
     * хэш заголовка  баннера по алгоритму super_fast_hash
     * </pre>
     */
    public int getBannerTitleHash() {
      return bannerTitleHash_;
    }

    // optional fixed64 mm_user_id = 61;
    public static final int MM_USER_ID_FIELD_NUMBER = 61;
    private long mmUserId_;
    /**
     * <code>optional fixed64 mm_user_id = 61;</code>
     *
     * <pre>
     * id пользователя ММ
     * </pre>
     */
    public boolean hasMmUserId() {
      return ((bitField1_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional fixed64 mm_user_id = 61;</code>
     *
     * <pre>
     * id пользователя ММ
     * </pre>
     */
    public long getMmUserId() {
      return mmUserId_;
    }

    // optional uint32 shows_count = 13;
    public static final int SHOWS_COUNT_FIELD_NUMBER = 13;
    private int showsCount_;
    /**
     * <code>optional uint32 shows_count = 13;</code>
     *
     * <pre>
     * количество показов баннеров кампании для пользователя
     * </pre>
     */
    public boolean hasShowsCount() {
      return ((bitField1_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional uint32 shows_count = 13;</code>
     *
     * <pre>
     * количество показов баннеров кампании для пользователя
     * </pre>
     */
    public int getShowsCount() {
      return showsCount_;
    }

    // optional uint32 clicks_count = 82;
    public static final int CLICKS_COUNT_FIELD_NUMBER = 82;
    private int clicksCount_;
    /**
     * <code>optional uint32 clicks_count = 82;</code>
     *
     * <pre>
     * количество кликов пользователя по баннернам кампании
     * </pre>
     */
    public boolean hasClicksCount() {
      return ((bitField1_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional uint32 clicks_count = 82;</code>
     *
     * <pre>
     * количество кликов пользователя по баннернам кампании
     * </pre>
     */
    public int getClicksCount() {
      return clicksCount_;
    }

    // optional uint32 banner_shown_times = 84;
    public static final int BANNER_SHOWN_TIMES_FIELD_NUMBER = 84;
    private int bannerShownTimes_;
    /**
     * <code>optional uint32 banner_shown_times = 84;</code>
     *
     * <pre>
     * номер показа баннера по куки
     * </pre>
     */
    public boolean hasBannerShownTimes() {
      return ((bitField1_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional uint32 banner_shown_times = 84;</code>
     *
     * <pre>
     * номер показа баннера по куки
     * </pre>
     */
    public int getBannerShownTimes() {
      return bannerShownTimes_;
    }

    // repeated uint32 apps = 79 [packed = true];
    public static final int APPS_FIELD_NUMBER = 79;
    private java.util.List<java.lang.Integer> apps_;
    /**
     * <code>repeated uint32 apps = 79 [packed = true];</code>
     *
     * <pre>
     * apps_installed
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAppsList() {
      return apps_;
    }
    /**
     * <code>repeated uint32 apps = 79 [packed = true];</code>
     *
     * <pre>
     * apps_installed
     * </pre>
     */
    public int getAppsCount() {
      return apps_.size();
    }
    /**
     * <code>repeated uint32 apps = 79 [packed = true];</code>
     *
     * <pre>
     * apps_installed
     * </pre>
     */
    public int getApps(int index) {
      return apps_.get(index);
    }
    private int appsMemoizedSerializedSize = -1;

    // optional uint32 mobile_osver = 80;
    public static final int MOBILE_OSVER_FIELD_NUMBER = 80;
    private int mobileOsver_;
    /**
     * <code>optional uint32 mobile_osver = 80;</code>
     *
     * <pre>
     * хеш от строки с версией мобильной ос
     * </pre>
     */
    public boolean hasMobileOsver() {
      return ((bitField1_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional uint32 mobile_osver = 80;</code>
     *
     * <pre>
     * хеш от строки с версией мобильной ос
     * </pre>
     */
    public int getMobileOsver() {
      return mobileOsver_;
    }

    // optional uint32 mobile_region = 106;
    public static final int MOBILE_REGION_FIELD_NUMBER = 106;
    private int mobileRegion_;
    /**
     * <code>optional uint32 mobile_region = 106;</code>
     *
     * <pre>
     * BT_MOBILE_REGION
     * </pre>
     */
    public boolean hasMobileRegion() {
      return ((bitField1_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional uint32 mobile_region = 106;</code>
     *
     * <pre>
     * BT_MOBILE_REGION
     * </pre>
     */
    public int getMobileRegion() {
      return mobileRegion_;
    }

    // optional fixed32 conversion_ts = 83;
    public static final int CONVERSION_TS_FIELD_NUMBER = 83;
    private int conversionTs_;
    /**
     * <code>optional fixed32 conversion_ts = 83;</code>
     *
     * <pre>
     * время конверсии
     * </pre>
     */
    public boolean hasConversionTs() {
      return ((bitField1_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional fixed32 conversion_ts = 83;</code>
     *
     * <pre>
     * время конверсии
     * </pre>
     */
    public int getConversionTs() {
      return conversionTs_;
    }

    // optional fixed32 click_ts = 86;
    public static final int CLICK_TS_FIELD_NUMBER = 86;
    private int clickTs_;
    /**
     * <code>optional fixed32 click_ts = 86;</code>
     *
     * <pre>
     * время клика
     * </pre>
     */
    public boolean hasClickTs() {
      return ((bitField1_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional fixed32 click_ts = 86;</code>
     *
     * <pre>
     * время клика
     * </pre>
     */
    public int getClickTs() {
      return clickTs_;
    }

    // optional string top_goal = 89;
    public static final int TOP_GOAL_FIELD_NUMBER = 89;
    private java.lang.Object topGoal_;
    /**
     * <code>optional string top_goal = 89;</code>
     *
     * <pre>
     * Достигнутая цель ТОПа
     * </pre>
     */
    public boolean hasTopGoal() {
      return ((bitField1_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional string top_goal = 89;</code>
     *
     * <pre>
     * Достигнутая цель ТОПа
     * </pre>
     */
    public java.lang.String getTopGoal() {
      java.lang.Object ref = topGoal_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          topGoal_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string top_goal = 89;</code>
     *
     * <pre>
     * Достигнутая цель ТОПа
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTopGoalBytes() {
      java.lang.Object ref = topGoal_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        topGoal_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional fixed32 top_counter_id = 105;
    public static final int TOP_COUNTER_ID_FIELD_NUMBER = 105;
    private int topCounterId_;
    /**
     * <code>optional fixed32 top_counter_id = 105;</code>
     *
     * <pre>
     * ID счетчика ТОПа
     * </pre>
     */
    public boolean hasTopCounterId() {
      return ((bitField1_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional fixed32 top_counter_id = 105;</code>
     *
     * <pre>
     * ID счетчика ТОПа
     * </pre>
     */
    public int getTopCounterId() {
      return topCounterId_;
    }

    // optional uint32 conversion_cost = 90;
    public static final int CONVERSION_COST_FIELD_NUMBER = 90;
    private int conversionCost_;
    /**
     * <code>optional uint32 conversion_cost = 90;</code>
     *
     * <pre>
     * цена за конверсию в рублях (копейки)
     * </pre>
     */
    public boolean hasConversionCost() {
      return ((bitField1_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional uint32 conversion_cost = 90;</code>
     *
     * <pre>
     * цена за конверсию в рублях (копейки)
     * </pre>
     */
    public int getConversionCost() {
      return conversionCost_;
    }

    // optional uint32 conversion_currency_cost = 91;
    public static final int CONVERSION_CURRENCY_COST_FIELD_NUMBER = 91;
    private int conversionCurrencyCost_;
    /**
     * <code>optional uint32 conversion_currency_cost = 91;</code>
     *
     * <pre>
     * цена за конверсию в валюте (1/100 валюты)
     * </pre>
     */
    public boolean hasConversionCurrencyCost() {
      return ((bitField1_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional uint32 conversion_currency_cost = 91;</code>
     *
     * <pre>
     * цена за конверсию в валюте (1/100 валюты)
     * </pre>
     */
    public int getConversionCurrencyCost() {
      return conversionCurrencyCost_;
    }

    // optional .ru.mail.go.webbase.TargetMsg.RTB_Banner rtb_banner = 70;
    public static final int RTB_BANNER_FIELD_NUMBER = 70;
    private ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner rtbBanner_;
    /**
     * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner rtb_banner = 70;</code>
     *
     * <pre>
     * rtb-инфо
     * </pre>
     */
    public boolean hasRtbBanner() {
      return ((bitField1_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner rtb_banner = 70;</code>
     *
     * <pre>
     * rtb-инфо
     * </pre>
     */
    public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner getRtbBanner() {
      return rtbBanner_;
    }
    /**
     * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner rtb_banner = 70;</code>
     *
     * <pre>
     * rtb-инфо
     * </pre>
     */
    public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_BannerOrBuilder getRtbBannerOrBuilder() {
      return rtbBanner_;
    }

    // optional uint32 flags = 87;
    public static final int FLAGS_FIELD_NUMBER = 87;
    private int flags_;
    /**
     * <code>optional uint32 flags = 87;</code>
     *
     * <pre>
     * флаги. значения см. в include/target/stat_msg_flags.hpp
     * </pre>
     */
    public boolean hasFlags() {
      return ((bitField1_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional uint32 flags = 87;</code>
     *
     * <pre>
     * флаги. значения см. в include/target/stat_msg_flags.hpp
     * </pre>
     */
    public int getFlags() {
      return flags_;
    }

    // optional uint32 custom_event_flags = 103;
    public static final int CUSTOM_EVENT_FLAGS_FIELD_NUMBER = 103;
    private int customEventFlags_;
    /**
     * <code>optional uint32 custom_event_flags = 103;</code>
     *
     * <pre>
     * флаги кастомных событий, значения см. в include/target/stat_msg_flags.hpp
     * </pre>
     */
    public boolean hasCustomEventFlags() {
      return ((bitField1_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional uint32 custom_event_flags = 103;</code>
     *
     * <pre>
     * флаги кастомных событий, значения см. в include/target/stat_msg_flags.hpp
     * </pre>
     */
    public int getCustomEventFlags() {
      return customEventFlags_;
    }

    // optional uint32 max_cpm_limit = 88;
    public static final int MAX_CPM_LIMIT_FIELD_NUMBER = 88;
    private int maxCpmLimit_;
    /**
     * <code>optional uint32 max_cpm_limit = 88;</code>
     *
     * <pre>
     * самый большой cpm лимит для баннеров в этом запросе
     * </pre>
     */
    public boolean hasMaxCpmLimit() {
      return ((bitField1_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional uint32 max_cpm_limit = 88;</code>
     *
     * <pre>
     * самый большой cpm лимит для баннеров в этом запросе
     * </pre>
     */
    public int getMaxCpmLimit() {
      return maxCpmLimit_;
    }

    // repeated uint32 clicked_campaigns = 92 [packed = true];
    public static final int CLICKED_CAMPAIGNS_FIELD_NUMBER = 92;
    private java.util.List<java.lang.Integer> clickedCampaigns_;
    /**
     * <code>repeated uint32 clicked_campaigns = 92 [packed = true];</code>
     *
     * <pre>
     * история кликов пользователя по кампаниям
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getClickedCampaignsList() {
      return clickedCampaigns_;
    }
    /**
     * <code>repeated uint32 clicked_campaigns = 92 [packed = true];</code>
     *
     * <pre>
     * история кликов пользователя по кампаниям
     * </pre>
     */
    public int getClickedCampaignsCount() {
      return clickedCampaigns_.size();
    }
    /**
     * <code>repeated uint32 clicked_campaigns = 92 [packed = true];</code>
     *
     * <pre>
     * история кликов пользователя по кампаниям
     * </pre>
     */
    public int getClickedCampaigns(int index) {
      return clickedCampaigns_.get(index);
    }
    private int clickedCampaignsMemoizedSerializedSize = -1;

    // optional int64 content_id = 94;
    public static final int CONTENT_ID_FIELD_NUMBER = 94;
    private long contentId_;
    /**
     * <code>optional int64 content_id = 94;</code>
     */
    public boolean hasContentId() {
      return ((bitField1_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional int64 content_id = 94;</code>
     */
    public long getContentId() {
      return contentId_;
    }

    // optional int32 service_id = 95;
    public static final int SERVICE_ID_FIELD_NUMBER = 95;
    private int serviceId_;
    /**
     * <code>optional int32 service_id = 95;</code>
     */
    public boolean hasServiceId() {
      return ((bitField2_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 service_id = 95;</code>
     */
    public int getServiceId() {
      return serviceId_;
    }

    // optional uint32 url_id = 98;
    public static final int URL_ID_FIELD_NUMBER = 98;
    private int urlId_;
    /**
     * <code>optional uint32 url_id = 98;</code>
     */
    public boolean hasUrlId() {
      return ((bitField2_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 url_id = 98;</code>
     */
    public int getUrlId() {
      return urlId_;
    }

    // optional uint32 template_id = 102;
    public static final int TEMPLATE_ID_FIELD_NUMBER = 102;
    private int templateId_;
    /**
     * <code>optional uint32 template_id = 102;</code>
     *
     * <pre>
     * позволяет видеть правильный шаблон по расшифровке ссылки, если использовался шаблон из запроса
     * </pre>
     */
    public boolean hasTemplateId() {
      return ((bitField2_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 template_id = 102;</code>
     *
     * <pre>
     * позволяет видеть правильный шаблон по расшифровке ссылки, если использовался шаблон из запроса
     * </pre>
     */
    public int getTemplateId() {
      return templateId_;
    }

    // repeated uint32 limited_pad_ids = 104 [packed = true];
    public static final int LIMITED_PAD_IDS_FIELD_NUMBER = 104;
    private java.util.List<java.lang.Integer> limitedPadIds_;
    /**
     * <code>repeated uint32 limited_pad_ids = 104 [packed = true];</code>
     *
     * <pre>
     * площадки события, для которых задано ограничение доли трафика
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getLimitedPadIdsList() {
      return limitedPadIds_;
    }
    /**
     * <code>repeated uint32 limited_pad_ids = 104 [packed = true];</code>
     *
     * <pre>
     * площадки события, для которых задано ограничение доли трафика
     * </pre>
     */
    public int getLimitedPadIdsCount() {
      return limitedPadIds_.size();
    }
    /**
     * <code>repeated uint32 limited_pad_ids = 104 [packed = true];</code>
     *
     * <pre>
     * площадки события, для которых задано ограничение доли трафика
     * </pre>
     */
    public int getLimitedPadIds(int index) {
      return limitedPadIds_.get(index);
    }
    private int limitedPadIdsMemoizedSerializedSize = -1;

    // optional uint32 matched = 107;
    public static final int MATCHED_FIELD_NUMBER = 107;
    private int matched_;
    /**
     * <code>optional uint32 matched = 107;</code>
     *
     * <pre>
     * проставляется демоном matcherd, нашли или нет положительное событие для оригинального отрицательного
     * </pre>
     */
    public boolean hasMatched() {
      return ((bitField2_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 matched = 107;</code>
     *
     * <pre>
     * проставляется демоном matcherd, нашли или нет положительное событие для оригинального отрицательного
     * </pre>
     */
    public int getMatched() {
      return matched_;
    }

    // optional uint32 matched_ts = 108;
    public static final int MATCHED_TS_FIELD_NUMBER = 108;
    private int matchedTs_;
    /**
     * <code>optional uint32 matched_ts = 108;</code>
     *
     * <pre>
     * проставляется демоном matcherd, timestamp соответствующего положительного события
     * </pre>
     */
    public boolean hasMatchedTs() {
      return ((bitField2_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 matched_ts = 108;</code>
     *
     * <pre>
     * проставляется демоном matcherd, timestamp соответствующего положительного события
     * </pre>
     */
    public int getMatchedTs() {
      return matchedTs_;
    }

    // repeated uint32 contents = 110 [packed = true];
    public static final int CONTENTS_FIELD_NUMBER = 110;
    private java.util.List<java.lang.Integer> contents_;
    /**
     * <code>repeated uint32 contents = 110 [packed = true];</code>
     *
     * <pre>
     * контенты баннера
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getContentsList() {
      return contents_;
    }
    /**
     * <code>repeated uint32 contents = 110 [packed = true];</code>
     *
     * <pre>
     * контенты баннера
     * </pre>
     */
    public int getContentsCount() {
      return contents_.size();
    }
    /**
     * <code>repeated uint32 contents = 110 [packed = true];</code>
     *
     * <pre>
     * контенты баннера
     * </pre>
     */
    public int getContents(int index) {
      return contents_.get(index);
    }
    private int contentsMemoizedSerializedSize = -1;

    // optional float model_playback_rate = 111;
    public static final int MODEL_PLAYBACK_RATE_FIELD_NUMBER = 111;
    private float modelPlaybackRate_;
    /**
     * <code>optional float model_playback_rate = 111;</code>
     *
     * <pre>
     * предсказание модели playback
     * </pre>
     */
    public boolean hasModelPlaybackRate() {
      return ((bitField2_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float model_playback_rate = 111;</code>
     *
     * <pre>
     * предсказание модели playback
     * </pre>
     */
    public float getModelPlaybackRate() {
      return modelPlaybackRate_;
    }

    // optional float expected_cer = 112;
    public static final int EXPECTED_CER_FIELD_NUMBER = 112;
    private float expectedCer_;
    /**
     * <code>optional float expected_cer = 112;</code>
     *
     * <pre>
     * используемая в аукционе оценка вероятности кастомного события
     * </pre>
     */
    public boolean hasExpectedCer() {
      return ((bitField2_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional float expected_cer = 112;</code>
     *
     * <pre>
     * используемая в аукционе оценка вероятности кастомного события
     * </pre>
     */
    public float getExpectedCer() {
      return expectedCer_;
    }

    private void initFields() {
      repeat_ = 0;
      padId_ = 0;
      advertiserId_ = 0;
      packageId_ = 0;
      miscId_ = 0;
      campaignId_ = 0;
      serverId_ = 0;
      orderNumber_ = 0;
      campaignVersion_ = 0;
      ctrOrigin_ = 0;
      modelCtr_ = 0F;
      expectedCtr_ = 0F;
      expectedClicksCr_ = 0F;
      expectedCpm_ = 0;
      cost_ = 0;
      currencyCost_ = 0;
      currencyId_ = 0;
      currencyRate_ = 1F;
      paidEvType_ = 0;
      paidBannerEvent_ = 0;
      currencyCostPpe_ = 0;
      currencyCostPerGoalForOcpm_ = 0;
      currencyBasePpe_ = 0;
      pricedEvType_ = -1;
      pricedBannerEvent_ = 0;
      currencyCostPpre_ = 0;
      currencyBasePpre_ = 0;
      srcCurrencyCost_ = 0;
      srcEventType_ = 0;
      tpsCosts_ = java.util.Collections.emptyList();
      geo_ = 0;
      reqGeo_ = 0;
      impressionId_ = 0L;
      originalImpressionId_ = 0L;
      originalReqTs_ = 0;
      subrequestId_ = 0;
      reqTs_ = 0;
      reqUserIp_ = 0;
      reqUserIpv6_ = com.google.protobuf.ByteString.EMPTY;
      imageId_ = 0;
      audienceId_ = 0;
      bannerdTestId_ = 0;
      limitedBannerdTestId_ = -1;
      aliveMoneyRatio_ = 0F;
      filter_ = 0;
      fakeFilter_ = 0;
      bannerTextHash_ = 0;
      bannerTitleHash_ = 0;
      mmUserId_ = 0L;
      showsCount_ = 0;
      clicksCount_ = 0;
      bannerShownTimes_ = 0;
      apps_ = java.util.Collections.emptyList();
      mobileOsver_ = 0;
      mobileRegion_ = 0;
      conversionTs_ = 0;
      clickTs_ = 0;
      topGoal_ = "";
      topCounterId_ = 0;
      conversionCost_ = 0;
      conversionCurrencyCost_ = 0;
      rtbBanner_ = ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.getDefaultInstance();
      flags_ = 0;
      customEventFlags_ = 0;
      maxCpmLimit_ = 0;
      clickedCampaigns_ = java.util.Collections.emptyList();
      contentId_ = 0L;
      serviceId_ = 0;
      urlId_ = 0;
      templateId_ = 0;
      limitedPadIds_ = java.util.Collections.emptyList();
      matched_ = 0;
      matchedTs_ = 0;
      contents_ = java.util.Collections.emptyList();
      modelPlaybackRate_ = 0F;
      expectedCer_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(1, padId_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        output.writeFixed32(2, reqTs_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeUInt32(3, cost_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(4, advertiserId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(5, packageId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(6, miscId_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeUInt32(7, expectedCpm_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(8, campaignId_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(9, serverId_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(11, ctrOrigin_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(12, orderNumber_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        output.writeUInt32(13, showsCount_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(14, modelCtr_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(15, expectedCtr_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFixed32(16, campaignVersion_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(17, repeat_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        output.writeFixed32(18, reqUserIp_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeUInt32(19, currencyCost_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeUInt32(20, geo_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeFixed64(21, impressionId_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(22, subrequestId_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(23, reqUserIpv6_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(24, imageId_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(25, audienceId_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeUInt32(26, currencyId_);
      }
      for (int i = 0; i < tpsCosts_.size(); i++) {
        output.writeMessage(27, tpsCosts_.get(i));
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(30, bannerdTestId_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(31, limitedBannerdTestId_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(35, aliveMoneyRatio_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(40, filter_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        output.writeUInt32(41, fakeFilter_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        output.writeFixed32(57, bannerTextHash_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        output.writeFixed32(58, bannerTitleHash_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        output.writeFixed64(61, mmUserId_);
      }
      if (((bitField1_ & 0x08000000) == 0x08000000)) {
        output.writeMessage(70, rtbBanner_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeFixed64(77, originalImpressionId_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeFixed32(78, originalReqTs_);
      }
      if (getAppsList().size() > 0) {
        output.writeRawVarint32(634);
        output.writeRawVarint32(appsMemoizedSerializedSize);
      }
      for (int i = 0; i < apps_.size(); i++) {
        output.writeUInt32NoTag(apps_.get(i));
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        output.writeUInt32(80, mobileOsver_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeUInt32(81, reqGeo_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        output.writeUInt32(82, clicksCount_);
      }
      if (((bitField1_ & 0x00200000) == 0x00200000)) {
        output.writeFixed32(83, conversionTs_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        output.writeUInt32(84, bannerShownTimes_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeFloat(85, expectedClicksCr_);
      }
      if (((bitField1_ & 0x00400000) == 0x00400000)) {
        output.writeFixed32(86, clickTs_);
      }
      if (((bitField1_ & 0x10000000) == 0x10000000)) {
        output.writeUInt32(87, flags_);
      }
      if (((bitField1_ & 0x40000000) == 0x40000000)) {
        output.writeUInt32(88, maxCpmLimit_);
      }
      if (((bitField1_ & 0x00800000) == 0x00800000)) {
        output.writeBytes(89, getTopGoalBytes());
      }
      if (((bitField1_ & 0x02000000) == 0x02000000)) {
        output.writeUInt32(90, conversionCost_);
      }
      if (((bitField1_ & 0x04000000) == 0x04000000)) {
        output.writeUInt32(91, conversionCurrencyCost_);
      }
      if (getClickedCampaignsList().size() > 0) {
        output.writeRawVarint32(738);
        output.writeRawVarint32(clickedCampaignsMemoizedSerializedSize);
      }
      for (int i = 0; i < clickedCampaigns_.size(); i++) {
        output.writeUInt32NoTag(clickedCampaigns_.get(i));
      }
      if (((bitField1_ & 0x80000000) == 0x80000000)) {
        output.writeInt64(94, contentId_);
      }
      if (((bitField2_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(95, serviceId_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeUInt32(96, paidEvType_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeFloat(97, currencyRate_);
      }
      if (((bitField2_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(98, urlId_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeUInt32(99, currencyCostPpe_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeUInt32(100, currencyCostPerGoalForOcpm_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeUInt32(101, currencyBasePpe_);
      }
      if (((bitField2_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(102, templateId_);
      }
      if (((bitField1_ & 0x20000000) == 0x20000000)) {
        output.writeUInt32(103, customEventFlags_);
      }
      if (getLimitedPadIdsList().size() > 0) {
        output.writeRawVarint32(834);
        output.writeRawVarint32(limitedPadIdsMemoizedSerializedSize);
      }
      for (int i = 0; i < limitedPadIds_.size(); i++) {
        output.writeUInt32NoTag(limitedPadIds_.get(i));
      }
      if (((bitField1_ & 0x01000000) == 0x01000000)) {
        output.writeFixed32(105, topCounterId_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        output.writeUInt32(106, mobileRegion_);
      }
      if (((bitField2_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(107, matched_);
      }
      if (((bitField2_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(108, matchedTs_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeUInt32(109, srcCurrencyCost_);
      }
      if (getContentsList().size() > 0) {
        output.writeRawVarint32(882);
        output.writeRawVarint32(contentsMemoizedSerializedSize);
      }
      for (int i = 0; i < contents_.size(); i++) {
        output.writeUInt32NoTag(contents_.get(i));
      }
      if (((bitField2_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(111, modelPlaybackRate_);
      }
      if (((bitField2_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(112, expectedCer_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeUInt32(113, paidBannerEvent_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeUInt32(114, srcEventType_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeInt32(115, pricedEvType_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeUInt32(116, pricedBannerEvent_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeUInt32(117, currencyCostPpre_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeUInt32(118, currencyBasePpre_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, padId_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, reqTs_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, cost_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, advertiserId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, packageId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, miscId_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, expectedCpm_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, campaignId_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, serverId_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, ctrOrigin_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, orderNumber_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(13, showsCount_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(14, modelCtr_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(15, expectedCtr_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(16, campaignVersion_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(17, repeat_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(18, reqUserIp_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(19, currencyCost_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(20, geo_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(21, impressionId_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(22, subrequestId_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(23, reqUserIpv6_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(24, imageId_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(25, audienceId_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(26, currencyId_);
      }
      for (int i = 0; i < tpsCosts_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(27, tpsCosts_.get(i));
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(30, bannerdTestId_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(31, limitedBannerdTestId_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(35, aliveMoneyRatio_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(40, filter_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(41, fakeFilter_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(57, bannerTextHash_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(58, bannerTitleHash_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(61, mmUserId_);
      }
      if (((bitField1_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(70, rtbBanner_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(77, originalImpressionId_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(78, originalReqTs_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < apps_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(apps_.get(i));
        }
        size += dataSize;
        if (!getAppsList().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        appsMemoizedSerializedSize = dataSize;
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(80, mobileOsver_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(81, reqGeo_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(82, clicksCount_);
      }
      if (((bitField1_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(83, conversionTs_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(84, bannerShownTimes_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(85, expectedClicksCr_);
      }
      if (((bitField1_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(86, clickTs_);
      }
      if (((bitField1_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(87, flags_);
      }
      if (((bitField1_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(88, maxCpmLimit_);
      }
      if (((bitField1_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(89, getTopGoalBytes());
      }
      if (((bitField1_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(90, conversionCost_);
      }
      if (((bitField1_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(91, conversionCurrencyCost_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < clickedCampaigns_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(clickedCampaigns_.get(i));
        }
        size += dataSize;
        if (!getClickedCampaignsList().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        clickedCampaignsMemoizedSerializedSize = dataSize;
      }
      if (((bitField1_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(94, contentId_);
      }
      if (((bitField2_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(95, serviceId_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(96, paidEvType_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(97, currencyRate_);
      }
      if (((bitField2_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(98, urlId_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(99, currencyCostPpe_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(100, currencyCostPerGoalForOcpm_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(101, currencyBasePpe_);
      }
      if (((bitField2_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(102, templateId_);
      }
      if (((bitField1_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(103, customEventFlags_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < limitedPadIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(limitedPadIds_.get(i));
        }
        size += dataSize;
        if (!getLimitedPadIdsList().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        limitedPadIdsMemoizedSerializedSize = dataSize;
      }
      if (((bitField1_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(105, topCounterId_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(106, mobileRegion_);
      }
      if (((bitField2_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(107, matched_);
      }
      if (((bitField2_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(108, matchedTs_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(109, srcCurrencyCost_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < contents_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(contents_.get(i));
        }
        size += dataSize;
        if (!getContentsList().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        contentsMemoizedSerializedSize = dataSize;
      }
      if (((bitField2_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(111, modelPlaybackRate_);
      }
      if (((bitField2_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(112, expectedCer_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(113, paidBannerEvent_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(114, srcEventType_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(115, pricedEvType_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(116, pricedBannerEvent_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(117, currencyCostPpre_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(118, currencyBasePpre_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static ru.mail.go.webbase.TargetProto.TargetMsg parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ru.mail.go.webbase.TargetProto.TargetMsg parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ru.mail.go.webbase.TargetProto.TargetMsg parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ru.mail.go.webbase.TargetProto.TargetMsg parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ru.mail.go.webbase.TargetProto.TargetMsg parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static ru.mail.go.webbase.TargetProto.TargetMsg parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static ru.mail.go.webbase.TargetProto.TargetMsg parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static ru.mail.go.webbase.TargetProto.TargetMsg parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static ru.mail.go.webbase.TargetProto.TargetMsg parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static ru.mail.go.webbase.TargetProto.TargetMsg parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(ru.mail.go.webbase.TargetProto.TargetMsg prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ru.mail.go.webbase.TargetMsg}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements ru.mail.go.webbase.TargetProto.TargetMsgOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.mail.go.webbase.TargetProto.TargetMsg.class, ru.mail.go.webbase.TargetProto.TargetMsg.Builder.class);
      }

      // Construct using ru.mail.go.webbase.TargetProto.TargetMsg.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTpsCostsFieldBuilder();
          getRtbBannerFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        repeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        padId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        advertiserId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        packageId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        miscId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        campaignId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        serverId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        orderNumber_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        campaignVersion_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        ctrOrigin_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        modelCtr_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000400);
        expectedCtr_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000800);
        expectedClicksCr_ = 0F;
        bitField0_ = (bitField0_ & ~0x00001000);
        expectedCpm_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        cost_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        currencyCost_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        currencyId_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        currencyRate_ = 1F;
        bitField0_ = (bitField0_ & ~0x00020000);
        paidEvType_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        paidBannerEvent_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        currencyCostPpe_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        currencyCostPerGoalForOcpm_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        currencyBasePpe_ = 0;
        bitField0_ = (bitField0_ & ~0x00400000);
        pricedEvType_ = -1;
        bitField0_ = (bitField0_ & ~0x00800000);
        pricedBannerEvent_ = 0;
        bitField0_ = (bitField0_ & ~0x01000000);
        currencyCostPpre_ = 0;
        bitField0_ = (bitField0_ & ~0x02000000);
        currencyBasePpre_ = 0;
        bitField0_ = (bitField0_ & ~0x04000000);
        srcCurrencyCost_ = 0;
        bitField0_ = (bitField0_ & ~0x08000000);
        srcEventType_ = 0;
        bitField0_ = (bitField0_ & ~0x10000000);
        if (tpsCostsBuilder_ == null) {
          tpsCosts_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x20000000);
        } else {
          tpsCostsBuilder_.clear();
        }
        geo_ = 0;
        bitField0_ = (bitField0_ & ~0x40000000);
        reqGeo_ = 0;
        bitField0_ = (bitField0_ & ~0x80000000);
        impressionId_ = 0L;
        bitField1_ = (bitField1_ & ~0x00000001);
        originalImpressionId_ = 0L;
        bitField1_ = (bitField1_ & ~0x00000002);
        originalReqTs_ = 0;
        bitField1_ = (bitField1_ & ~0x00000004);
        subrequestId_ = 0;
        bitField1_ = (bitField1_ & ~0x00000008);
        reqTs_ = 0;
        bitField1_ = (bitField1_ & ~0x00000010);
        reqUserIp_ = 0;
        bitField1_ = (bitField1_ & ~0x00000020);
        reqUserIpv6_ = com.google.protobuf.ByteString.EMPTY;
        bitField1_ = (bitField1_ & ~0x00000040);
        imageId_ = 0;
        bitField1_ = (bitField1_ & ~0x00000080);
        audienceId_ = 0;
        bitField1_ = (bitField1_ & ~0x00000100);
        bannerdTestId_ = 0;
        bitField1_ = (bitField1_ & ~0x00000200);
        limitedBannerdTestId_ = -1;
        bitField1_ = (bitField1_ & ~0x00000400);
        aliveMoneyRatio_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000800);
        filter_ = 0;
        bitField1_ = (bitField1_ & ~0x00001000);
        fakeFilter_ = 0;
        bitField1_ = (bitField1_ & ~0x00002000);
        bannerTextHash_ = 0;
        bitField1_ = (bitField1_ & ~0x00004000);
        bannerTitleHash_ = 0;
        bitField1_ = (bitField1_ & ~0x00008000);
        mmUserId_ = 0L;
        bitField1_ = (bitField1_ & ~0x00010000);
        showsCount_ = 0;
        bitField1_ = (bitField1_ & ~0x00020000);
        clicksCount_ = 0;
        bitField1_ = (bitField1_ & ~0x00040000);
        bannerShownTimes_ = 0;
        bitField1_ = (bitField1_ & ~0x00080000);
        apps_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00100000);
        mobileOsver_ = 0;
        bitField1_ = (bitField1_ & ~0x00200000);
        mobileRegion_ = 0;
        bitField1_ = (bitField1_ & ~0x00400000);
        conversionTs_ = 0;
        bitField1_ = (bitField1_ & ~0x00800000);
        clickTs_ = 0;
        bitField1_ = (bitField1_ & ~0x01000000);
        topGoal_ = "";
        bitField1_ = (bitField1_ & ~0x02000000);
        topCounterId_ = 0;
        bitField1_ = (bitField1_ & ~0x04000000);
        conversionCost_ = 0;
        bitField1_ = (bitField1_ & ~0x08000000);
        conversionCurrencyCost_ = 0;
        bitField1_ = (bitField1_ & ~0x10000000);
        if (rtbBannerBuilder_ == null) {
          rtbBanner_ = ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.getDefaultInstance();
        } else {
          rtbBannerBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x20000000);
        flags_ = 0;
        bitField1_ = (bitField1_ & ~0x40000000);
        customEventFlags_ = 0;
        bitField1_ = (bitField1_ & ~0x80000000);
        maxCpmLimit_ = 0;
        bitField2_ = (bitField2_ & ~0x00000001);
        clickedCampaigns_ = java.util.Collections.emptyList();
        bitField2_ = (bitField2_ & ~0x00000002);
        contentId_ = 0L;
        bitField2_ = (bitField2_ & ~0x00000004);
        serviceId_ = 0;
        bitField2_ = (bitField2_ & ~0x00000008);
        urlId_ = 0;
        bitField2_ = (bitField2_ & ~0x00000010);
        templateId_ = 0;
        bitField2_ = (bitField2_ & ~0x00000020);
        limitedPadIds_ = java.util.Collections.emptyList();
        bitField2_ = (bitField2_ & ~0x00000040);
        matched_ = 0;
        bitField2_ = (bitField2_ & ~0x00000080);
        matchedTs_ = 0;
        bitField2_ = (bitField2_ & ~0x00000100);
        contents_ = java.util.Collections.emptyList();
        bitField2_ = (bitField2_ & ~0x00000200);
        modelPlaybackRate_ = 0F;
        bitField2_ = (bitField2_ & ~0x00000400);
        expectedCer_ = 0F;
        bitField2_ = (bitField2_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ru.mail.go.webbase.TargetProto.internal_static_ru_mail_go_webbase_TargetMsg_descriptor;
      }

      public ru.mail.go.webbase.TargetProto.TargetMsg getDefaultInstanceForType() {
        return ru.mail.go.webbase.TargetProto.TargetMsg.getDefaultInstance();
      }

      public ru.mail.go.webbase.TargetProto.TargetMsg build() {
        ru.mail.go.webbase.TargetProto.TargetMsg result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public ru.mail.go.webbase.TargetProto.TargetMsg buildPartial() {
        ru.mail.go.webbase.TargetProto.TargetMsg result = new ru.mail.go.webbase.TargetProto.TargetMsg(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int from_bitField2_ = bitField2_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        int to_bitField2_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.repeat_ = repeat_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.padId_ = padId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.advertiserId_ = advertiserId_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.packageId_ = packageId_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.miscId_ = miscId_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.campaignId_ = campaignId_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.serverId_ = serverId_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.orderNumber_ = orderNumber_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.campaignVersion_ = campaignVersion_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.ctrOrigin_ = ctrOrigin_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.modelCtr_ = modelCtr_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.expectedCtr_ = expectedCtr_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.expectedClicksCr_ = expectedClicksCr_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.expectedCpm_ = expectedCpm_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.cost_ = cost_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.currencyCost_ = currencyCost_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.currencyId_ = currencyId_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.currencyRate_ = currencyRate_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.paidEvType_ = paidEvType_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.paidBannerEvent_ = paidBannerEvent_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.currencyCostPpe_ = currencyCostPpe_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.currencyCostPerGoalForOcpm_ = currencyCostPerGoalForOcpm_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.currencyBasePpe_ = currencyBasePpe_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.pricedEvType_ = pricedEvType_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.pricedBannerEvent_ = pricedBannerEvent_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.currencyCostPpre_ = currencyCostPpre_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.currencyBasePpre_ = currencyBasePpre_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.srcCurrencyCost_ = srcCurrencyCost_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.srcEventType_ = srcEventType_;
        if (tpsCostsBuilder_ == null) {
          if (((bitField0_ & 0x20000000) == 0x20000000)) {
            tpsCosts_ = java.util.Collections.unmodifiableList(tpsCosts_);
            bitField0_ = (bitField0_ & ~0x20000000);
          }
          result.tpsCosts_ = tpsCosts_;
        } else {
          result.tpsCosts_ = tpsCostsBuilder_.build();
        }
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x20000000;
        }
        result.geo_ = geo_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x40000000;
        }
        result.reqGeo_ = reqGeo_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x80000000;
        }
        result.impressionId_ = impressionId_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField1_ |= 0x00000001;
        }
        result.originalImpressionId_ = originalImpressionId_;
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField1_ |= 0x00000002;
        }
        result.originalReqTs_ = originalReqTs_;
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField1_ |= 0x00000004;
        }
        result.subrequestId_ = subrequestId_;
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField1_ |= 0x00000008;
        }
        result.reqTs_ = reqTs_;
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField1_ |= 0x00000010;
        }
        result.reqUserIp_ = reqUserIp_;
        if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
          to_bitField1_ |= 0x00000020;
        }
        result.reqUserIpv6_ = reqUserIpv6_;
        if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
          to_bitField1_ |= 0x00000040;
        }
        result.imageId_ = imageId_;
        if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
          to_bitField1_ |= 0x00000080;
        }
        result.audienceId_ = audienceId_;
        if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
          to_bitField1_ |= 0x00000100;
        }
        result.bannerdTestId_ = bannerdTestId_;
        if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
          to_bitField1_ |= 0x00000200;
        }
        result.limitedBannerdTestId_ = limitedBannerdTestId_;
        if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
          to_bitField1_ |= 0x00000400;
        }
        result.aliveMoneyRatio_ = aliveMoneyRatio_;
        if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
          to_bitField1_ |= 0x00000800;
        }
        result.filter_ = filter_;
        if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
          to_bitField1_ |= 0x00001000;
        }
        result.fakeFilter_ = fakeFilter_;
        if (((from_bitField1_ & 0x00004000) == 0x00004000)) {
          to_bitField1_ |= 0x00002000;
        }
        result.bannerTextHash_ = bannerTextHash_;
        if (((from_bitField1_ & 0x00008000) == 0x00008000)) {
          to_bitField1_ |= 0x00004000;
        }
        result.bannerTitleHash_ = bannerTitleHash_;
        if (((from_bitField1_ & 0x00010000) == 0x00010000)) {
          to_bitField1_ |= 0x00008000;
        }
        result.mmUserId_ = mmUserId_;
        if (((from_bitField1_ & 0x00020000) == 0x00020000)) {
          to_bitField1_ |= 0x00010000;
        }
        result.showsCount_ = showsCount_;
        if (((from_bitField1_ & 0x00040000) == 0x00040000)) {
          to_bitField1_ |= 0x00020000;
        }
        result.clicksCount_ = clicksCount_;
        if (((from_bitField1_ & 0x00080000) == 0x00080000)) {
          to_bitField1_ |= 0x00040000;
        }
        result.bannerShownTimes_ = bannerShownTimes_;
        if (((bitField1_ & 0x00100000) == 0x00100000)) {
          apps_ = java.util.Collections.unmodifiableList(apps_);
          bitField1_ = (bitField1_ & ~0x00100000);
        }
        result.apps_ = apps_;
        if (((from_bitField1_ & 0x00200000) == 0x00200000)) {
          to_bitField1_ |= 0x00080000;
        }
        result.mobileOsver_ = mobileOsver_;
        if (((from_bitField1_ & 0x00400000) == 0x00400000)) {
          to_bitField1_ |= 0x00100000;
        }
        result.mobileRegion_ = mobileRegion_;
        if (((from_bitField1_ & 0x00800000) == 0x00800000)) {
          to_bitField1_ |= 0x00200000;
        }
        result.conversionTs_ = conversionTs_;
        if (((from_bitField1_ & 0x01000000) == 0x01000000)) {
          to_bitField1_ |= 0x00400000;
        }
        result.clickTs_ = clickTs_;
        if (((from_bitField1_ & 0x02000000) == 0x02000000)) {
          to_bitField1_ |= 0x00800000;
        }
        result.topGoal_ = topGoal_;
        if (((from_bitField1_ & 0x04000000) == 0x04000000)) {
          to_bitField1_ |= 0x01000000;
        }
        result.topCounterId_ = topCounterId_;
        if (((from_bitField1_ & 0x08000000) == 0x08000000)) {
          to_bitField1_ |= 0x02000000;
        }
        result.conversionCost_ = conversionCost_;
        if (((from_bitField1_ & 0x10000000) == 0x10000000)) {
          to_bitField1_ |= 0x04000000;
        }
        result.conversionCurrencyCost_ = conversionCurrencyCost_;
        if (((from_bitField1_ & 0x20000000) == 0x20000000)) {
          to_bitField1_ |= 0x08000000;
        }
        if (rtbBannerBuilder_ == null) {
          result.rtbBanner_ = rtbBanner_;
        } else {
          result.rtbBanner_ = rtbBannerBuilder_.build();
        }
        if (((from_bitField1_ & 0x40000000) == 0x40000000)) {
          to_bitField1_ |= 0x10000000;
        }
        result.flags_ = flags_;
        if (((from_bitField1_ & 0x80000000) == 0x80000000)) {
          to_bitField1_ |= 0x20000000;
        }
        result.customEventFlags_ = customEventFlags_;
        if (((from_bitField2_ & 0x00000001) == 0x00000001)) {
          to_bitField1_ |= 0x40000000;
        }
        result.maxCpmLimit_ = maxCpmLimit_;
        if (((bitField2_ & 0x00000002) == 0x00000002)) {
          clickedCampaigns_ = java.util.Collections.unmodifiableList(clickedCampaigns_);
          bitField2_ = (bitField2_ & ~0x00000002);
        }
        result.clickedCampaigns_ = clickedCampaigns_;
        if (((from_bitField2_ & 0x00000004) == 0x00000004)) {
          to_bitField1_ |= 0x80000000;
        }
        result.contentId_ = contentId_;
        if (((from_bitField2_ & 0x00000008) == 0x00000008)) {
          to_bitField2_ |= 0x00000001;
        }
        result.serviceId_ = serviceId_;
        if (((from_bitField2_ & 0x00000010) == 0x00000010)) {
          to_bitField2_ |= 0x00000002;
        }
        result.urlId_ = urlId_;
        if (((from_bitField2_ & 0x00000020) == 0x00000020)) {
          to_bitField2_ |= 0x00000004;
        }
        result.templateId_ = templateId_;
        if (((bitField2_ & 0x00000040) == 0x00000040)) {
          limitedPadIds_ = java.util.Collections.unmodifiableList(limitedPadIds_);
          bitField2_ = (bitField2_ & ~0x00000040);
        }
        result.limitedPadIds_ = limitedPadIds_;
        if (((from_bitField2_ & 0x00000080) == 0x00000080)) {
          to_bitField2_ |= 0x00000008;
        }
        result.matched_ = matched_;
        if (((from_bitField2_ & 0x00000100) == 0x00000100)) {
          to_bitField2_ |= 0x00000010;
        }
        result.matchedTs_ = matchedTs_;
        if (((bitField2_ & 0x00000200) == 0x00000200)) {
          contents_ = java.util.Collections.unmodifiableList(contents_);
          bitField2_ = (bitField2_ & ~0x00000200);
        }
        result.contents_ = contents_;
        if (((from_bitField2_ & 0x00000400) == 0x00000400)) {
          to_bitField2_ |= 0x00000020;
        }
        result.modelPlaybackRate_ = modelPlaybackRate_;
        if (((from_bitField2_ & 0x00000800) == 0x00000800)) {
          to_bitField2_ |= 0x00000040;
        }
        result.expectedCer_ = expectedCer_;
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        result.bitField2_ = to_bitField2_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ru.mail.go.webbase.TargetProto.TargetMsg) {
          return mergeFrom((ru.mail.go.webbase.TargetProto.TargetMsg)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ru.mail.go.webbase.TargetProto.TargetMsg other) {
        if (other == ru.mail.go.webbase.TargetProto.TargetMsg.getDefaultInstance()) return this;
        if (other.hasRepeat()) {
          setRepeat(other.getRepeat());
        }
        if (other.hasPadId()) {
          setPadId(other.getPadId());
        }
        if (other.hasAdvertiserId()) {
          setAdvertiserId(other.getAdvertiserId());
        }
        if (other.hasPackageId()) {
          setPackageId(other.getPackageId());
        }
        if (other.hasMiscId()) {
          setMiscId(other.getMiscId());
        }
        if (other.hasCampaignId()) {
          setCampaignId(other.getCampaignId());
        }
        if (other.hasServerId()) {
          setServerId(other.getServerId());
        }
        if (other.hasOrderNumber()) {
          setOrderNumber(other.getOrderNumber());
        }
        if (other.hasCampaignVersion()) {
          setCampaignVersion(other.getCampaignVersion());
        }
        if (other.hasCtrOrigin()) {
          setCtrOrigin(other.getCtrOrigin());
        }
        if (other.hasModelCtr()) {
          setModelCtr(other.getModelCtr());
        }
        if (other.hasExpectedCtr()) {
          setExpectedCtr(other.getExpectedCtr());
        }
        if (other.hasExpectedClicksCr()) {
          setExpectedClicksCr(other.getExpectedClicksCr());
        }
        if (other.hasExpectedCpm()) {
          setExpectedCpm(other.getExpectedCpm());
        }
        if (other.hasCost()) {
          setCost(other.getCost());
        }
        if (other.hasCurrencyCost()) {
          setCurrencyCost(other.getCurrencyCost());
        }
        if (other.hasCurrencyId()) {
          setCurrencyId(other.getCurrencyId());
        }
        if (other.hasCurrencyRate()) {
          setCurrencyRate(other.getCurrencyRate());
        }
        if (other.hasPaidEvType()) {
          setPaidEvType(other.getPaidEvType());
        }
        if (other.hasPaidBannerEvent()) {
          setPaidBannerEvent(other.getPaidBannerEvent());
        }
        if (other.hasCurrencyCostPpe()) {
          setCurrencyCostPpe(other.getCurrencyCostPpe());
        }
        if (other.hasCurrencyCostPerGoalForOcpm()) {
          setCurrencyCostPerGoalForOcpm(other.getCurrencyCostPerGoalForOcpm());
        }
        if (other.hasCurrencyBasePpe()) {
          setCurrencyBasePpe(other.getCurrencyBasePpe());
        }
        if (other.hasPricedEvType()) {
          setPricedEvType(other.getPricedEvType());
        }
        if (other.hasPricedBannerEvent()) {
          setPricedBannerEvent(other.getPricedBannerEvent());
        }
        if (other.hasCurrencyCostPpre()) {
          setCurrencyCostPpre(other.getCurrencyCostPpre());
        }
        if (other.hasCurrencyBasePpre()) {
          setCurrencyBasePpre(other.getCurrencyBasePpre());
        }
        if (other.hasSrcCurrencyCost()) {
          setSrcCurrencyCost(other.getSrcCurrencyCost());
        }
        if (other.hasSrcEventType()) {
          setSrcEventType(other.getSrcEventType());
        }
        if (tpsCostsBuilder_ == null) {
          if (!other.tpsCosts_.isEmpty()) {
            if (tpsCosts_.isEmpty()) {
              tpsCosts_ = other.tpsCosts_;
              bitField0_ = (bitField0_ & ~0x20000000);
            } else {
              ensureTpsCostsIsMutable();
              tpsCosts_.addAll(other.tpsCosts_);
            }
            onChanged();
          }
        } else {
          if (!other.tpsCosts_.isEmpty()) {
            if (tpsCostsBuilder_.isEmpty()) {
              tpsCostsBuilder_.dispose();
              tpsCostsBuilder_ = null;
              tpsCosts_ = other.tpsCosts_;
              bitField0_ = (bitField0_ & ~0x20000000);
              tpsCostsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTpsCostsFieldBuilder() : null;
            } else {
              tpsCostsBuilder_.addAllMessages(other.tpsCosts_);
            }
          }
        }
        if (other.hasGeo()) {
          setGeo(other.getGeo());
        }
        if (other.hasReqGeo()) {
          setReqGeo(other.getReqGeo());
        }
        if (other.hasImpressionId()) {
          setImpressionId(other.getImpressionId());
        }
        if (other.hasOriginalImpressionId()) {
          setOriginalImpressionId(other.getOriginalImpressionId());
        }
        if (other.hasOriginalReqTs()) {
          setOriginalReqTs(other.getOriginalReqTs());
        }
        if (other.hasSubrequestId()) {
          setSubrequestId(other.getSubrequestId());
        }
        if (other.hasReqTs()) {
          setReqTs(other.getReqTs());
        }
        if (other.hasReqUserIp()) {
          setReqUserIp(other.getReqUserIp());
        }
        if (other.hasReqUserIpv6()) {
          setReqUserIpv6(other.getReqUserIpv6());
        }
        if (other.hasImageId()) {
          setImageId(other.getImageId());
        }
        if (other.hasAudienceId()) {
          setAudienceId(other.getAudienceId());
        }
        if (other.hasBannerdTestId()) {
          setBannerdTestId(other.getBannerdTestId());
        }
        if (other.hasLimitedBannerdTestId()) {
          setLimitedBannerdTestId(other.getLimitedBannerdTestId());
        }
        if (other.hasAliveMoneyRatio()) {
          setAliveMoneyRatio(other.getAliveMoneyRatio());
        }
        if (other.hasFilter()) {
          setFilter(other.getFilter());
        }
        if (other.hasFakeFilter()) {
          setFakeFilter(other.getFakeFilter());
        }
        if (other.hasBannerTextHash()) {
          setBannerTextHash(other.getBannerTextHash());
        }
        if (other.hasBannerTitleHash()) {
          setBannerTitleHash(other.getBannerTitleHash());
        }
        if (other.hasMmUserId()) {
          setMmUserId(other.getMmUserId());
        }
        if (other.hasShowsCount()) {
          setShowsCount(other.getShowsCount());
        }
        if (other.hasClicksCount()) {
          setClicksCount(other.getClicksCount());
        }
        if (other.hasBannerShownTimes()) {
          setBannerShownTimes(other.getBannerShownTimes());
        }
        if (!other.apps_.isEmpty()) {
          if (apps_.isEmpty()) {
            apps_ = other.apps_;
            bitField1_ = (bitField1_ & ~0x00100000);
          } else {
            ensureAppsIsMutable();
            apps_.addAll(other.apps_);
          }
          onChanged();
        }
        if (other.hasMobileOsver()) {
          setMobileOsver(other.getMobileOsver());
        }
        if (other.hasMobileRegion()) {
          setMobileRegion(other.getMobileRegion());
        }
        if (other.hasConversionTs()) {
          setConversionTs(other.getConversionTs());
        }
        if (other.hasClickTs()) {
          setClickTs(other.getClickTs());
        }
        if (other.hasTopGoal()) {
          bitField1_ |= 0x02000000;
          topGoal_ = other.topGoal_;
          onChanged();
        }
        if (other.hasTopCounterId()) {
          setTopCounterId(other.getTopCounterId());
        }
        if (other.hasConversionCost()) {
          setConversionCost(other.getConversionCost());
        }
        if (other.hasConversionCurrencyCost()) {
          setConversionCurrencyCost(other.getConversionCurrencyCost());
        }
        if (other.hasRtbBanner()) {
          mergeRtbBanner(other.getRtbBanner());
        }
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (other.hasCustomEventFlags()) {
          setCustomEventFlags(other.getCustomEventFlags());
        }
        if (other.hasMaxCpmLimit()) {
          setMaxCpmLimit(other.getMaxCpmLimit());
        }
        if (!other.clickedCampaigns_.isEmpty()) {
          if (clickedCampaigns_.isEmpty()) {
            clickedCampaigns_ = other.clickedCampaigns_;
            bitField2_ = (bitField2_ & ~0x00000002);
          } else {
            ensureClickedCampaignsIsMutable();
            clickedCampaigns_.addAll(other.clickedCampaigns_);
          }
          onChanged();
        }
        if (other.hasContentId()) {
          setContentId(other.getContentId());
        }
        if (other.hasServiceId()) {
          setServiceId(other.getServiceId());
        }
        if (other.hasUrlId()) {
          setUrlId(other.getUrlId());
        }
        if (other.hasTemplateId()) {
          setTemplateId(other.getTemplateId());
        }
        if (!other.limitedPadIds_.isEmpty()) {
          if (limitedPadIds_.isEmpty()) {
            limitedPadIds_ = other.limitedPadIds_;
            bitField2_ = (bitField2_ & ~0x00000040);
          } else {
            ensureLimitedPadIdsIsMutable();
            limitedPadIds_.addAll(other.limitedPadIds_);
          }
          onChanged();
        }
        if (other.hasMatched()) {
          setMatched(other.getMatched());
        }
        if (other.hasMatchedTs()) {
          setMatchedTs(other.getMatchedTs());
        }
        if (!other.contents_.isEmpty()) {
          if (contents_.isEmpty()) {
            contents_ = other.contents_;
            bitField2_ = (bitField2_ & ~0x00000200);
          } else {
            ensureContentsIsMutable();
            contents_.addAll(other.contents_);
          }
          onChanged();
        }
        if (other.hasModelPlaybackRate()) {
          setModelPlaybackRate(other.getModelPlaybackRate());
        }
        if (other.hasExpectedCer()) {
          setExpectedCer(other.getExpectedCer());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ru.mail.go.webbase.TargetProto.TargetMsg parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ru.mail.go.webbase.TargetProto.TargetMsg) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;
      private int bitField2_;

      // optional uint32 repeat = 17;
      private int repeat_ ;
      /**
       * <code>optional uint32 repeat = 17;</code>
       *
       * <pre>
       * вместо одного события имеем repeat+1 одинаковых событий (для непоказов)
       * </pre>
       */
      public boolean hasRepeat() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 repeat = 17;</code>
       *
       * <pre>
       * вместо одного события имеем repeat+1 одинаковых событий (для непоказов)
       * </pre>
       */
      public int getRepeat() {
        return repeat_;
      }
      /**
       * <code>optional uint32 repeat = 17;</code>
       *
       * <pre>
       * вместо одного события имеем repeat+1 одинаковых событий (для непоказов)
       * </pre>
       */
      public Builder setRepeat(int value) {
        bitField0_ |= 0x00000001;
        repeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 repeat = 17;</code>
       *
       * <pre>
       * вместо одного события имеем repeat+1 одинаковых событий (для непоказов)
       * </pre>
       */
      public Builder clearRepeat() {
        bitField0_ = (bitField0_ & ~0x00000001);
        repeat_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 pad_id = 1;
      private int padId_ ;
      /**
       * <code>optional uint32 pad_id = 1;</code>
       *
       * <pre>
       * площадка
       * </pre>
       */
      public boolean hasPadId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 pad_id = 1;</code>
       *
       * <pre>
       * площадка
       * </pre>
       */
      public int getPadId() {
        return padId_;
      }
      /**
       * <code>optional uint32 pad_id = 1;</code>
       *
       * <pre>
       * площадка
       * </pre>
       */
      public Builder setPadId(int value) {
        bitField0_ |= 0x00000002;
        padId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 pad_id = 1;</code>
       *
       * <pre>
       * площадка
       * </pre>
       */
      public Builder clearPadId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        padId_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 advertiser_id = 4;
      private int advertiserId_ ;
      /**
       * <code>optional uint32 advertiser_id = 4;</code>
       *
       * <pre>
       * юзер-рекламодатель
       * </pre>
       */
      public boolean hasAdvertiserId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 advertiser_id = 4;</code>
       *
       * <pre>
       * юзер-рекламодатель
       * </pre>
       */
      public int getAdvertiserId() {
        return advertiserId_;
      }
      /**
       * <code>optional uint32 advertiser_id = 4;</code>
       *
       * <pre>
       * юзер-рекламодатель
       * </pre>
       */
      public Builder setAdvertiserId(int value) {
        bitField0_ |= 0x00000004;
        advertiserId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 advertiser_id = 4;</code>
       *
       * <pre>
       * юзер-рекламодатель
       * </pre>
       */
      public Builder clearAdvertiserId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        advertiserId_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 package_id = 5;
      private int packageId_ ;
      /**
       * <code>optional uint32 package_id = 5;</code>
       *
       * <pre>
       * пакет
       * </pre>
       */
      public boolean hasPackageId() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 package_id = 5;</code>
       *
       * <pre>
       * пакет
       * </pre>
       */
      public int getPackageId() {
        return packageId_;
      }
      /**
       * <code>optional uint32 package_id = 5;</code>
       *
       * <pre>
       * пакет
       * </pre>
       */
      public Builder setPackageId(int value) {
        bitField0_ |= 0x00000008;
        packageId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 package_id = 5;</code>
       *
       * <pre>
       * пакет
       * </pre>
       */
      public Builder clearPackageId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        packageId_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 misc_id = 6;
      private int miscId_ ;
      /**
       * <code>optional uint32 misc_id = 6;</code>
       *
       * <pre>
       * misc_id (идентификатор "способа подбора" - kiwid там или что-то еще)
       * </pre>
       */
      public boolean hasMiscId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 misc_id = 6;</code>
       *
       * <pre>
       * misc_id (идентификатор "способа подбора" - kiwid там или что-то еще)
       * </pre>
       */
      public int getMiscId() {
        return miscId_;
      }
      /**
       * <code>optional uint32 misc_id = 6;</code>
       *
       * <pre>
       * misc_id (идентификатор "способа подбора" - kiwid там или что-то еще)
       * </pre>
       */
      public Builder setMiscId(int value) {
        bitField0_ |= 0x00000010;
        miscId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 misc_id = 6;</code>
       *
       * <pre>
       * misc_id (идентификатор "способа подбора" - kiwid там или что-то еще)
       * </pre>
       */
      public Builder clearMiscId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        miscId_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 campaign_id = 8;
      private int campaignId_ ;
      /**
       * <code>optional uint32 campaign_id = 8;</code>
       *
       * <pre>
       * кампания
       * </pre>
       */
      public boolean hasCampaignId() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 campaign_id = 8;</code>
       *
       * <pre>
       * кампания
       * </pre>
       */
      public int getCampaignId() {
        return campaignId_;
      }
      /**
       * <code>optional uint32 campaign_id = 8;</code>
       *
       * <pre>
       * кампания
       * </pre>
       */
      public Builder setCampaignId(int value) {
        bitField0_ |= 0x00000020;
        campaignId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 campaign_id = 8;</code>
       *
       * <pre>
       * кампания
       * </pre>
       */
      public Builder clearCampaignId() {
        bitField0_ = (bitField0_ & ~0x00000020);
        campaignId_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 server_id = 9;
      private int serverId_ ;
      /**
       * <code>optional uint32 server_id = 9;</code>
       *
       * <pre>
       * id баннерного демона
       * </pre>
       */
      public boolean hasServerId() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 server_id = 9;</code>
       *
       * <pre>
       * id баннерного демона
       * </pre>
       */
      public int getServerId() {
        return serverId_;
      }
      /**
       * <code>optional uint32 server_id = 9;</code>
       *
       * <pre>
       * id баннерного демона
       * </pre>
       */
      public Builder setServerId(int value) {
        bitField0_ |= 0x00000040;
        serverId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 server_id = 9;</code>
       *
       * <pre>
       * id баннерного демона
       * </pre>
       */
      public Builder clearServerId() {
        bitField0_ = (bitField0_ & ~0x00000040);
        serverId_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 order_number = 12;
      private int orderNumber_ ;
      /**
       * <code>optional uint32 order_number = 12;</code>
       *
       * <pre>
       * порядковый номер в выдаче
       * </pre>
       */
      public boolean hasOrderNumber() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 order_number = 12;</code>
       *
       * <pre>
       * порядковый номер в выдаче
       * </pre>
       */
      public int getOrderNumber() {
        return orderNumber_;
      }
      /**
       * <code>optional uint32 order_number = 12;</code>
       *
       * <pre>
       * порядковый номер в выдаче
       * </pre>
       */
      public Builder setOrderNumber(int value) {
        bitField0_ |= 0x00000080;
        orderNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 order_number = 12;</code>
       *
       * <pre>
       * порядковый номер в выдаче
       * </pre>
       */
      public Builder clearOrderNumber() {
        bitField0_ = (bitField0_ & ~0x00000080);
        orderNumber_ = 0;
        onChanged();
        return this;
      }

      // optional fixed32 campaign_version = 16;
      private int campaignVersion_ ;
      /**
       * <code>optional fixed32 campaign_version = 16;</code>
       *
       * <pre>
       * версия кампании в момент выполнения запроса
       * </pre>
       */
      public boolean hasCampaignVersion() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional fixed32 campaign_version = 16;</code>
       *
       * <pre>
       * версия кампании в момент выполнения запроса
       * </pre>
       */
      public int getCampaignVersion() {
        return campaignVersion_;
      }
      /**
       * <code>optional fixed32 campaign_version = 16;</code>
       *
       * <pre>
       * версия кампании в момент выполнения запроса
       * </pre>
       */
      public Builder setCampaignVersion(int value) {
        bitField0_ |= 0x00000100;
        campaignVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 campaign_version = 16;</code>
       *
       * <pre>
       * версия кампании в момент выполнения запроса
       * </pre>
       */
      public Builder clearCampaignVersion() {
        bitField0_ = (bitField0_ & ~0x00000100);
        campaignVersion_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 ctr_origin = 11;
      private int ctrOrigin_ ;
      /**
       * <code>optional uint32 ctr_origin = 11;</code>
       *
       * <pre>
       * происхождение ctr
       * </pre>
       */
      public boolean hasCtrOrigin() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 ctr_origin = 11;</code>
       *
       * <pre>
       * происхождение ctr
       * </pre>
       */
      public int getCtrOrigin() {
        return ctrOrigin_;
      }
      /**
       * <code>optional uint32 ctr_origin = 11;</code>
       *
       * <pre>
       * происхождение ctr
       * </pre>
       */
      public Builder setCtrOrigin(int value) {
        bitField0_ |= 0x00000200;
        ctrOrigin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ctr_origin = 11;</code>
       *
       * <pre>
       * происхождение ctr
       * </pre>
       */
      public Builder clearCtrOrigin() {
        bitField0_ = (bitField0_ & ~0x00000200);
        ctrOrigin_ = 0;
        onChanged();
        return this;
      }

      // optional float model_ctr = 14;
      private float modelCtr_ ;
      /**
       * <code>optional float model_ctr = 14;</code>
       *
       * <pre>
       * предсказанный моделью ctr.
       * </pre>
       */
      public boolean hasModelCtr() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional float model_ctr = 14;</code>
       *
       * <pre>
       * предсказанный моделью ctr.
       * </pre>
       */
      public float getModelCtr() {
        return modelCtr_;
      }
      /**
       * <code>optional float model_ctr = 14;</code>
       *
       * <pre>
       * предсказанный моделью ctr.
       * </pre>
       */
      public Builder setModelCtr(float value) {
        bitField0_ |= 0x00000400;
        modelCtr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float model_ctr = 14;</code>
       *
       * <pre>
       * предсказанный моделью ctr.
       * </pre>
       */
      public Builder clearModelCtr() {
        bitField0_ = (bitField0_ & ~0x00000400);
        modelCtr_ = 0F;
        onChanged();
        return this;
      }

      // optional float expected_ctr = 15;
      private float expectedCtr_ ;
      /**
       * <code>optional float expected_ctr = 15;</code>
       *
       * <pre>
       * ожидаемый ctr (тот, что участвует в аукционе). Не равен model_ctr из-за различных коррекций
       * </pre>
       */
      public boolean hasExpectedCtr() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float expected_ctr = 15;</code>
       *
       * <pre>
       * ожидаемый ctr (тот, что участвует в аукционе). Не равен model_ctr из-за различных коррекций
       * </pre>
       */
      public float getExpectedCtr() {
        return expectedCtr_;
      }
      /**
       * <code>optional float expected_ctr = 15;</code>
       *
       * <pre>
       * ожидаемый ctr (тот, что участвует в аукционе). Не равен model_ctr из-за различных коррекций
       * </pre>
       */
      public Builder setExpectedCtr(float value) {
        bitField0_ |= 0x00000800;
        expectedCtr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float expected_ctr = 15;</code>
       *
       * <pre>
       * ожидаемый ctr (тот, что участвует в аукционе). Не равен model_ctr из-за различных коррекций
       * </pre>
       */
      public Builder clearExpectedCtr() {
        bitField0_ = (bitField0_ & ~0x00000800);
        expectedCtr_ = 0F;
        onChanged();
        return this;
      }

      // optional float expected_clicks_cr = 85;
      private float expectedClicksCr_ ;
      /**
       * <code>optional float expected_clicks_cr = 85;</code>
       *
       * <pre>
       * ожидаемая доля конверсий для клика
       * </pre>
       */
      public boolean hasExpectedClicksCr() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional float expected_clicks_cr = 85;</code>
       *
       * <pre>
       * ожидаемая доля конверсий для клика
       * </pre>
       */
      public float getExpectedClicksCr() {
        return expectedClicksCr_;
      }
      /**
       * <code>optional float expected_clicks_cr = 85;</code>
       *
       * <pre>
       * ожидаемая доля конверсий для клика
       * </pre>
       */
      public Builder setExpectedClicksCr(float value) {
        bitField0_ |= 0x00001000;
        expectedClicksCr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float expected_clicks_cr = 85;</code>
       *
       * <pre>
       * ожидаемая доля конверсий для клика
       * </pre>
       */
      public Builder clearExpectedClicksCr() {
        bitField0_ = (bitField0_ & ~0x00001000);
        expectedClicksCr_ = 0F;
        onChanged();
        return this;
      }

      // optional uint32 expected_cpm = 7;
      private int expectedCpm_ ;
      /**
       * <code>optional uint32 expected_cpm = 7;</code>
       *
       * <pre>
       * ожидаемый cpm этого показа (cost * ctr * 1000) в рублях
       * </pre>
       */
      public boolean hasExpectedCpm() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional uint32 expected_cpm = 7;</code>
       *
       * <pre>
       * ожидаемый cpm этого показа (cost * ctr * 1000) в рублях
       * </pre>
       */
      public int getExpectedCpm() {
        return expectedCpm_;
      }
      /**
       * <code>optional uint32 expected_cpm = 7;</code>
       *
       * <pre>
       * ожидаемый cpm этого показа (cost * ctr * 1000) в рублях
       * </pre>
       */
      public Builder setExpectedCpm(int value) {
        bitField0_ |= 0x00002000;
        expectedCpm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 expected_cpm = 7;</code>
       *
       * <pre>
       * ожидаемый cpm этого показа (cost * ctr * 1000) в рублях
       * </pre>
       */
      public Builder clearExpectedCpm() {
        bitField0_ = (bitField0_ & ~0x00002000);
        expectedCpm_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 cost = 3;
      private int cost_ ;
      /**
       * <code>optional uint32 cost = 3;</code>
       *
       * <pre>
       * цена за данное событие в копейках (в случае показа - цена за 1000 штук)
       * </pre>
       */
      public boolean hasCost() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional uint32 cost = 3;</code>
       *
       * <pre>
       * цена за данное событие в копейках (в случае показа - цена за 1000 штук)
       * </pre>
       */
      public int getCost() {
        return cost_;
      }
      /**
       * <code>optional uint32 cost = 3;</code>
       *
       * <pre>
       * цена за данное событие в копейках (в случае показа - цена за 1000 штук)
       * </pre>
       */
      public Builder setCost(int value) {
        bitField0_ |= 0x00004000;
        cost_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 cost = 3;</code>
       *
       * <pre>
       * цена за данное событие в копейках (в случае показа - цена за 1000 штук)
       * </pre>
       */
      public Builder clearCost() {
        bitField0_ = (bitField0_ & ~0x00004000);
        cost_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 currency_cost = 19;
      private int currencyCost_ ;
      /**
       * <code>optional uint32 currency_cost = 19;</code>
       *
       * <pre>
       * цена за данное событие в 1/100 валюты (в случае показа - цена за 1000 штук)
       * </pre>
       */
      public boolean hasCurrencyCost() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional uint32 currency_cost = 19;</code>
       *
       * <pre>
       * цена за данное событие в 1/100 валюты (в случае показа - цена за 1000 штук)
       * </pre>
       */
      public int getCurrencyCost() {
        return currencyCost_;
      }
      /**
       * <code>optional uint32 currency_cost = 19;</code>
       *
       * <pre>
       * цена за данное событие в 1/100 валюты (в случае показа - цена за 1000 штук)
       * </pre>
       */
      public Builder setCurrencyCost(int value) {
        bitField0_ |= 0x00008000;
        currencyCost_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 currency_cost = 19;</code>
       *
       * <pre>
       * цена за данное событие в 1/100 валюты (в случае показа - цена за 1000 штук)
       * </pre>
       */
      public Builder clearCurrencyCost() {
        bitField0_ = (bitField0_ & ~0x00008000);
        currencyCost_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 currency_id = 26;
      private int currencyId_ ;
      /**
       * <code>optional uint32 currency_id = 26;</code>
       *
       * <pre>
       * идентификатор валюты пользователя
       * </pre>
       */
      public boolean hasCurrencyId() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional uint32 currency_id = 26;</code>
       *
       * <pre>
       * идентификатор валюты пользователя
       * </pre>
       */
      public int getCurrencyId() {
        return currencyId_;
      }
      /**
       * <code>optional uint32 currency_id = 26;</code>
       *
       * <pre>
       * идентификатор валюты пользователя
       * </pre>
       */
      public Builder setCurrencyId(int value) {
        bitField0_ |= 0x00010000;
        currencyId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 currency_id = 26;</code>
       *
       * <pre>
       * идентификатор валюты пользователя
       * </pre>
       */
      public Builder clearCurrencyId() {
        bitField0_ = (bitField0_ & ~0x00010000);
        currencyId_ = 0;
        onChanged();
        return this;
      }

      // optional float currency_rate = 97 [default = 1];
      private float currencyRate_ = 1F;
      /**
       * <code>optional float currency_rate = 97 [default = 1];</code>
       *
       * <pre>
       * курс валюты на момент подбора
       * </pre>
       */
      public boolean hasCurrencyRate() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional float currency_rate = 97 [default = 1];</code>
       *
       * <pre>
       * курс валюты на момент подбора
       * </pre>
       */
      public float getCurrencyRate() {
        return currencyRate_;
      }
      /**
       * <code>optional float currency_rate = 97 [default = 1];</code>
       *
       * <pre>
       * курс валюты на момент подбора
       * </pre>
       */
      public Builder setCurrencyRate(float value) {
        bitField0_ |= 0x00020000;
        currencyRate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float currency_rate = 97 [default = 1];</code>
       *
       * <pre>
       * курс валюты на момент подбора
       * </pre>
       */
      public Builder clearCurrencyRate() {
        bitField0_ = (bitField0_ & ~0x00020000);
        currencyRate_ = 1F;
        onChanged();
        return this;
      }

      // optional uint32 paid_ev_type = 96;
      private int paidEvType_ ;
      /**
       * <code>optional uint32 paid_ev_type = 96;</code>
       *
       * <pre>
       * тип события, за которое снимают деньги в данном баннере
       * </pre>
       */
      public boolean hasPaidEvType() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional uint32 paid_ev_type = 96;</code>
       *
       * <pre>
       * тип события, за которое снимают деньги в данном баннере
       * </pre>
       */
      public int getPaidEvType() {
        return paidEvType_;
      }
      /**
       * <code>optional uint32 paid_ev_type = 96;</code>
       *
       * <pre>
       * тип события, за которое снимают деньги в данном баннере
       * </pre>
       */
      public Builder setPaidEvType(int value) {
        bitField0_ |= 0x00040000;
        paidEvType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 paid_ev_type = 96;</code>
       *
       * <pre>
       * тип события, за которое снимают деньги в данном баннере
       * </pre>
       */
      public Builder clearPaidEvType() {
        bitField0_ = (bitField0_ & ~0x00040000);
        paidEvType_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 paid_banner_event = 113;
      private int paidBannerEvent_ ;
      /**
       * <code>optional uint32 paid_banner_event = 113;</code>
       *
       * <pre>
       * тип кастомного события в случае paid_ev_type = 10
       * </pre>
       */
      public boolean hasPaidBannerEvent() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional uint32 paid_banner_event = 113;</code>
       *
       * <pre>
       * тип кастомного события в случае paid_ev_type = 10
       * </pre>
       */
      public int getPaidBannerEvent() {
        return paidBannerEvent_;
      }
      /**
       * <code>optional uint32 paid_banner_event = 113;</code>
       *
       * <pre>
       * тип кастомного события в случае paid_ev_type = 10
       * </pre>
       */
      public Builder setPaidBannerEvent(int value) {
        bitField0_ |= 0x00080000;
        paidBannerEvent_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 paid_banner_event = 113;</code>
       *
       * <pre>
       * тип кастомного события в случае paid_ev_type = 10
       * </pre>
       */
      public Builder clearPaidBannerEvent() {
        bitField0_ = (bitField0_ & ~0x00080000);
        paidBannerEvent_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 currency_cost_ppe = 99;
      private int currencyCostPpe_ ;
      /**
       * <code>optional uint32 currency_cost_ppe = 99;</code>
       *
       * <pre>
       * стоимость события типа paid_ev_type в 1/100 валюты
       * </pre>
       */
      public boolean hasCurrencyCostPpe() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional uint32 currency_cost_ppe = 99;</code>
       *
       * <pre>
       * стоимость события типа paid_ev_type в 1/100 валюты
       * </pre>
       */
      public int getCurrencyCostPpe() {
        return currencyCostPpe_;
      }
      /**
       * <code>optional uint32 currency_cost_ppe = 99;</code>
       *
       * <pre>
       * стоимость события типа paid_ev_type в 1/100 валюты
       * </pre>
       */
      public Builder setCurrencyCostPpe(int value) {
        bitField0_ |= 0x00100000;
        currencyCostPpe_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 currency_cost_ppe = 99;</code>
       *
       * <pre>
       * стоимость события типа paid_ev_type в 1/100 валюты
       * </pre>
       */
      public Builder clearCurrencyCostPpe() {
        bitField0_ = (bitField0_ & ~0x00100000);
        currencyCostPpe_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 currency_cost_per_goal_for_ocpm = 100 [deprecated = true];
      private int currencyCostPerGoalForOcpm_ ;
      /**
       * <code>optional uint32 currency_cost_per_goal_for_ocpm = 100 [deprecated = true];</code>
       *
       * <pre>
       * стоимость конверсии для ocpm баннера
       * </pre>
       */
      @java.lang.Deprecated public boolean hasCurrencyCostPerGoalForOcpm() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional uint32 currency_cost_per_goal_for_ocpm = 100 [deprecated = true];</code>
       *
       * <pre>
       * стоимость конверсии для ocpm баннера
       * </pre>
       */
      @java.lang.Deprecated public int getCurrencyCostPerGoalForOcpm() {
        return currencyCostPerGoalForOcpm_;
      }
      /**
       * <code>optional uint32 currency_cost_per_goal_for_ocpm = 100 [deprecated = true];</code>
       *
       * <pre>
       * стоимость конверсии для ocpm баннера
       * </pre>
       */
      @java.lang.Deprecated public Builder setCurrencyCostPerGoalForOcpm(int value) {
        bitField0_ |= 0x00200000;
        currencyCostPerGoalForOcpm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 currency_cost_per_goal_for_ocpm = 100 [deprecated = true];</code>
       *
       * <pre>
       * стоимость конверсии для ocpm баннера
       * </pre>
       */
      @java.lang.Deprecated public Builder clearCurrencyCostPerGoalForOcpm() {
        bitField0_ = (bitField0_ & ~0x00200000);
        currencyCostPerGoalForOcpm_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 currency_base_ppe = 101;
      private int currencyBasePpe_ ;
      /**
       * <code>optional uint32 currency_base_ppe = 101;</code>
       *
       * <pre>
       * цена за событие из базы типа paid_ev_type в 1/100 валюты
       * </pre>
       */
      public boolean hasCurrencyBasePpe() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional uint32 currency_base_ppe = 101;</code>
       *
       * <pre>
       * цена за событие из базы типа paid_ev_type в 1/100 валюты
       * </pre>
       */
      public int getCurrencyBasePpe() {
        return currencyBasePpe_;
      }
      /**
       * <code>optional uint32 currency_base_ppe = 101;</code>
       *
       * <pre>
       * цена за событие из базы типа paid_ev_type в 1/100 валюты
       * </pre>
       */
      public Builder setCurrencyBasePpe(int value) {
        bitField0_ |= 0x00400000;
        currencyBasePpe_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 currency_base_ppe = 101;</code>
       *
       * <pre>
       * цена за событие из базы типа paid_ev_type в 1/100 валюты
       * </pre>
       */
      public Builder clearCurrencyBasePpe() {
        bitField0_ = (bitField0_ & ~0x00400000);
        currencyBasePpe_ = 0;
        onChanged();
        return this;
      }

      // optional int32 priced_ev_type = 115 [default = -1];
      private int pricedEvType_ = -1;
      /**
       * <code>optional int32 priced_ev_type = 115 [default = -1];</code>
       */
      public boolean hasPricedEvType() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional int32 priced_ev_type = 115 [default = -1];</code>
       */
      public int getPricedEvType() {
        return pricedEvType_;
      }
      /**
       * <code>optional int32 priced_ev_type = 115 [default = -1];</code>
       */
      public Builder setPricedEvType(int value) {
        bitField0_ |= 0x00800000;
        pricedEvType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 priced_ev_type = 115 [default = -1];</code>
       */
      public Builder clearPricedEvType() {
        bitField0_ = (bitField0_ & ~0x00800000);
        pricedEvType_ = -1;
        onChanged();
        return this;
      }

      // optional uint32 priced_banner_event = 116;
      private int pricedBannerEvent_ ;
      /**
       * <code>optional uint32 priced_banner_event = 116;</code>
       *
       * <pre>
       * тип события, за которое выставляется цена в данном баннере
       * выставляется только если не равен paid_ev_type
       * сейчас это только в случае oCPM
       * !! Внимание !! Невыставленное это поле не означает 0!
       * Чтобы не путались, по-дефолту задается значение -1
       * Следующие три поля выставляются только при выставленном priced_ev_type
       * </pre>
       */
      public boolean hasPricedBannerEvent() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional uint32 priced_banner_event = 116;</code>
       *
       * <pre>
       * тип события, за которое выставляется цена в данном баннере
       * выставляется только если не равен paid_ev_type
       * сейчас это только в случае oCPM
       * !! Внимание !! Невыставленное это поле не означает 0!
       * Чтобы не путались, по-дефолту задается значение -1
       * Следующие три поля выставляются только при выставленном priced_ev_type
       * </pre>
       */
      public int getPricedBannerEvent() {
        return pricedBannerEvent_;
      }
      /**
       * <code>optional uint32 priced_banner_event = 116;</code>
       *
       * <pre>
       * тип события, за которое выставляется цена в данном баннере
       * выставляется только если не равен paid_ev_type
       * сейчас это только в случае oCPM
       * !! Внимание !! Невыставленное это поле не означает 0!
       * Чтобы не путались, по-дефолту задается значение -1
       * Следующие три поля выставляются только при выставленном priced_ev_type
       * </pre>
       */
      public Builder setPricedBannerEvent(int value) {
        bitField0_ |= 0x01000000;
        pricedBannerEvent_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 priced_banner_event = 116;</code>
       *
       * <pre>
       * тип события, за которое выставляется цена в данном баннере
       * выставляется только если не равен paid_ev_type
       * сейчас это только в случае oCPM
       * !! Внимание !! Невыставленное это поле не означает 0!
       * Чтобы не путались, по-дефолту задается значение -1
       * Следующие три поля выставляются только при выставленном priced_ev_type
       * </pre>
       */
      public Builder clearPricedBannerEvent() {
        bitField0_ = (bitField0_ & ~0x01000000);
        pricedBannerEvent_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 currency_cost_ppre = 117;
      private int currencyCostPpre_ ;
      /**
       * <code>optional uint32 currency_cost_ppre = 117;</code>
       *
       * <pre>
       * стоимость события типа priced_ev_type в 1/100 валюты
       * </pre>
       */
      public boolean hasCurrencyCostPpre() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional uint32 currency_cost_ppre = 117;</code>
       *
       * <pre>
       * стоимость события типа priced_ev_type в 1/100 валюты
       * </pre>
       */
      public int getCurrencyCostPpre() {
        return currencyCostPpre_;
      }
      /**
       * <code>optional uint32 currency_cost_ppre = 117;</code>
       *
       * <pre>
       * стоимость события типа priced_ev_type в 1/100 валюты
       * </pre>
       */
      public Builder setCurrencyCostPpre(int value) {
        bitField0_ |= 0x02000000;
        currencyCostPpre_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 currency_cost_ppre = 117;</code>
       *
       * <pre>
       * стоимость события типа priced_ev_type в 1/100 валюты
       * </pre>
       */
      public Builder clearCurrencyCostPpre() {
        bitField0_ = (bitField0_ & ~0x02000000);
        currencyCostPpre_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 currency_base_ppre = 118;
      private int currencyBasePpre_ ;
      /**
       * <code>optional uint32 currency_base_ppre = 118;</code>
       *
       * <pre>
       * цена за событие из базы типа priced_ev_type в 1/100 валюты
       * </pre>
       */
      public boolean hasCurrencyBasePpre() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional uint32 currency_base_ppre = 118;</code>
       *
       * <pre>
       * цена за событие из базы типа priced_ev_type в 1/100 валюты
       * </pre>
       */
      public int getCurrencyBasePpre() {
        return currencyBasePpre_;
      }
      /**
       * <code>optional uint32 currency_base_ppre = 118;</code>
       *
       * <pre>
       * цена за событие из базы типа priced_ev_type в 1/100 валюты
       * </pre>
       */
      public Builder setCurrencyBasePpre(int value) {
        bitField0_ |= 0x04000000;
        currencyBasePpre_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 currency_base_ppre = 118;</code>
       *
       * <pre>
       * цена за событие из базы типа priced_ev_type в 1/100 валюты
       * </pre>
       */
      public Builder clearCurrencyBasePpre() {
        bitField0_ = (bitField0_ & ~0x04000000);
        currencyBasePpre_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 src_currency_cost = 109;
      private int srcCurrencyCost_ ;
      /**
       * <code>optional uint32 src_currency_cost = 109;</code>
       *
       * <pre>
       * исходная цена вирального события или клика для события 1080
       * </pre>
       */
      public boolean hasSrcCurrencyCost() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional uint32 src_currency_cost = 109;</code>
       *
       * <pre>
       * исходная цена вирального события или клика для события 1080
       * </pre>
       */
      public int getSrcCurrencyCost() {
        return srcCurrencyCost_;
      }
      /**
       * <code>optional uint32 src_currency_cost = 109;</code>
       *
       * <pre>
       * исходная цена вирального события или клика для события 1080
       * </pre>
       */
      public Builder setSrcCurrencyCost(int value) {
        bitField0_ |= 0x08000000;
        srcCurrencyCost_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 src_currency_cost = 109;</code>
       *
       * <pre>
       * исходная цена вирального события или клика для события 1080
       * </pre>
       */
      public Builder clearSrcCurrencyCost() {
        bitField0_ = (bitField0_ & ~0x08000000);
        srcCurrencyCost_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 src_event_type = 114;
      private int srcEventType_ ;
      /**
       * <code>optional uint32 src_event_type = 114;</code>
       *
       * <pre>
       * исходный ev_type (или banner_event для ev_type=10) для событий 1070 и 1080
       * </pre>
       */
      public boolean hasSrcEventType() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional uint32 src_event_type = 114;</code>
       *
       * <pre>
       * исходный ev_type (или banner_event для ev_type=10) для событий 1070 и 1080
       * </pre>
       */
      public int getSrcEventType() {
        return srcEventType_;
      }
      /**
       * <code>optional uint32 src_event_type = 114;</code>
       *
       * <pre>
       * исходный ev_type (или banner_event для ev_type=10) для событий 1070 и 1080
       * </pre>
       */
      public Builder setSrcEventType(int value) {
        bitField0_ |= 0x10000000;
        srcEventType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 src_event_type = 114;</code>
       *
       * <pre>
       * исходный ev_type (или banner_event для ev_type=10) для событий 1070 и 1080
       * </pre>
       */
      public Builder clearSrcEventType() {
        bitField0_ = (bitField0_ & ~0x10000000);
        srcEventType_ = 0;
        onChanged();
        return this;
      }

      // repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;
      private java.util.List<ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost> tpsCosts_ =
        java.util.Collections.emptyList();
      private void ensureTpsCostsIsMutable() {
        if (!((bitField0_ & 0x20000000) == 0x20000000)) {
          tpsCosts_ = new java.util.ArrayList<ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost>(tpsCosts_);
          bitField0_ |= 0x20000000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost, ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost.Builder, ru.mail.go.webbase.TargetProto.TargetMsg.TPS_costOrBuilder> tpsCostsBuilder_;

      /**
       * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
       *
       * <pre>
       * списания за услуги Third-Party services
       * </pre>
       */
      public java.util.List<ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost> getTpsCostsList() {
        if (tpsCostsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(tpsCosts_);
        } else {
          return tpsCostsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
       *
       * <pre>
       * списания за услуги Third-Party services
       * </pre>
       */
      public int getTpsCostsCount() {
        if (tpsCostsBuilder_ == null) {
          return tpsCosts_.size();
        } else {
          return tpsCostsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
       *
       * <pre>
       * списания за услуги Third-Party services
       * </pre>
       */
      public ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost getTpsCosts(int index) {
        if (tpsCostsBuilder_ == null) {
          return tpsCosts_.get(index);
        } else {
          return tpsCostsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
       *
       * <pre>
       * списания за услуги Third-Party services
       * </pre>
       */
      public Builder setTpsCosts(
          int index, ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost value) {
        if (tpsCostsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTpsCostsIsMutable();
          tpsCosts_.set(index, value);
          onChanged();
        } else {
          tpsCostsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
       *
       * <pre>
       * списания за услуги Third-Party services
       * </pre>
       */
      public Builder setTpsCosts(
          int index, ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost.Builder builderForValue) {
        if (tpsCostsBuilder_ == null) {
          ensureTpsCostsIsMutable();
          tpsCosts_.set(index, builderForValue.build());
          onChanged();
        } else {
          tpsCostsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
       *
       * <pre>
       * списания за услуги Third-Party services
       * </pre>
       */
      public Builder addTpsCosts(ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost value) {
        if (tpsCostsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTpsCostsIsMutable();
          tpsCosts_.add(value);
          onChanged();
        } else {
          tpsCostsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
       *
       * <pre>
       * списания за услуги Third-Party services
       * </pre>
       */
      public Builder addTpsCosts(
          int index, ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost value) {
        if (tpsCostsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTpsCostsIsMutable();
          tpsCosts_.add(index, value);
          onChanged();
        } else {
          tpsCostsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
       *
       * <pre>
       * списания за услуги Third-Party services
       * </pre>
       */
      public Builder addTpsCosts(
          ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost.Builder builderForValue) {
        if (tpsCostsBuilder_ == null) {
          ensureTpsCostsIsMutable();
          tpsCosts_.add(builderForValue.build());
          onChanged();
        } else {
          tpsCostsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
       *
       * <pre>
       * списания за услуги Third-Party services
       * </pre>
       */
      public Builder addTpsCosts(
          int index, ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost.Builder builderForValue) {
        if (tpsCostsBuilder_ == null) {
          ensureTpsCostsIsMutable();
          tpsCosts_.add(index, builderForValue.build());
          onChanged();
        } else {
          tpsCostsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
       *
       * <pre>
       * списания за услуги Third-Party services
       * </pre>
       */
      public Builder addAllTpsCosts(
          java.lang.Iterable<? extends ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost> values) {
        if (tpsCostsBuilder_ == null) {
          ensureTpsCostsIsMutable();
          super.addAll(values, tpsCosts_);
          onChanged();
        } else {
          tpsCostsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
       *
       * <pre>
       * списания за услуги Third-Party services
       * </pre>
       */
      public Builder clearTpsCosts() {
        if (tpsCostsBuilder_ == null) {
          tpsCosts_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x20000000);
          onChanged();
        } else {
          tpsCostsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
       *
       * <pre>
       * списания за услуги Third-Party services
       * </pre>
       */
      public Builder removeTpsCosts(int index) {
        if (tpsCostsBuilder_ == null) {
          ensureTpsCostsIsMutable();
          tpsCosts_.remove(index);
          onChanged();
        } else {
          tpsCostsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
       *
       * <pre>
       * списания за услуги Third-Party services
       * </pre>
       */
      public ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost.Builder getTpsCostsBuilder(
          int index) {
        return getTpsCostsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
       *
       * <pre>
       * списания за услуги Third-Party services
       * </pre>
       */
      public ru.mail.go.webbase.TargetProto.TargetMsg.TPS_costOrBuilder getTpsCostsOrBuilder(
          int index) {
        if (tpsCostsBuilder_ == null) {
          return tpsCosts_.get(index);  } else {
          return tpsCostsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
       *
       * <pre>
       * списания за услуги Third-Party services
       * </pre>
       */
      public java.util.List<? extends ru.mail.go.webbase.TargetProto.TargetMsg.TPS_costOrBuilder> 
           getTpsCostsOrBuilderList() {
        if (tpsCostsBuilder_ != null) {
          return tpsCostsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(tpsCosts_);
        }
      }
      /**
       * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
       *
       * <pre>
       * списания за услуги Third-Party services
       * </pre>
       */
      public ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost.Builder addTpsCostsBuilder() {
        return getTpsCostsFieldBuilder().addBuilder(
            ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost.getDefaultInstance());
      }
      /**
       * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
       *
       * <pre>
       * списания за услуги Third-Party services
       * </pre>
       */
      public ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost.Builder addTpsCostsBuilder(
          int index) {
        return getTpsCostsFieldBuilder().addBuilder(
            index, ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost.getDefaultInstance());
      }
      /**
       * <code>repeated .ru.mail.go.webbase.TargetMsg.TPS_cost tps_costs = 27;</code>
       *
       * <pre>
       * списания за услуги Third-Party services
       * </pre>
       */
      public java.util.List<ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost.Builder> 
           getTpsCostsBuilderList() {
        return getTpsCostsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost, ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost.Builder, ru.mail.go.webbase.TargetProto.TargetMsg.TPS_costOrBuilder> 
          getTpsCostsFieldBuilder() {
        if (tpsCostsBuilder_ == null) {
          tpsCostsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost, ru.mail.go.webbase.TargetProto.TargetMsg.TPS_cost.Builder, ru.mail.go.webbase.TargetProto.TargetMsg.TPS_costOrBuilder>(
                  tpsCosts_,
                  ((bitField0_ & 0x20000000) == 0x20000000),
                  getParentForChildren(),
                  isClean());
          tpsCosts_ = null;
        }
        return tpsCostsBuilder_;
      }

      // optional uint32 geo = 20;
      private int geo_ ;
      /**
       * <code>optional uint32 geo = 20;</code>
       *
       * <pre>
       * geo полученной заменой региона на регион из пользователького профиля
       * </pre>
       */
      public boolean hasGeo() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional uint32 geo = 20;</code>
       *
       * <pre>
       * geo полученной заменой региона на регион из пользователького профиля
       * </pre>
       */
      public int getGeo() {
        return geo_;
      }
      /**
       * <code>optional uint32 geo = 20;</code>
       *
       * <pre>
       * geo полученной заменой региона на регион из пользователького профиля
       * </pre>
       */
      public Builder setGeo(int value) {
        bitField0_ |= 0x40000000;
        geo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 geo = 20;</code>
       *
       * <pre>
       * geo полученной заменой региона на регион из пользователького профиля
       * </pre>
       */
      public Builder clearGeo() {
        bitField0_ = (bitField0_ & ~0x40000000);
        geo_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 req_geo = 81;
      private int reqGeo_ ;
      /**
       * <code>optional uint32 req_geo = 81;</code>
       *
       * <pre>
       * geo пришедшее в запросе без каких-либо подмен
       * </pre>
       */
      public boolean hasReqGeo() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional uint32 req_geo = 81;</code>
       *
       * <pre>
       * geo пришедшее в запросе без каких-либо подмен
       * </pre>
       */
      public int getReqGeo() {
        return reqGeo_;
      }
      /**
       * <code>optional uint32 req_geo = 81;</code>
       *
       * <pre>
       * geo пришедшее в запросе без каких-либо подмен
       * </pre>
       */
      public Builder setReqGeo(int value) {
        bitField0_ |= 0x80000000;
        reqGeo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 req_geo = 81;</code>
       *
       * <pre>
       * geo пришедшее в запросе без каких-либо подмен
       * </pre>
       */
      public Builder clearReqGeo() {
        bitField0_ = (bitField0_ & ~0x80000000);
        reqGeo_ = 0;
        onChanged();
        return this;
      }

      // optional fixed64 impression_id = 21;
      private long impressionId_ ;
      /**
       * <code>optional fixed64 impression_id = 21;</code>
       *
       * <pre>
       * идентификатор запроса
       * </pre>
       */
      public boolean hasImpressionId() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional fixed64 impression_id = 21;</code>
       *
       * <pre>
       * идентификатор запроса
       * </pre>
       */
      public long getImpressionId() {
        return impressionId_;
      }
      /**
       * <code>optional fixed64 impression_id = 21;</code>
       *
       * <pre>
       * идентификатор запроса
       * </pre>
       */
      public Builder setImpressionId(long value) {
        bitField1_ |= 0x00000001;
        impressionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 impression_id = 21;</code>
       *
       * <pre>
       * идентификатор запроса
       * </pre>
       */
      public Builder clearImpressionId() {
        bitField1_ = (bitField1_ & ~0x00000001);
        impressionId_ = 0L;
        onChanged();
        return this;
      }

      // optional fixed64 original_impression_id = 77;
      private long originalImpressionId_ ;
      /**
       * <code>optional fixed64 original_impression_id = 77;</code>
       *
       * <pre>
       * идентификатор оригинального запроса
       * </pre>
       */
      public boolean hasOriginalImpressionId() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional fixed64 original_impression_id = 77;</code>
       *
       * <pre>
       * идентификатор оригинального запроса
       * </pre>
       */
      public long getOriginalImpressionId() {
        return originalImpressionId_;
      }
      /**
       * <code>optional fixed64 original_impression_id = 77;</code>
       *
       * <pre>
       * идентификатор оригинального запроса
       * </pre>
       */
      public Builder setOriginalImpressionId(long value) {
        bitField1_ |= 0x00000002;
        originalImpressionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 original_impression_id = 77;</code>
       *
       * <pre>
       * идентификатор оригинального запроса
       * </pre>
       */
      public Builder clearOriginalImpressionId() {
        bitField1_ = (bitField1_ & ~0x00000002);
        originalImpressionId_ = 0L;
        onChanged();
        return this;
      }

      // optional fixed32 original_req_ts = 78;
      private int originalReqTs_ ;
      /**
       * <code>optional fixed32 original_req_ts = 78;</code>
       *
       * <pre>
       * время оригинального запроса
       * </pre>
       */
      public boolean hasOriginalReqTs() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional fixed32 original_req_ts = 78;</code>
       *
       * <pre>
       * время оригинального запроса
       * </pre>
       */
      public int getOriginalReqTs() {
        return originalReqTs_;
      }
      /**
       * <code>optional fixed32 original_req_ts = 78;</code>
       *
       * <pre>
       * время оригинального запроса
       * </pre>
       */
      public Builder setOriginalReqTs(int value) {
        bitField1_ |= 0x00000004;
        originalReqTs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 original_req_ts = 78;</code>
       *
       * <pre>
       * время оригинального запроса
       * </pre>
       */
      public Builder clearOriginalReqTs() {
        bitField1_ = (bitField1_ & ~0x00000004);
        originalReqTs_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 subrequest_id = 22;
      private int subrequestId_ ;
      /**
       * <code>optional uint32 subrequest_id = 22;</code>
       *
       * <pre>
       * идентификатор подзапроса (для множественных запросов)
       * </pre>
       */
      public boolean hasSubrequestId() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 subrequest_id = 22;</code>
       *
       * <pre>
       * идентификатор подзапроса (для множественных запросов)
       * </pre>
       */
      public int getSubrequestId() {
        return subrequestId_;
      }
      /**
       * <code>optional uint32 subrequest_id = 22;</code>
       *
       * <pre>
       * идентификатор подзапроса (для множественных запросов)
       * </pre>
       */
      public Builder setSubrequestId(int value) {
        bitField1_ |= 0x00000008;
        subrequestId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 subrequest_id = 22;</code>
       *
       * <pre>
       * идентификатор подзапроса (для множественных запросов)
       * </pre>
       */
      public Builder clearSubrequestId() {
        bitField1_ = (bitField1_ & ~0x00000008);
        subrequestId_ = 0;
        onChanged();
        return this;
      }

      // optional fixed32 req_ts = 2;
      private int reqTs_ ;
      /**
       * <code>optional fixed32 req_ts = 2;</code>
       *
       * <pre>
       * время запроса на показ рекламы
       * </pre>
       */
      public boolean hasReqTs() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional fixed32 req_ts = 2;</code>
       *
       * <pre>
       * время запроса на показ рекламы
       * </pre>
       */
      public int getReqTs() {
        return reqTs_;
      }
      /**
       * <code>optional fixed32 req_ts = 2;</code>
       *
       * <pre>
       * время запроса на показ рекламы
       * </pre>
       */
      public Builder setReqTs(int value) {
        bitField1_ |= 0x00000010;
        reqTs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 req_ts = 2;</code>
       *
       * <pre>
       * время запроса на показ рекламы
       * </pre>
       */
      public Builder clearReqTs() {
        bitField1_ = (bitField1_ & ~0x00000010);
        reqTs_ = 0;
        onChanged();
        return this;
      }

      // optional fixed32 req_user_ip = 18;
      private int reqUserIp_ ;
      /**
       * <code>optional fixed32 req_user_ip = 18;</code>
       *
       * <pre>
       * ip юзера в момент запроса рекламы
       * </pre>
       */
      public boolean hasReqUserIp() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional fixed32 req_user_ip = 18;</code>
       *
       * <pre>
       * ip юзера в момент запроса рекламы
       * </pre>
       */
      public int getReqUserIp() {
        return reqUserIp_;
      }
      /**
       * <code>optional fixed32 req_user_ip = 18;</code>
       *
       * <pre>
       * ip юзера в момент запроса рекламы
       * </pre>
       */
      public Builder setReqUserIp(int value) {
        bitField1_ |= 0x00000020;
        reqUserIp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 req_user_ip = 18;</code>
       *
       * <pre>
       * ip юзера в момент запроса рекламы
       * </pre>
       */
      public Builder clearReqUserIp() {
        bitField1_ = (bitField1_ & ~0x00000020);
        reqUserIp_ = 0;
        onChanged();
        return this;
      }

      // optional bytes req_user_ipv6 = 23;
      private com.google.protobuf.ByteString reqUserIpv6_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes req_user_ipv6 = 23;</code>
       *
       * <pre>
       * ipv6 юзера в момент запроса рекламы
       * </pre>
       */
      public boolean hasReqUserIpv6() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bytes req_user_ipv6 = 23;</code>
       *
       * <pre>
       * ipv6 юзера в момент запроса рекламы
       * </pre>
       */
      public com.google.protobuf.ByteString getReqUserIpv6() {
        return reqUserIpv6_;
      }
      /**
       * <code>optional bytes req_user_ipv6 = 23;</code>
       *
       * <pre>
       * ipv6 юзера в момент запроса рекламы
       * </pre>
       */
      public Builder setReqUserIpv6(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000040;
        reqUserIpv6_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes req_user_ipv6 = 23;</code>
       *
       * <pre>
       * ipv6 юзера в момент запроса рекламы
       * </pre>
       */
      public Builder clearReqUserIpv6() {
        bitField1_ = (bitField1_ & ~0x00000040);
        reqUserIpv6_ = getDefaultInstance().getReqUserIpv6();
        onChanged();
        return this;
      }

      // optional uint32 image_id = 24;
      private int imageId_ ;
      /**
       * <code>optional uint32 image_id = 24;</code>
       *
       * <pre>
       * идентификатор картинки
       * </pre>
       */
      public boolean hasImageId() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 image_id = 24;</code>
       *
       * <pre>
       * идентификатор картинки
       * </pre>
       */
      public int getImageId() {
        return imageId_;
      }
      /**
       * <code>optional uint32 image_id = 24;</code>
       *
       * <pre>
       * идентификатор картинки
       * </pre>
       */
      public Builder setImageId(int value) {
        bitField1_ |= 0x00000080;
        imageId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 image_id = 24;</code>
       *
       * <pre>
       * идентификатор картинки
       * </pre>
       */
      public Builder clearImageId() {
        bitField1_ = (bitField1_ & ~0x00000080);
        imageId_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 audience_id = 25;
      private int audienceId_ ;
      /**
       * <code>optional uint32 audience_id = 25;</code>
       *
       * <pre>
       * флаг наличия аудитории в таргетинге: бит 0 - есть позитивная, бит 1 - есть негативная
       * </pre>
       */
      public boolean hasAudienceId() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 audience_id = 25;</code>
       *
       * <pre>
       * флаг наличия аудитории в таргетинге: бит 0 - есть позитивная, бит 1 - есть негативная
       * </pre>
       */
      public int getAudienceId() {
        return audienceId_;
      }
      /**
       * <code>optional uint32 audience_id = 25;</code>
       *
       * <pre>
       * флаг наличия аудитории в таргетинге: бит 0 - есть позитивная, бит 1 - есть негативная
       * </pre>
       */
      public Builder setAudienceId(int value) {
        bitField1_ |= 0x00000100;
        audienceId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 audience_id = 25;</code>
       *
       * <pre>
       * флаг наличия аудитории в таргетинге: бит 0 - есть позитивная, бит 1 - есть негативная
       * </pre>
       */
      public Builder clearAudienceId() {
        bitField1_ = (bitField1_ & ~0x00000100);
        audienceId_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 bannerd_test_id = 30;
      private int bannerdTestId_ ;
      /**
       * <code>optional uint32 bannerd_test_id = 30;</code>
       *
       * <pre>
       * test_id из конфига баннерного демона
       * </pre>
       */
      public boolean hasBannerdTestId() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 bannerd_test_id = 30;</code>
       *
       * <pre>
       * test_id из конфига баннерного демона
       * </pre>
       */
      public int getBannerdTestId() {
        return bannerdTestId_;
      }
      /**
       * <code>optional uint32 bannerd_test_id = 30;</code>
       *
       * <pre>
       * test_id из конфига баннерного демона
       * </pre>
       */
      public Builder setBannerdTestId(int value) {
        bitField1_ |= 0x00000200;
        bannerdTestId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 bannerd_test_id = 30;</code>
       *
       * <pre>
       * test_id из конфига баннерного демона
       * </pre>
       */
      public Builder clearBannerdTestId() {
        bitField1_ = (bitField1_ & ~0x00000200);
        bannerdTestId_ = 0;
        onChanged();
        return this;
      }

      // optional int32 limited_bannerd_test_id = 31 [default = -1];
      private int limitedBannerdTestId_ = -1;
      /**
       * <code>optional int32 limited_bannerd_test_id = 31 [default = -1];</code>
       *
       * <pre>
       * test_id из конфига баннерного демона, если для него выделена доля лимитов
       * </pre>
       */
      public boolean hasLimitedBannerdTestId() {
        return ((bitField1_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 limited_bannerd_test_id = 31 [default = -1];</code>
       *
       * <pre>
       * test_id из конфига баннерного демона, если для него выделена доля лимитов
       * </pre>
       */
      public int getLimitedBannerdTestId() {
        return limitedBannerdTestId_;
      }
      /**
       * <code>optional int32 limited_bannerd_test_id = 31 [default = -1];</code>
       *
       * <pre>
       * test_id из конфига баннерного демона, если для него выделена доля лимитов
       * </pre>
       */
      public Builder setLimitedBannerdTestId(int value) {
        bitField1_ |= 0x00000400;
        limitedBannerdTestId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 limited_bannerd_test_id = 31 [default = -1];</code>
       *
       * <pre>
       * test_id из конфига баннерного демона, если для него выделена доля лимитов
       * </pre>
       */
      public Builder clearLimitedBannerdTestId() {
        bitField1_ = (bitField1_ & ~0x00000400);
        limitedBannerdTestId_ = -1;
        onChanged();
        return this;
      }

      // optional float alive_money_ratio = 35;
      private float aliveMoneyRatio_ ;
      /**
       * <code>optional float alive_money_ratio = 35;</code>
       *
       * <pre>
       * доля живых денег пользователя на момент показа
       * </pre>
       */
      public boolean hasAliveMoneyRatio() {
        return ((bitField1_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float alive_money_ratio = 35;</code>
       *
       * <pre>
       * доля живых денег пользователя на момент показа
       * </pre>
       */
      public float getAliveMoneyRatio() {
        return aliveMoneyRatio_;
      }
      /**
       * <code>optional float alive_money_ratio = 35;</code>
       *
       * <pre>
       * доля живых денег пользователя на момент показа
       * </pre>
       */
      public Builder setAliveMoneyRatio(float value) {
        bitField1_ |= 0x00000800;
        aliveMoneyRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alive_money_ratio = 35;</code>
       *
       * <pre>
       * доля живых денег пользователя на момент показа
       * </pre>
       */
      public Builder clearAliveMoneyRatio() {
        bitField1_ = (bitField1_ & ~0x00000800);
        aliveMoneyRatio_ = 0F;
        onChanged();
        return this;
      }

      // optional uint32 filter = 40;
      private int filter_ ;
      /**
       * <code>optional uint32 filter = 40;</code>
       *
       * <pre>
       * статус таргетовского антифрода
       * </pre>
       */
      public boolean hasFilter() {
        return ((bitField1_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional uint32 filter = 40;</code>
       *
       * <pre>
       * статус таргетовского антифрода
       * </pre>
       */
      public int getFilter() {
        return filter_;
      }
      /**
       * <code>optional uint32 filter = 40;</code>
       *
       * <pre>
       * статус таргетовского антифрода
       * </pre>
       */
      public Builder setFilter(int value) {
        bitField1_ |= 0x00001000;
        filter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 filter = 40;</code>
       *
       * <pre>
       * статус таргетовского антифрода
       * </pre>
       */
      public Builder clearFilter() {
        bitField1_ = (bitField1_ & ~0x00001000);
        filter_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 fake_filter = 41;
      private int fakeFilter_ ;
      /**
       * <code>optional uint32 fake_filter = 41;</code>
       *
       * <pre>
       * статус антифрода, когда правило сработало, но оно заблокированно для данной площадки
       * </pre>
       */
      public boolean hasFakeFilter() {
        return ((bitField1_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional uint32 fake_filter = 41;</code>
       *
       * <pre>
       * статус антифрода, когда правило сработало, но оно заблокированно для данной площадки
       * </pre>
       */
      public int getFakeFilter() {
        return fakeFilter_;
      }
      /**
       * <code>optional uint32 fake_filter = 41;</code>
       *
       * <pre>
       * статус антифрода, когда правило сработало, но оно заблокированно для данной площадки
       * </pre>
       */
      public Builder setFakeFilter(int value) {
        bitField1_ |= 0x00002000;
        fakeFilter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 fake_filter = 41;</code>
       *
       * <pre>
       * статус антифрода, когда правило сработало, но оно заблокированно для данной площадки
       * </pre>
       */
      public Builder clearFakeFilter() {
        bitField1_ = (bitField1_ & ~0x00002000);
        fakeFilter_ = 0;
        onChanged();
        return this;
      }

      // optional fixed32 banner_text_hash = 57;
      private int bannerTextHash_ ;
      /**
       * <code>optional fixed32 banner_text_hash = 57;</code>
       *
       * <pre>
       * хэш текста     баннера по алгоритму super_fast_hash
       * </pre>
       */
      public boolean hasBannerTextHash() {
        return ((bitField1_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional fixed32 banner_text_hash = 57;</code>
       *
       * <pre>
       * хэш текста     баннера по алгоритму super_fast_hash
       * </pre>
       */
      public int getBannerTextHash() {
        return bannerTextHash_;
      }
      /**
       * <code>optional fixed32 banner_text_hash = 57;</code>
       *
       * <pre>
       * хэш текста     баннера по алгоритму super_fast_hash
       * </pre>
       */
      public Builder setBannerTextHash(int value) {
        bitField1_ |= 0x00004000;
        bannerTextHash_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 banner_text_hash = 57;</code>
       *
       * <pre>
       * хэш текста     баннера по алгоритму super_fast_hash
       * </pre>
       */
      public Builder clearBannerTextHash() {
        bitField1_ = (bitField1_ & ~0x00004000);
        bannerTextHash_ = 0;
        onChanged();
        return this;
      }

      // optional fixed32 banner_title_hash = 58;
      private int bannerTitleHash_ ;
      /**
       * <code>optional fixed32 banner_title_hash = 58;</code>
       *
       * <pre>
       * хэш заголовка  баннера по алгоритму super_fast_hash
       * </pre>
       */
      public boolean hasBannerTitleHash() {
        return ((bitField1_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional fixed32 banner_title_hash = 58;</code>
       *
       * <pre>
       * хэш заголовка  баннера по алгоритму super_fast_hash
       * </pre>
       */
      public int getBannerTitleHash() {
        return bannerTitleHash_;
      }
      /**
       * <code>optional fixed32 banner_title_hash = 58;</code>
       *
       * <pre>
       * хэш заголовка  баннера по алгоритму super_fast_hash
       * </pre>
       */
      public Builder setBannerTitleHash(int value) {
        bitField1_ |= 0x00008000;
        bannerTitleHash_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 banner_title_hash = 58;</code>
       *
       * <pre>
       * хэш заголовка  баннера по алгоритму super_fast_hash
       * </pre>
       */
      public Builder clearBannerTitleHash() {
        bitField1_ = (bitField1_ & ~0x00008000);
        bannerTitleHash_ = 0;
        onChanged();
        return this;
      }

      // optional fixed64 mm_user_id = 61;
      private long mmUserId_ ;
      /**
       * <code>optional fixed64 mm_user_id = 61;</code>
       *
       * <pre>
       * id пользователя ММ
       * </pre>
       */
      public boolean hasMmUserId() {
        return ((bitField1_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional fixed64 mm_user_id = 61;</code>
       *
       * <pre>
       * id пользователя ММ
       * </pre>
       */
      public long getMmUserId() {
        return mmUserId_;
      }
      /**
       * <code>optional fixed64 mm_user_id = 61;</code>
       *
       * <pre>
       * id пользователя ММ
       * </pre>
       */
      public Builder setMmUserId(long value) {
        bitField1_ |= 0x00010000;
        mmUserId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 mm_user_id = 61;</code>
       *
       * <pre>
       * id пользователя ММ
       * </pre>
       */
      public Builder clearMmUserId() {
        bitField1_ = (bitField1_ & ~0x00010000);
        mmUserId_ = 0L;
        onChanged();
        return this;
      }

      // optional uint32 shows_count = 13;
      private int showsCount_ ;
      /**
       * <code>optional uint32 shows_count = 13;</code>
       *
       * <pre>
       * количество показов баннеров кампании для пользователя
       * </pre>
       */
      public boolean hasShowsCount() {
        return ((bitField1_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional uint32 shows_count = 13;</code>
       *
       * <pre>
       * количество показов баннеров кампании для пользователя
       * </pre>
       */
      public int getShowsCount() {
        return showsCount_;
      }
      /**
       * <code>optional uint32 shows_count = 13;</code>
       *
       * <pre>
       * количество показов баннеров кампании для пользователя
       * </pre>
       */
      public Builder setShowsCount(int value) {
        bitField1_ |= 0x00020000;
        showsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 shows_count = 13;</code>
       *
       * <pre>
       * количество показов баннеров кампании для пользователя
       * </pre>
       */
      public Builder clearShowsCount() {
        bitField1_ = (bitField1_ & ~0x00020000);
        showsCount_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 clicks_count = 82;
      private int clicksCount_ ;
      /**
       * <code>optional uint32 clicks_count = 82;</code>
       *
       * <pre>
       * количество кликов пользователя по баннернам кампании
       * </pre>
       */
      public boolean hasClicksCount() {
        return ((bitField1_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional uint32 clicks_count = 82;</code>
       *
       * <pre>
       * количество кликов пользователя по баннернам кампании
       * </pre>
       */
      public int getClicksCount() {
        return clicksCount_;
      }
      /**
       * <code>optional uint32 clicks_count = 82;</code>
       *
       * <pre>
       * количество кликов пользователя по баннернам кампании
       * </pre>
       */
      public Builder setClicksCount(int value) {
        bitField1_ |= 0x00040000;
        clicksCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 clicks_count = 82;</code>
       *
       * <pre>
       * количество кликов пользователя по баннернам кампании
       * </pre>
       */
      public Builder clearClicksCount() {
        bitField1_ = (bitField1_ & ~0x00040000);
        clicksCount_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 banner_shown_times = 84;
      private int bannerShownTimes_ ;
      /**
       * <code>optional uint32 banner_shown_times = 84;</code>
       *
       * <pre>
       * номер показа баннера по куки
       * </pre>
       */
      public boolean hasBannerShownTimes() {
        return ((bitField1_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional uint32 banner_shown_times = 84;</code>
       *
       * <pre>
       * номер показа баннера по куки
       * </pre>
       */
      public int getBannerShownTimes() {
        return bannerShownTimes_;
      }
      /**
       * <code>optional uint32 banner_shown_times = 84;</code>
       *
       * <pre>
       * номер показа баннера по куки
       * </pre>
       */
      public Builder setBannerShownTimes(int value) {
        bitField1_ |= 0x00080000;
        bannerShownTimes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 banner_shown_times = 84;</code>
       *
       * <pre>
       * номер показа баннера по куки
       * </pre>
       */
      public Builder clearBannerShownTimes() {
        bitField1_ = (bitField1_ & ~0x00080000);
        bannerShownTimes_ = 0;
        onChanged();
        return this;
      }

      // repeated uint32 apps = 79 [packed = true];
      private java.util.List<java.lang.Integer> apps_ = java.util.Collections.emptyList();
      private void ensureAppsIsMutable() {
        if (!((bitField1_ & 0x00100000) == 0x00100000)) {
          apps_ = new java.util.ArrayList<java.lang.Integer>(apps_);
          bitField1_ |= 0x00100000;
         }
      }
      /**
       * <code>repeated uint32 apps = 79 [packed = true];</code>
       *
       * <pre>
       * apps_installed
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAppsList() {
        return java.util.Collections.unmodifiableList(apps_);
      }
      /**
       * <code>repeated uint32 apps = 79 [packed = true];</code>
       *
       * <pre>
       * apps_installed
       * </pre>
       */
      public int getAppsCount() {
        return apps_.size();
      }
      /**
       * <code>repeated uint32 apps = 79 [packed = true];</code>
       *
       * <pre>
       * apps_installed
       * </pre>
       */
      public int getApps(int index) {
        return apps_.get(index);
      }
      /**
       * <code>repeated uint32 apps = 79 [packed = true];</code>
       *
       * <pre>
       * apps_installed
       * </pre>
       */
      public Builder setApps(
          int index, int value) {
        ensureAppsIsMutable();
        apps_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 apps = 79 [packed = true];</code>
       *
       * <pre>
       * apps_installed
       * </pre>
       */
      public Builder addApps(int value) {
        ensureAppsIsMutable();
        apps_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 apps = 79 [packed = true];</code>
       *
       * <pre>
       * apps_installed
       * </pre>
       */
      public Builder addAllApps(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAppsIsMutable();
        super.addAll(values, apps_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 apps = 79 [packed = true];</code>
       *
       * <pre>
       * apps_installed
       * </pre>
       */
      public Builder clearApps() {
        apps_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00100000);
        onChanged();
        return this;
      }

      // optional uint32 mobile_osver = 80;
      private int mobileOsver_ ;
      /**
       * <code>optional uint32 mobile_osver = 80;</code>
       *
       * <pre>
       * хеш от строки с версией мобильной ос
       * </pre>
       */
      public boolean hasMobileOsver() {
        return ((bitField1_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional uint32 mobile_osver = 80;</code>
       *
       * <pre>
       * хеш от строки с версией мобильной ос
       * </pre>
       */
      public int getMobileOsver() {
        return mobileOsver_;
      }
      /**
       * <code>optional uint32 mobile_osver = 80;</code>
       *
       * <pre>
       * хеш от строки с версией мобильной ос
       * </pre>
       */
      public Builder setMobileOsver(int value) {
        bitField1_ |= 0x00200000;
        mobileOsver_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 mobile_osver = 80;</code>
       *
       * <pre>
       * хеш от строки с версией мобильной ос
       * </pre>
       */
      public Builder clearMobileOsver() {
        bitField1_ = (bitField1_ & ~0x00200000);
        mobileOsver_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 mobile_region = 106;
      private int mobileRegion_ ;
      /**
       * <code>optional uint32 mobile_region = 106;</code>
       *
       * <pre>
       * BT_MOBILE_REGION
       * </pre>
       */
      public boolean hasMobileRegion() {
        return ((bitField1_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional uint32 mobile_region = 106;</code>
       *
       * <pre>
       * BT_MOBILE_REGION
       * </pre>
       */
      public int getMobileRegion() {
        return mobileRegion_;
      }
      /**
       * <code>optional uint32 mobile_region = 106;</code>
       *
       * <pre>
       * BT_MOBILE_REGION
       * </pre>
       */
      public Builder setMobileRegion(int value) {
        bitField1_ |= 0x00400000;
        mobileRegion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 mobile_region = 106;</code>
       *
       * <pre>
       * BT_MOBILE_REGION
       * </pre>
       */
      public Builder clearMobileRegion() {
        bitField1_ = (bitField1_ & ~0x00400000);
        mobileRegion_ = 0;
        onChanged();
        return this;
      }

      // optional fixed32 conversion_ts = 83;
      private int conversionTs_ ;
      /**
       * <code>optional fixed32 conversion_ts = 83;</code>
       *
       * <pre>
       * время конверсии
       * </pre>
       */
      public boolean hasConversionTs() {
        return ((bitField1_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional fixed32 conversion_ts = 83;</code>
       *
       * <pre>
       * время конверсии
       * </pre>
       */
      public int getConversionTs() {
        return conversionTs_;
      }
      /**
       * <code>optional fixed32 conversion_ts = 83;</code>
       *
       * <pre>
       * время конверсии
       * </pre>
       */
      public Builder setConversionTs(int value) {
        bitField1_ |= 0x00800000;
        conversionTs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 conversion_ts = 83;</code>
       *
       * <pre>
       * время конверсии
       * </pre>
       */
      public Builder clearConversionTs() {
        bitField1_ = (bitField1_ & ~0x00800000);
        conversionTs_ = 0;
        onChanged();
        return this;
      }

      // optional fixed32 click_ts = 86;
      private int clickTs_ ;
      /**
       * <code>optional fixed32 click_ts = 86;</code>
       *
       * <pre>
       * время клика
       * </pre>
       */
      public boolean hasClickTs() {
        return ((bitField1_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional fixed32 click_ts = 86;</code>
       *
       * <pre>
       * время клика
       * </pre>
       */
      public int getClickTs() {
        return clickTs_;
      }
      /**
       * <code>optional fixed32 click_ts = 86;</code>
       *
       * <pre>
       * время клика
       * </pre>
       */
      public Builder setClickTs(int value) {
        bitField1_ |= 0x01000000;
        clickTs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 click_ts = 86;</code>
       *
       * <pre>
       * время клика
       * </pre>
       */
      public Builder clearClickTs() {
        bitField1_ = (bitField1_ & ~0x01000000);
        clickTs_ = 0;
        onChanged();
        return this;
      }

      // optional string top_goal = 89;
      private java.lang.Object topGoal_ = "";
      /**
       * <code>optional string top_goal = 89;</code>
       *
       * <pre>
       * Достигнутая цель ТОПа
       * </pre>
       */
      public boolean hasTopGoal() {
        return ((bitField1_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional string top_goal = 89;</code>
       *
       * <pre>
       * Достигнутая цель ТОПа
       * </pre>
       */
      public java.lang.String getTopGoal() {
        java.lang.Object ref = topGoal_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          topGoal_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string top_goal = 89;</code>
       *
       * <pre>
       * Достигнутая цель ТОПа
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTopGoalBytes() {
        java.lang.Object ref = topGoal_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          topGoal_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string top_goal = 89;</code>
       *
       * <pre>
       * Достигнутая цель ТОПа
       * </pre>
       */
      public Builder setTopGoal(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x02000000;
        topGoal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string top_goal = 89;</code>
       *
       * <pre>
       * Достигнутая цель ТОПа
       * </pre>
       */
      public Builder clearTopGoal() {
        bitField1_ = (bitField1_ & ~0x02000000);
        topGoal_ = getDefaultInstance().getTopGoal();
        onChanged();
        return this;
      }
      /**
       * <code>optional string top_goal = 89;</code>
       *
       * <pre>
       * Достигнутая цель ТОПа
       * </pre>
       */
      public Builder setTopGoalBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x02000000;
        topGoal_ = value;
        onChanged();
        return this;
      }

      // optional fixed32 top_counter_id = 105;
      private int topCounterId_ ;
      /**
       * <code>optional fixed32 top_counter_id = 105;</code>
       *
       * <pre>
       * ID счетчика ТОПа
       * </pre>
       */
      public boolean hasTopCounterId() {
        return ((bitField1_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional fixed32 top_counter_id = 105;</code>
       *
       * <pre>
       * ID счетчика ТОПа
       * </pre>
       */
      public int getTopCounterId() {
        return topCounterId_;
      }
      /**
       * <code>optional fixed32 top_counter_id = 105;</code>
       *
       * <pre>
       * ID счетчика ТОПа
       * </pre>
       */
      public Builder setTopCounterId(int value) {
        bitField1_ |= 0x04000000;
        topCounterId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 top_counter_id = 105;</code>
       *
       * <pre>
       * ID счетчика ТОПа
       * </pre>
       */
      public Builder clearTopCounterId() {
        bitField1_ = (bitField1_ & ~0x04000000);
        topCounterId_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 conversion_cost = 90;
      private int conversionCost_ ;
      /**
       * <code>optional uint32 conversion_cost = 90;</code>
       *
       * <pre>
       * цена за конверсию в рублях (копейки)
       * </pre>
       */
      public boolean hasConversionCost() {
        return ((bitField1_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional uint32 conversion_cost = 90;</code>
       *
       * <pre>
       * цена за конверсию в рублях (копейки)
       * </pre>
       */
      public int getConversionCost() {
        return conversionCost_;
      }
      /**
       * <code>optional uint32 conversion_cost = 90;</code>
       *
       * <pre>
       * цена за конверсию в рублях (копейки)
       * </pre>
       */
      public Builder setConversionCost(int value) {
        bitField1_ |= 0x08000000;
        conversionCost_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 conversion_cost = 90;</code>
       *
       * <pre>
       * цена за конверсию в рублях (копейки)
       * </pre>
       */
      public Builder clearConversionCost() {
        bitField1_ = (bitField1_ & ~0x08000000);
        conversionCost_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 conversion_currency_cost = 91;
      private int conversionCurrencyCost_ ;
      /**
       * <code>optional uint32 conversion_currency_cost = 91;</code>
       *
       * <pre>
       * цена за конверсию в валюте (1/100 валюты)
       * </pre>
       */
      public boolean hasConversionCurrencyCost() {
        return ((bitField1_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional uint32 conversion_currency_cost = 91;</code>
       *
       * <pre>
       * цена за конверсию в валюте (1/100 валюты)
       * </pre>
       */
      public int getConversionCurrencyCost() {
        return conversionCurrencyCost_;
      }
      /**
       * <code>optional uint32 conversion_currency_cost = 91;</code>
       *
       * <pre>
       * цена за конверсию в валюте (1/100 валюты)
       * </pre>
       */
      public Builder setConversionCurrencyCost(int value) {
        bitField1_ |= 0x10000000;
        conversionCurrencyCost_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 conversion_currency_cost = 91;</code>
       *
       * <pre>
       * цена за конверсию в валюте (1/100 валюты)
       * </pre>
       */
      public Builder clearConversionCurrencyCost() {
        bitField1_ = (bitField1_ & ~0x10000000);
        conversionCurrencyCost_ = 0;
        onChanged();
        return this;
      }

      // optional .ru.mail.go.webbase.TargetMsg.RTB_Banner rtb_banner = 70;
      private ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner rtbBanner_ = ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Builder, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_BannerOrBuilder> rtbBannerBuilder_;
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner rtb_banner = 70;</code>
       *
       * <pre>
       * rtb-инфо
       * </pre>
       */
      public boolean hasRtbBanner() {
        return ((bitField1_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner rtb_banner = 70;</code>
       *
       * <pre>
       * rtb-инфо
       * </pre>
       */
      public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner getRtbBanner() {
        if (rtbBannerBuilder_ == null) {
          return rtbBanner_;
        } else {
          return rtbBannerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner rtb_banner = 70;</code>
       *
       * <pre>
       * rtb-инфо
       * </pre>
       */
      public Builder setRtbBanner(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner value) {
        if (rtbBannerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          rtbBanner_ = value;
          onChanged();
        } else {
          rtbBannerBuilder_.setMessage(value);
        }
        bitField1_ |= 0x20000000;
        return this;
      }
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner rtb_banner = 70;</code>
       *
       * <pre>
       * rtb-инфо
       * </pre>
       */
      public Builder setRtbBanner(
          ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Builder builderForValue) {
        if (rtbBannerBuilder_ == null) {
          rtbBanner_ = builderForValue.build();
          onChanged();
        } else {
          rtbBannerBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x20000000;
        return this;
      }
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner rtb_banner = 70;</code>
       *
       * <pre>
       * rtb-инфо
       * </pre>
       */
      public Builder mergeRtbBanner(ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner value) {
        if (rtbBannerBuilder_ == null) {
          if (((bitField1_ & 0x20000000) == 0x20000000) &&
              rtbBanner_ != ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.getDefaultInstance()) {
            rtbBanner_ =
              ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.newBuilder(rtbBanner_).mergeFrom(value).buildPartial();
          } else {
            rtbBanner_ = value;
          }
          onChanged();
        } else {
          rtbBannerBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x20000000;
        return this;
      }
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner rtb_banner = 70;</code>
       *
       * <pre>
       * rtb-инфо
       * </pre>
       */
      public Builder clearRtbBanner() {
        if (rtbBannerBuilder_ == null) {
          rtbBanner_ = ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.getDefaultInstance();
          onChanged();
        } else {
          rtbBannerBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x20000000);
        return this;
      }
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner rtb_banner = 70;</code>
       *
       * <pre>
       * rtb-инфо
       * </pre>
       */
      public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Builder getRtbBannerBuilder() {
        bitField1_ |= 0x20000000;
        onChanged();
        return getRtbBannerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner rtb_banner = 70;</code>
       *
       * <pre>
       * rtb-инфо
       * </pre>
       */
      public ru.mail.go.webbase.TargetProto.TargetMsg.RTB_BannerOrBuilder getRtbBannerOrBuilder() {
        if (rtbBannerBuilder_ != null) {
          return rtbBannerBuilder_.getMessageOrBuilder();
        } else {
          return rtbBanner_;
        }
      }
      /**
       * <code>optional .ru.mail.go.webbase.TargetMsg.RTB_Banner rtb_banner = 70;</code>
       *
       * <pre>
       * rtb-инфо
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Builder, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_BannerOrBuilder> 
          getRtbBannerFieldBuilder() {
        if (rtbBannerBuilder_ == null) {
          rtbBannerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_Banner.Builder, ru.mail.go.webbase.TargetProto.TargetMsg.RTB_BannerOrBuilder>(
                  rtbBanner_,
                  getParentForChildren(),
                  isClean());
          rtbBanner_ = null;
        }
        return rtbBannerBuilder_;
      }

      // optional uint32 flags = 87;
      private int flags_ ;
      /**
       * <code>optional uint32 flags = 87;</code>
       *
       * <pre>
       * флаги. значения см. в include/target/stat_msg_flags.hpp
       * </pre>
       */
      public boolean hasFlags() {
        return ((bitField1_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional uint32 flags = 87;</code>
       *
       * <pre>
       * флаги. значения см. в include/target/stat_msg_flags.hpp
       * </pre>
       */
      public int getFlags() {
        return flags_;
      }
      /**
       * <code>optional uint32 flags = 87;</code>
       *
       * <pre>
       * флаги. значения см. в include/target/stat_msg_flags.hpp
       * </pre>
       */
      public Builder setFlags(int value) {
        bitField1_ |= 0x40000000;
        flags_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 flags = 87;</code>
       *
       * <pre>
       * флаги. значения см. в include/target/stat_msg_flags.hpp
       * </pre>
       */
      public Builder clearFlags() {
        bitField1_ = (bitField1_ & ~0x40000000);
        flags_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 custom_event_flags = 103;
      private int customEventFlags_ ;
      /**
       * <code>optional uint32 custom_event_flags = 103;</code>
       *
       * <pre>
       * флаги кастомных событий, значения см. в include/target/stat_msg_flags.hpp
       * </pre>
       */
      public boolean hasCustomEventFlags() {
        return ((bitField1_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional uint32 custom_event_flags = 103;</code>
       *
       * <pre>
       * флаги кастомных событий, значения см. в include/target/stat_msg_flags.hpp
       * </pre>
       */
      public int getCustomEventFlags() {
        return customEventFlags_;
      }
      /**
       * <code>optional uint32 custom_event_flags = 103;</code>
       *
       * <pre>
       * флаги кастомных событий, значения см. в include/target/stat_msg_flags.hpp
       * </pre>
       */
      public Builder setCustomEventFlags(int value) {
        bitField1_ |= 0x80000000;
        customEventFlags_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 custom_event_flags = 103;</code>
       *
       * <pre>
       * флаги кастомных событий, значения см. в include/target/stat_msg_flags.hpp
       * </pre>
       */
      public Builder clearCustomEventFlags() {
        bitField1_ = (bitField1_ & ~0x80000000);
        customEventFlags_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 max_cpm_limit = 88;
      private int maxCpmLimit_ ;
      /**
       * <code>optional uint32 max_cpm_limit = 88;</code>
       *
       * <pre>
       * самый большой cpm лимит для баннеров в этом запросе
       * </pre>
       */
      public boolean hasMaxCpmLimit() {
        return ((bitField2_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 max_cpm_limit = 88;</code>
       *
       * <pre>
       * самый большой cpm лимит для баннеров в этом запросе
       * </pre>
       */
      public int getMaxCpmLimit() {
        return maxCpmLimit_;
      }
      /**
       * <code>optional uint32 max_cpm_limit = 88;</code>
       *
       * <pre>
       * самый большой cpm лимит для баннеров в этом запросе
       * </pre>
       */
      public Builder setMaxCpmLimit(int value) {
        bitField2_ |= 0x00000001;
        maxCpmLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 max_cpm_limit = 88;</code>
       *
       * <pre>
       * самый большой cpm лимит для баннеров в этом запросе
       * </pre>
       */
      public Builder clearMaxCpmLimit() {
        bitField2_ = (bitField2_ & ~0x00000001);
        maxCpmLimit_ = 0;
        onChanged();
        return this;
      }

      // repeated uint32 clicked_campaigns = 92 [packed = true];
      private java.util.List<java.lang.Integer> clickedCampaigns_ = java.util.Collections.emptyList();
      private void ensureClickedCampaignsIsMutable() {
        if (!((bitField2_ & 0x00000002) == 0x00000002)) {
          clickedCampaigns_ = new java.util.ArrayList<java.lang.Integer>(clickedCampaigns_);
          bitField2_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated uint32 clicked_campaigns = 92 [packed = true];</code>
       *
       * <pre>
       * история кликов пользователя по кампаниям
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getClickedCampaignsList() {
        return java.util.Collections.unmodifiableList(clickedCampaigns_);
      }
      /**
       * <code>repeated uint32 clicked_campaigns = 92 [packed = true];</code>
       *
       * <pre>
       * история кликов пользователя по кампаниям
       * </pre>
       */
      public int getClickedCampaignsCount() {
        return clickedCampaigns_.size();
      }
      /**
       * <code>repeated uint32 clicked_campaigns = 92 [packed = true];</code>
       *
       * <pre>
       * история кликов пользователя по кампаниям
       * </pre>
       */
      public int getClickedCampaigns(int index) {
        return clickedCampaigns_.get(index);
      }
      /**
       * <code>repeated uint32 clicked_campaigns = 92 [packed = true];</code>
       *
       * <pre>
       * история кликов пользователя по кампаниям
       * </pre>
       */
      public Builder setClickedCampaigns(
          int index, int value) {
        ensureClickedCampaignsIsMutable();
        clickedCampaigns_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 clicked_campaigns = 92 [packed = true];</code>
       *
       * <pre>
       * история кликов пользователя по кампаниям
       * </pre>
       */
      public Builder addClickedCampaigns(int value) {
        ensureClickedCampaignsIsMutable();
        clickedCampaigns_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 clicked_campaigns = 92 [packed = true];</code>
       *
       * <pre>
       * история кликов пользователя по кампаниям
       * </pre>
       */
      public Builder addAllClickedCampaigns(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureClickedCampaignsIsMutable();
        super.addAll(values, clickedCampaigns_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 clicked_campaigns = 92 [packed = true];</code>
       *
       * <pre>
       * история кликов пользователя по кампаниям
       * </pre>
       */
      public Builder clearClickedCampaigns() {
        clickedCampaigns_ = java.util.Collections.emptyList();
        bitField2_ = (bitField2_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int64 content_id = 94;
      private long contentId_ ;
      /**
       * <code>optional int64 content_id = 94;</code>
       */
      public boolean hasContentId() {
        return ((bitField2_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int64 content_id = 94;</code>
       */
      public long getContentId() {
        return contentId_;
      }
      /**
       * <code>optional int64 content_id = 94;</code>
       */
      public Builder setContentId(long value) {
        bitField2_ |= 0x00000004;
        contentId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 content_id = 94;</code>
       */
      public Builder clearContentId() {
        bitField2_ = (bitField2_ & ~0x00000004);
        contentId_ = 0L;
        onChanged();
        return this;
      }

      // optional int32 service_id = 95;
      private int serviceId_ ;
      /**
       * <code>optional int32 service_id = 95;</code>
       */
      public boolean hasServiceId() {
        return ((bitField2_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 service_id = 95;</code>
       */
      public int getServiceId() {
        return serviceId_;
      }
      /**
       * <code>optional int32 service_id = 95;</code>
       */
      public Builder setServiceId(int value) {
        bitField2_ |= 0x00000008;
        serviceId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 service_id = 95;</code>
       */
      public Builder clearServiceId() {
        bitField2_ = (bitField2_ & ~0x00000008);
        serviceId_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 url_id = 98;
      private int urlId_ ;
      /**
       * <code>optional uint32 url_id = 98;</code>
       */
      public boolean hasUrlId() {
        return ((bitField2_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 url_id = 98;</code>
       */
      public int getUrlId() {
        return urlId_;
      }
      /**
       * <code>optional uint32 url_id = 98;</code>
       */
      public Builder setUrlId(int value) {
        bitField2_ |= 0x00000010;
        urlId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 url_id = 98;</code>
       */
      public Builder clearUrlId() {
        bitField2_ = (bitField2_ & ~0x00000010);
        urlId_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 template_id = 102;
      private int templateId_ ;
      /**
       * <code>optional uint32 template_id = 102;</code>
       *
       * <pre>
       * позволяет видеть правильный шаблон по расшифровке ссылки, если использовался шаблон из запроса
       * </pre>
       */
      public boolean hasTemplateId() {
        return ((bitField2_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 template_id = 102;</code>
       *
       * <pre>
       * позволяет видеть правильный шаблон по расшифровке ссылки, если использовался шаблон из запроса
       * </pre>
       */
      public int getTemplateId() {
        return templateId_;
      }
      /**
       * <code>optional uint32 template_id = 102;</code>
       *
       * <pre>
       * позволяет видеть правильный шаблон по расшифровке ссылки, если использовался шаблон из запроса
       * </pre>
       */
      public Builder setTemplateId(int value) {
        bitField2_ |= 0x00000020;
        templateId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 template_id = 102;</code>
       *
       * <pre>
       * позволяет видеть правильный шаблон по расшифровке ссылки, если использовался шаблон из запроса
       * </pre>
       */
      public Builder clearTemplateId() {
        bitField2_ = (bitField2_ & ~0x00000020);
        templateId_ = 0;
        onChanged();
        return this;
      }

      // repeated uint32 limited_pad_ids = 104 [packed = true];
      private java.util.List<java.lang.Integer> limitedPadIds_ = java.util.Collections.emptyList();
      private void ensureLimitedPadIdsIsMutable() {
        if (!((bitField2_ & 0x00000040) == 0x00000040)) {
          limitedPadIds_ = new java.util.ArrayList<java.lang.Integer>(limitedPadIds_);
          bitField2_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated uint32 limited_pad_ids = 104 [packed = true];</code>
       *
       * <pre>
       * площадки события, для которых задано ограничение доли трафика
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getLimitedPadIdsList() {
        return java.util.Collections.unmodifiableList(limitedPadIds_);
      }
      /**
       * <code>repeated uint32 limited_pad_ids = 104 [packed = true];</code>
       *
       * <pre>
       * площадки события, для которых задано ограничение доли трафика
       * </pre>
       */
      public int getLimitedPadIdsCount() {
        return limitedPadIds_.size();
      }
      /**
       * <code>repeated uint32 limited_pad_ids = 104 [packed = true];</code>
       *
       * <pre>
       * площадки события, для которых задано ограничение доли трафика
       * </pre>
       */
      public int getLimitedPadIds(int index) {
        return limitedPadIds_.get(index);
      }
      /**
       * <code>repeated uint32 limited_pad_ids = 104 [packed = true];</code>
       *
       * <pre>
       * площадки события, для которых задано ограничение доли трафика
       * </pre>
       */
      public Builder setLimitedPadIds(
          int index, int value) {
        ensureLimitedPadIdsIsMutable();
        limitedPadIds_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 limited_pad_ids = 104 [packed = true];</code>
       *
       * <pre>
       * площадки события, для которых задано ограничение доли трафика
       * </pre>
       */
      public Builder addLimitedPadIds(int value) {
        ensureLimitedPadIdsIsMutable();
        limitedPadIds_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 limited_pad_ids = 104 [packed = true];</code>
       *
       * <pre>
       * площадки события, для которых задано ограничение доли трафика
       * </pre>
       */
      public Builder addAllLimitedPadIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureLimitedPadIdsIsMutable();
        super.addAll(values, limitedPadIds_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 limited_pad_ids = 104 [packed = true];</code>
       *
       * <pre>
       * площадки события, для которых задано ограничение доли трафика
       * </pre>
       */
      public Builder clearLimitedPadIds() {
        limitedPadIds_ = java.util.Collections.emptyList();
        bitField2_ = (bitField2_ & ~0x00000040);
        onChanged();
        return this;
      }

      // optional uint32 matched = 107;
      private int matched_ ;
      /**
       * <code>optional uint32 matched = 107;</code>
       *
       * <pre>
       * проставляется демоном matcherd, нашли или нет положительное событие для оригинального отрицательного
       * </pre>
       */
      public boolean hasMatched() {
        return ((bitField2_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 matched = 107;</code>
       *
       * <pre>
       * проставляется демоном matcherd, нашли или нет положительное событие для оригинального отрицательного
       * </pre>
       */
      public int getMatched() {
        return matched_;
      }
      /**
       * <code>optional uint32 matched = 107;</code>
       *
       * <pre>
       * проставляется демоном matcherd, нашли или нет положительное событие для оригинального отрицательного
       * </pre>
       */
      public Builder setMatched(int value) {
        bitField2_ |= 0x00000080;
        matched_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 matched = 107;</code>
       *
       * <pre>
       * проставляется демоном matcherd, нашли или нет положительное событие для оригинального отрицательного
       * </pre>
       */
      public Builder clearMatched() {
        bitField2_ = (bitField2_ & ~0x00000080);
        matched_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 matched_ts = 108;
      private int matchedTs_ ;
      /**
       * <code>optional uint32 matched_ts = 108;</code>
       *
       * <pre>
       * проставляется демоном matcherd, timestamp соответствующего положительного события
       * </pre>
       */
      public boolean hasMatchedTs() {
        return ((bitField2_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 matched_ts = 108;</code>
       *
       * <pre>
       * проставляется демоном matcherd, timestamp соответствующего положительного события
       * </pre>
       */
      public int getMatchedTs() {
        return matchedTs_;
      }
      /**
       * <code>optional uint32 matched_ts = 108;</code>
       *
       * <pre>
       * проставляется демоном matcherd, timestamp соответствующего положительного события
       * </pre>
       */
      public Builder setMatchedTs(int value) {
        bitField2_ |= 0x00000100;
        matchedTs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 matched_ts = 108;</code>
       *
       * <pre>
       * проставляется демоном matcherd, timestamp соответствующего положительного события
       * </pre>
       */
      public Builder clearMatchedTs() {
        bitField2_ = (bitField2_ & ~0x00000100);
        matchedTs_ = 0;
        onChanged();
        return this;
      }

      // repeated uint32 contents = 110 [packed = true];
      private java.util.List<java.lang.Integer> contents_ = java.util.Collections.emptyList();
      private void ensureContentsIsMutable() {
        if (!((bitField2_ & 0x00000200) == 0x00000200)) {
          contents_ = new java.util.ArrayList<java.lang.Integer>(contents_);
          bitField2_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated uint32 contents = 110 [packed = true];</code>
       *
       * <pre>
       * контенты баннера
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getContentsList() {
        return java.util.Collections.unmodifiableList(contents_);
      }
      /**
       * <code>repeated uint32 contents = 110 [packed = true];</code>
       *
       * <pre>
       * контенты баннера
       * </pre>
       */
      public int getContentsCount() {
        return contents_.size();
      }
      /**
       * <code>repeated uint32 contents = 110 [packed = true];</code>
       *
       * <pre>
       * контенты баннера
       * </pre>
       */
      public int getContents(int index) {
        return contents_.get(index);
      }
      /**
       * <code>repeated uint32 contents = 110 [packed = true];</code>
       *
       * <pre>
       * контенты баннера
       * </pre>
       */
      public Builder setContents(
          int index, int value) {
        ensureContentsIsMutable();
        contents_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 contents = 110 [packed = true];</code>
       *
       * <pre>
       * контенты баннера
       * </pre>
       */
      public Builder addContents(int value) {
        ensureContentsIsMutable();
        contents_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 contents = 110 [packed = true];</code>
       *
       * <pre>
       * контенты баннера
       * </pre>
       */
      public Builder addAllContents(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureContentsIsMutable();
        super.addAll(values, contents_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 contents = 110 [packed = true];</code>
       *
       * <pre>
       * контенты баннера
       * </pre>
       */
      public Builder clearContents() {
        contents_ = java.util.Collections.emptyList();
        bitField2_ = (bitField2_ & ~0x00000200);
        onChanged();
        return this;
      }

      // optional float model_playback_rate = 111;
      private float modelPlaybackRate_ ;
      /**
       * <code>optional float model_playback_rate = 111;</code>
       *
       * <pre>
       * предсказание модели playback
       * </pre>
       */
      public boolean hasModelPlaybackRate() {
        return ((bitField2_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional float model_playback_rate = 111;</code>
       *
       * <pre>
       * предсказание модели playback
       * </pre>
       */
      public float getModelPlaybackRate() {
        return modelPlaybackRate_;
      }
      /**
       * <code>optional float model_playback_rate = 111;</code>
       *
       * <pre>
       * предсказание модели playback
       * </pre>
       */
      public Builder setModelPlaybackRate(float value) {
        bitField2_ |= 0x00000400;
        modelPlaybackRate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float model_playback_rate = 111;</code>
       *
       * <pre>
       * предсказание модели playback
       * </pre>
       */
      public Builder clearModelPlaybackRate() {
        bitField2_ = (bitField2_ & ~0x00000400);
        modelPlaybackRate_ = 0F;
        onChanged();
        return this;
      }

      // optional float expected_cer = 112;
      private float expectedCer_ ;
      /**
       * <code>optional float expected_cer = 112;</code>
       *
       * <pre>
       * используемая в аукционе оценка вероятности кастомного события
       * </pre>
       */
      public boolean hasExpectedCer() {
        return ((bitField2_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float expected_cer = 112;</code>
       *
       * <pre>
       * используемая в аукционе оценка вероятности кастомного события
       * </pre>
       */
      public float getExpectedCer() {
        return expectedCer_;
      }
      /**
       * <code>optional float expected_cer = 112;</code>
       *
       * <pre>
       * используемая в аукционе оценка вероятности кастомного события
       * </pre>
       */
      public Builder setExpectedCer(float value) {
        bitField2_ |= 0x00000800;
        expectedCer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float expected_cer = 112;</code>
       *
       * <pre>
       * используемая в аукционе оценка вероятности кастомного события
       * </pre>
       */
      public Builder clearExpectedCer() {
        bitField2_ = (bitField2_ & ~0x00000800);
        expectedCer_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ru.mail.go.webbase.TargetMsg)
    }

    static {
      defaultInstance = new TargetMsg(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.TargetMsg)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ru_mail_go_webbase_TargetStatMsg_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ru_mail_go_webbase_TargetStatMsg_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ru_mail_go_webbase_TargetMsg_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ru_mail_go_webbase_TargetMsg_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ru_mail_go_webbase_TargetMsg_TPS_cost_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ru_mail_go_webbase_TargetMsg_TPS_cost_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_Figures_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_Figures_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_History_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_History_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_SecondPriceInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_SecondPriceInfo_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014target.proto\022\022ru.mail.go.webbase\"\374\007\n\rT" +
      "argetStatMsg\022\017\n\007ev_type\030\001 \001(\r\022\r\n\005flags\030\002" +
      " \001(\r\022\022\n\ntoplog_vid\030\003 \001(\007\022\014\n\003vid\030\231\001 \001(\004\022\016" +
      "\n\006banner\030\004 \001(\r\022\014\n\004slot\030\005 \001(\r\022\r\n\005group\030\006 " +
      "\001(\r\022\017\n\007version\030\007 \001(\r\022\013\n\003age\030\t \001(\r\022\013\n\003sex" +
      "\030\n \001(\r\022\013\n\003geo\030\013 \001(\r\022\017\n\007user_id\030\014 \001(\004\022\017\n\007" +
      "user_ip\030\r \001(\007\022\024\n\014src_ip_chain\030\016 \003(\007\022\021\n\tt" +
      "imestamp\030\017 \001(\007\022\020\n\010campaign\030\021 \001(\r\022\016\n\006phra" +
      "se\030\022 \001(\r\022\022\n\nbanner_url\030\023 \001(\r\022\020\n\010sitezone" +
      "\030\033 \001(\r\022\025\n\rexperiment_id\030\035 \001(\r\022\013\n\003cpm\030\036 \001",
      "(\r\022\017\n\007site_id\030\037 \001(\r\022\021\n\torig_slot\030+ \001(\r\022\016" +
      "\n\006filter\030  \001(\r\022\013\n\003cln\030( \001(\r\022\014\n\004goal\030* \001(" +
      "\r\022\021\n\tuser_ipv6\0300 \001(\014\022\032\n\022user_ip_from_pro" +
      "xy\0302 \001(\007\022\024\n\014banner_event\0303 \001(\r\022\021\n\tdevice" +
      "_id\0307 \001(\014\022\027\n\016advertising_id\030\200\001 \001(\014\022\022\n\nan" +
      "droid_id\0308 \001(\014\022\014\n\004idfa\0309 \001(\014\022\r\n\004waid\030\230\001 " +
      "\001(\014\022\033\n\017matched_targets\030F \003(\rB\002\020\001\022-\n\006targ" +
      "et\030d \001(\0132\035.ru.mail.go.webbase.TargetMsg\022" +
      "\031\n\021target_win_notice\030j \001(\014\022\016\n\006rutube\030f \001" +
      "(\014\022\016\n\006ssp_id\030g \001(\r\022\022\n\nrequest_id\030h \001(\014\022\020",
      "\n\010sitename\030i \001(\014\022\r\n\005ok_id\030k \001(\004\022\016\n\006rando" +
      "m\030o \001(\r\022\013\n\003mid\030p \001(\r\022\030\n\020action_timestamp" +
      "\030r \001(\r\022\027\n\017postback_vendor\030w \001(\r\022\016\n\005vk_id" +
      "\030\202\001 \001(\004\022\022\n\tsha1_idfa\030\203\001 \001(\014\022\034\n\023sha1_adve" +
      "rtising_id\030\204\001 \001(\014\022\022\n\tsha1_dpid\030\205\001 \001(\014\022\014\n" +
      "\003uid\030\247\001 \001(\004\022\027\n\016ok_viral_chain\030\253\001 \003(\004\022\023\n\n" +
      "winner_cpm\030\271\001 \001(\r\"\275\023\n\tTargetMsg\022\016\n\006repea" +
      "t\030\021 \001(\r\022\016\n\006pad_id\030\001 \001(\r\022\025\n\radvertiser_id" +
      "\030\004 \001(\r\022\022\n\npackage_id\030\005 \001(\r\022\017\n\007misc_id\030\006 " +
      "\001(\r\022\023\n\013campaign_id\030\010 \001(\r\022\021\n\tserver_id\030\t ",
      "\001(\r\022\024\n\014order_number\030\014 \001(\r\022\030\n\020campaign_ve" +
      "rsion\030\020 \001(\007\022\022\n\nctr_origin\030\013 \001(\r\022\021\n\tmodel" +
      "_ctr\030\016 \001(\002\022\024\n\014expected_ctr\030\017 \001(\002\022\032\n\022expe" +
      "cted_clicks_cr\030U \001(\002\022\024\n\014expected_cpm\030\007 \001" +
      "(\r\022\014\n\004cost\030\003 \001(\r\022\025\n\rcurrency_cost\030\023 \001(\r\022" +
      "\023\n\013currency_id\030\032 \001(\r\022\030\n\rcurrency_rate\030a " +
      "\001(\002:\0011\022\024\n\014paid_ev_type\030` \001(\r\022\031\n\021paid_ban" +
      "ner_event\030q \001(\r\022\031\n\021currency_cost_ppe\030c \001" +
      "(\r\022+\n\037currency_cost_per_goal_for_ocpm\030d " +
      "\001(\rB\002\030\001\022\031\n\021currency_base_ppe\030e \001(\r\022\032\n\016pr",
      "iced_ev_type\030s \001(\005:\002-1\022\033\n\023priced_banner_" +
      "event\030t \001(\r\022\032\n\022currency_cost_ppre\030u \001(\r\022" +
      "\032\n\022currency_base_ppre\030v \001(\r\022\031\n\021src_curre" +
      "ncy_cost\030m \001(\r\022\026\n\016src_event_type\030r \001(\r\0229" +
      "\n\ttps_costs\030\033 \003(\0132&.ru.mail.go.webbase.T" +
      "argetMsg.TPS_cost\022\013\n\003geo\030\024 \001(\r\022\017\n\007req_ge" +
      "o\030Q \001(\r\022\025\n\rimpression_id\030\025 \001(\006\022\036\n\026origin" +
      "al_impression_id\030M \001(\006\022\027\n\017original_req_t" +
      "s\030N \001(\007\022\025\n\rsubrequest_id\030\026 \001(\r\022\016\n\006req_ts" +
      "\030\002 \001(\007\022\023\n\013req_user_ip\030\022 \001(\007\022\025\n\rreq_user_",
      "ipv6\030\027 \001(\014\022\020\n\010image_id\030\030 \001(\r\022\023\n\013audience" +
      "_id\030\031 \001(\r\022\027\n\017bannerd_test_id\030\036 \001(\r\022#\n\027li" +
      "mited_bannerd_test_id\030\037 \001(\005:\002-1\022\031\n\021alive" +
      "_money_ratio\030# \001(\002\022\016\n\006filter\030( \001(\r\022\023\n\013fa" +
      "ke_filter\030) \001(\r\022\030\n\020banner_text_hash\0309 \001(" +
      "\007\022\031\n\021banner_title_hash\030: \001(\007\022\022\n\nmm_user_" +
      "id\030= \001(\006\022\023\n\013shows_count\030\r \001(\r\022\024\n\014clicks_" +
      "count\030R \001(\r\022\032\n\022banner_shown_times\030T \001(\r\022" +
      "\020\n\004apps\030O \003(\rB\002\020\001\022\024\n\014mobile_osver\030P \001(\r\022" +
      "\025\n\rmobile_region\030j \001(\r\022\025\n\rconversion_ts\030",
      "S \001(\007\022\020\n\010click_ts\030V \001(\007\022\020\n\010top_goal\030Y \001(" +
      "\t\022\026\n\016top_counter_id\030i \001(\007\022\027\n\017conversion_" +
      "cost\030Z \001(\r\022 \n\030conversion_currency_cost\030[" +
      " \001(\r\022<\n\nrtb_banner\030F \001(\0132(.ru.mail.go.we" +
      "bbase.TargetMsg.RTB_Banner\022\r\n\005flags\030W \001(" +
      "\r\022\032\n\022custom_event_flags\030g \001(\r\022\025\n\rmax_cpm" +
      "_limit\030X \001(\r\022\035\n\021clicked_campaigns\030\\ \003(\rB" +
      "\002\020\001\022\022\n\ncontent_id\030^ \001(\003\022\022\n\nservice_id\030_ " +
      "\001(\005\022\016\n\006url_id\030b \001(\r\022\023\n\013template_id\030f \001(\r" +
      "\022\033\n\017limited_pad_ids\030h \003(\rB\002\020\001\022\017\n\007matched",
      "\030k \001(\r\022\022\n\nmatched_ts\030l \001(\r\022\024\n\010contents\030n" +
      " \003(\rB\002\020\001\022\033\n\023model_playback_rate\030o \001(\002\022\024\n" +
      "\014expected_cer\030p \001(\002\032?\n\010TPS_cost\022\016\n\006tps_i" +
      "d\030\001 \001(\r\022\025\n\rcurrency_cost\030\002 \001(\r\022\014\n\004cost\030\003" +
      " \001(\r\032\312\004\n\nRTB_Banner\022\021\n\tcpm_limit\030\001 \001(\r\022\025" +
      "\n\rsite_place_id\030\004 \001(\r\022\017\n\007trg_cpm\030\002 \001(\r\022\017" +
      "\n\007ssp_cpm\030\003 \001(\r\022A\n\007history\030\006 \001(\01320.ru.ma" +
      "il.go.webbase.TargetMsg.RTB_Banner.Histo" +
      "ry\022S\n\021second_price_info\030\t \001(\01328.ru.mail." +
      "go.webbase.TargetMsg.RTB_Banner.SecondPr",
      "iceInfo\032\232\001\n\007Figures\022\024\n\014expected_cpm\030\001 \001(" +
      "\r\022\014\n\004cost\030\002 \001(\r\022\025\n\rcurrency_cost\030\003 \001(\r\022\031" +
      "\n\021currency_cost_ppe\030c \001(\r\022\027\n\017conversion_" +
      "cost\030Z \001(\r\022 \n\030conversion_currency_cost\030[" +
      " \001(\r\032P\n\007History\022E\n\013src_figures\030\001 \001(\01320.r" +
      "u.mail.go.webbase.TargetMsg.RTB_Banner.F" +
      "igures\032i\n\017SecondPriceInfo\022\023\n\013a_block_cpm" +
      "\030\001 \001(\r\022A\n\007figures\030\002 \001(\01320.ru.mail.go.web" +
      "base.TargetMsg.RTB_Banner.FiguresB\rB\013Tar" +
      "getProto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_ru_mail_go_webbase_TargetStatMsg_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_ru_mail_go_webbase_TargetStatMsg_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ru_mail_go_webbase_TargetStatMsg_descriptor,
              new java.lang.String[] { "EvType", "Flags", "ToplogVid", "Vid", "Banner", "Slot", "Group", "Version", "Age", "Sex", "Geo", "UserId", "UserIp", "SrcIpChain", "Timestamp", "Campaign", "Phrase", "BannerUrl", "Sitezone", "ExperimentId", "Cpm", "SiteId", "OrigSlot", "Filter", "Cln", "Goal", "UserIpv6", "UserIpFromProxy", "BannerEvent", "DeviceId", "AdvertisingId", "AndroidId", "Idfa", "Waid", "MatchedTargets", "Target", "TargetWinNotice", "Rutube", "SspId", "RequestId", "Sitename", "OkId", "Random", "Mid", "ActionTimestamp", "PostbackVendor", "VkId", "Sha1Idfa", "Sha1AdvertisingId", "Sha1Dpid", "Uid", "OkViralChain", "WinnerCpm", });
          internal_static_ru_mail_go_webbase_TargetMsg_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_ru_mail_go_webbase_TargetMsg_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ru_mail_go_webbase_TargetMsg_descriptor,
              new java.lang.String[] { "Repeat", "PadId", "AdvertiserId", "PackageId", "MiscId", "CampaignId", "ServerId", "OrderNumber", "CampaignVersion", "CtrOrigin", "ModelCtr", "ExpectedCtr", "ExpectedClicksCr", "ExpectedCpm", "Cost", "CurrencyCost", "CurrencyId", "CurrencyRate", "PaidEvType", "PaidBannerEvent", "CurrencyCostPpe", "CurrencyCostPerGoalForOcpm", "CurrencyBasePpe", "PricedEvType", "PricedBannerEvent", "CurrencyCostPpre", "CurrencyBasePpre", "SrcCurrencyCost", "SrcEventType", "TpsCosts", "Geo", "ReqGeo", "ImpressionId", "OriginalImpressionId", "OriginalReqTs", "SubrequestId", "ReqTs", "ReqUserIp", "ReqUserIpv6", "ImageId", "AudienceId", "BannerdTestId", "LimitedBannerdTestId", "AliveMoneyRatio", "Filter", "FakeFilter", "BannerTextHash", "BannerTitleHash", "MmUserId", "ShowsCount", "ClicksCount", "BannerShownTimes", "Apps", "MobileOsver", "MobileRegion", "ConversionTs", "ClickTs", "TopGoal", "TopCounterId", "ConversionCost", "ConversionCurrencyCost", "RtbBanner", "Flags", "CustomEventFlags", "MaxCpmLimit", "ClickedCampaigns", "ContentId", "ServiceId", "UrlId", "TemplateId", "LimitedPadIds", "Matched", "MatchedTs", "Contents", "ModelPlaybackRate", "ExpectedCer", });
          internal_static_ru_mail_go_webbase_TargetMsg_TPS_cost_descriptor =
            internal_static_ru_mail_go_webbase_TargetMsg_descriptor.getNestedTypes().get(0);
          internal_static_ru_mail_go_webbase_TargetMsg_TPS_cost_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ru_mail_go_webbase_TargetMsg_TPS_cost_descriptor,
              new java.lang.String[] { "TpsId", "CurrencyCost", "Cost", });
          internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_descriptor =
            internal_static_ru_mail_go_webbase_TargetMsg_descriptor.getNestedTypes().get(1);
          internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_descriptor,
              new java.lang.String[] { "CpmLimit", "SitePlaceId", "TrgCpm", "SspCpm", "History", "SecondPriceInfo", });
          internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_Figures_descriptor =
            internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_descriptor.getNestedTypes().get(0);
          internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_Figures_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_Figures_descriptor,
              new java.lang.String[] { "ExpectedCpm", "Cost", "CurrencyCost", "CurrencyCostPpe", "ConversionCost", "ConversionCurrencyCost", });
          internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_History_descriptor =
            internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_descriptor.getNestedTypes().get(1);
          internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_History_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_History_descriptor,
              new java.lang.String[] { "SrcFigures", });
          internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_SecondPriceInfo_descriptor =
            internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_descriptor.getNestedTypes().get(2);
          internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_SecondPriceInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ru_mail_go_webbase_TargetMsg_RTB_Banner_SecondPriceInfo_descriptor,
              new java.lang.String[] { "ABlockCpm", "Figures", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
