buildscript {
    repositories {
        maven {
            name = 'go.mail.ru'
            url = 'https://artifactory.g.smailru.net/artifactory/repo/'
        }
    }
    dependencies {
        classpath 'ru.mail.go.gradle-plugins:application-plugin:1.15.0'
        classpath 'ru.mail.go.gradle-plugins:release-plugin:1.11.0'
    }
}

repositories {
    maven {
        name = 'go.mail.ru'
        url = 'https://artifactory.g.smailru.net/artifactory/repo/'
    }
}

apply plugin: 'java'
apply plugin: 'application'

group = 'ru.mail'
version = '1.0-SNAPSHOT'
mainClassName = 'ru.mail.Main'

tasks.withType(JavaCompile) {
    options.compilerArgs += [
        "-Werror",
        "-Xlint:deprecation"
    ]
}


configurations {
    videotxt
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile 'ch.qos.logback:logback-classic:1.2.11'
    compile group: 'org.apache.hbase', name: 'hbase-client', version: '1.2.0-cdh5.16.1'
    compile group: 'ru.mail.go', name: 'common', version: '1.8.176'
    compile group: 'ru.mail.go', name: 'protogen', version: '1.184'
    compile group: 'org.apache.kafka', name: 'kafka-clients', version: '2.3.0'
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.2.0'
    compile group: 'org.json', name: 'json', version: '20180813'
    compile(group: 'ru.mail.go.webbase.video', name: 'video_search', version: '1.0.24') {
        exclude group: 'ru.mail.go', module: 'hadoop_tools'
        exclude group: 'org.apache.tika', module: 'tika-app'
    }
    compile group: 'com.drewnoakes', name: 'metadata-extractor', version: '2.15.0'
    videotxt group: 'ru.mail.go.webbase.video', name: 'video_search', version: '1.0.24', transitive: false
    testCompile 'junit:junit:4.12'
}

jar {
    zip64=true

    manifest {
        attributes "Main-Class": "$mainClassName"
    }
    from {
        configurations.compile.collect { it.isDirectory() || it.name.endsWith("so") ? it : zipTree(it) }
    }
    exclude ('META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA')
}

task copyLibs(type: Copy) {
    into "$buildDir/lib"
    from configurations.runtime
    include "*.so"
}

task copyFiles(type: Copy) {
    group = "unzip"
    into "$buildDir/files"
    from zipTree(configurations.videotxt.singleFile)
    include "*.txt"
    include "*.xml"
    include "*.model"
    include "*.conf"
}

configurations {
    compile.exclude group: "org.slf4j", module: "slf4j-log4j12"
}

sourceSets{
    main {
        java {
            srcDir "${projectDir}/src/main"
            exclude "**/test/**"
        }
    }
    test {
        java {
            srcDir "${projectDir}/src/main"
            include "**/test/**"
        }
    }
}

